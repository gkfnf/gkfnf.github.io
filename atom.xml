<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>forsigner的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.forsigner.com/"/>
  <updated>2017-02-04T06:12:54.000Z</updated>
  <id>http://www.forsigner.com/</id>
  
  <author>
    <name>forsigner</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web-Fontmin -- 在线提取你需要的字体</title>
    <link href="http://www.forsigner.com/2016/03/13/web-fontmin/"/>
    <id>http://www.forsigner.com/2016/03/13/web-fontmin/</id>
    <published>2016-03-12T16:00:00.000Z</published>
    <updated>2017-02-04T06:12:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于-font-face"><a href="#关于-font-face" class="headerlink" title="关于@font-face"></a>关于@font-face</h1><p><strong> <a href="http://www.w3.org/TR/css3-fonts/" target="_blank" rel="external">@font-face</a></strong> 是<a href="http://www.w3.org/TR/CSS/#css3" target="_blank" rel="external">CSS3</a>中的一个模块，使用 @font-face 可以自定义网页字体，即使用户的电脑没有安装某种字体。怎么用 @font-face 呢？你可能见过类似下面的代码片段，它可以让 @font-face 兼容所有浏览器。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">font-face</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"SentyZHAO"</span>;</div><div class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"/fonts/SentyZHAO.eot"</span>); <span class="comment">/* IE9 */</span></div><div class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"/fonts/SentyZHAO.eot?#iefix"</span>) <span class="built_in">format</span>(<span class="string">"embedded-opentype"</span>), <span class="comment">/* IE6-IE8 */</span></div><div class="line">    <span class="built_in">url</span>(<span class="string">"/fonts/SentyZHAO.woff"</span>) <span class="built_in">format</span>(<span class="string">"woff"</span>), <span class="comment">/* chrome, firefox */</span></div><div class="line"></div><div class="line">    <span class="comment">/* chrome, firefox, opera, Safari, Android, iOS 4.2+ */</span></div><div class="line">    <span class="built_in">url</span>(<span class="string">"/fonts/SentyZHAO.ttf"</span>) <span class="built_in">format</span>(<span class="string">"truetype"</span>),</div><div class="line">    <span class="built_in">url</span>(<span class="string">"/fonts/SentyZHAO.svg#SentyZHAO"</span>) <span class="built_in">format</span>(<span class="string">"svg"</span>); <span class="comment">/* iOS 4.1- */</span></div><div class="line">    <span class="attribute">font-style</span>: normal;</div><div class="line">    <span class="attribute">font-weight</span>: normal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Webfont-Generator-Font-Squirrel"><a href="#Webfont-Generator-Font-Squirrel" class="headerlink" title="Webfont Generator - Font Squirrel"></a>Webfont Generator - Font Squirrel</h1><p>在上面的代码片段可以看出，要兼容性好的使用 @font-face，我们同时需要 eot 、woff、ttf、svg 格式的字体。常用的工具是 <a href="http://www.fontsquirrel.com/fontface/generator" target="_blank" rel="external">fontsquirrel</a>，一个字体生成器，可以在线生成  eot 、woff、ttf、svg 格式的字体，相信很多前端用过，具体用法可以官网试试。</p>
<h1 id="Fontmin"><a href="#Fontmin" class="headerlink" title="Fontmin"></a>Fontmin</h1><p>第一个纯 JavaScript 字体子集化方案，一个百度出品的优秀工具。<br>Fontmin 有什么用呢？</p>
<blockquote>
<p>提供了 ttf子集化，eot/woff/svg格式转换，css生成 等功能，助推 webfont 发展，提升网页文字体验。</p>
</blockquote>
<p>上面是官方的说法，通俗地理解有3个作用：</p>
<ol>
<li>提取部分字体</li>
<li>转换字体格式</li>
<li>生成 webfont 和对应 CSS 样式</li>
</ol>
<h2 id="Fontmin-应用场景"><a href="#Fontmin-应用场景" class="headerlink" title="Fontmin 应用场景"></a>Fontmin 应用场景</h2><p>有时候，我们想给网站的 Logo 、 Slogan 、标题、活动页等的中文自定义字体，我们可以使用 @font-face 引入 Web 字体，但是完整的中文字体库都是 8M 10M ，加载性能非常差，所以我们提取部分我们使用到的字体，这样可以把字体文件变成几KB。</p>
<h2 id="Fontmin-用法"><a href="#Fontmin-用法" class="headerlink" title="Fontmin 用法"></a>Fontmin 用法</h2><p>Fontmin 的用法很简单：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> Fontmin = <span class="built_in">require</span>(<span class="string">'fontmin'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> fontmin = <span class="keyword">new</span> Fontmin()</div><div class="line">    .src(<span class="string">'fonts/*.ttf'</span>)</div><div class="line">    .dest(<span class="string">'build/fonts'</span>);</div><div class="line"></div><div class="line">fontmin.run(<span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="keyword">throw</span> err;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(files[<span class="number">0</span>]);</div><div class="line">    <span class="comment">// =&gt; &#123; contents: &lt;Buffer 00 01 00 ...&gt; &#125;</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>详细介绍和用法可以看这篇文章： <a href="http://efe.baidu.com/blog/fontmin-getting-started/" target="_blank" rel="external">http://efe.baidu.com/blog/fontmin-getting-started/</a></p>
<h2 id="基于-Fontmin-的工具"><a href="#基于-Fontmin-的工具" class="headerlink" title="基于 Fontmin 的工具"></a>基于 Fontmin 的工具</h2><ul>
<li><strong><a href="https://github.com/ecomfe/fontmin-app" target="_blank" rel="external">fontmin-app</a></strong> - Fontmin 桌面版 App，需下载安装使用</li>
<li><strong><a href="https://github.com/ecomfe/gulp-fontmin" target="_blank" rel="external">gulp-fontmin</a></strong> - Fontmin 的 Gulp 插件</li>
<li><strong><a href="https://github.com/aui/font-spider" target="_blank" rel="external">font-spider</a></strong> - 自动分析页面使用的 WebFont 并进行按需压缩</li>
</ul>
<h1 id="Web-fontmin"><a href="#Web-fontmin" class="headerlink" title="Web-fontmin"></a>Web-fontmin</h1><p>好吧，扯了这么多，终于到文章的主题。</p>
<p>Web-fontmin 不是什么高大上的东西，一个基于 Fontmin 构建的字体工具，它的用处只有两个：</p>
<ol>
<li>提取字体</li>
<li>字体格式转换</li>
</ol>
<p>通俗的理解，Web-fontmin 是一个这样的工具：Squirrel + fontmin-app，他是两者的结合体。</p>
<p>Squirrel 只有单纯的生成不同格式的webfont，且不支持中文。Web-fontmin不单止可以转换格式同时支持中文，还可以提取字体，并且有更快的上传和转换速度。</p>
<p>Fontmin-app 主要作用是提取字体，需要下载安装，且不支持Linux。Web-Fontmin 拥有Fontmin-app的所有功能，并且在线即可用。</p>
<p>使用Web-fontmin：<a href="http://fontmin.forsigner.com/" target="_blank" rel="external">http://fontmin.forsigner.com/</a></p>
<p>Github 地址：<strong><a href="https://github.com/forsigner/web-fontmin" target="_blank" rel="external">web-fontmin</a></strong></p>
<p>网页效果：</p>
<p><img src="http://forsigner.com/images/web-fontmin/page-1.png" alt="page-1"><br><img src="http://forsigner.com/images/web-fontmin/page-2.png" alt="page-2"></p>
<h1 id="常用免费字体网站"><a href="#常用免费字体网站" class="headerlink" title="常用免费字体网站"></a>常用免费字体网站</h1><p>推荐几个常用的字体下载网站：</p>
<ul>
<li><a href="https://www.google.com/fonts/" target="_blank" rel="external">Google fonts</a></li>
<li><a href="http://www.dafont.com/" target="_blank" rel="external">Dafont</a></li>
<li><a href="https://typekit.com/" target="_blank" rel="external">Typekit</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于-font-face&quot;&gt;&lt;a href=&quot;#关于-font-face&quot; class=&quot;headerlink&quot; title=&quot;关于@font-face&quot;&gt;&lt;/a&gt;关于@font-face&lt;/h1&gt;&lt;p&gt;&lt;strong&gt; &lt;a href=&quot;http://www.w
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.forsigner.com/tags/JavaScript/"/>
    
      <category term="Fontmin" scheme="http://www.forsigner.com/tags/Fontmin/"/>
    
  </entry>
  
  <entry>
    <title>Fexo 文檔</title>
    <link href="http://www.forsigner.com/2016/03/10/fexo-doc-zh-tw/"/>
    <id>http://www.forsigner.com/2016/03/10/fexo-doc-zh-tw/</id>
    <published>2016-03-09T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="開始"><a href="#開始" class="headerlink" title="開始"></a>開始</h1><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> my-blog</div><div class="line">$ git <span class="built_in">clone</span> git@github.com:forsigner/fexo.git themes/fexo</div></pre></td></tr></table></figure>
<h2 id="啟用"><a href="#啟用" class="headerlink" title="啟用"></a>啟用</h2><p>打開博客根目錄的 <code>_config.yml</code> 設為 <code>theme: fexo</code></p>
<h2 id="升級"><a href="#升級" class="headerlink" title="升級"></a>升級</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> themes/fexo</div><div class="line">$ git commit -am <span class="string">'update'</span></div><div class="line">$ git pull</div></pre></td></tr></table></figure>
<h1 id="配置主題"><a href="#配置主題" class="headerlink" title="配置主題"></a>配置主題</h1><p>主題配置全部在<code>theme/fexo</code>裏面完成，所裏下面所有配置指的是配置<code>theme/fexo/_config.yml</code>。</p>
<h2 id="設置基本信息"><a href="#設置基本信息" class="headerlink" title="設置基本信息"></a>設置基本信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">blog_name: Forsigner</div><div class="line">slogan: Find the bug of the world</div></pre></td></tr></table></figure>
<h2 id="設置頭像"><a href="#設置頭像" class="headerlink" title="設置頭像"></a>設置頭像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># relative url</span></div><div class="line">avatar: /images/avatar.jpg</div><div class="line"><span class="comment"># or absolute url</span></div><div class="line">avatar: https://avatars0.githubusercontent.com/u/2668081?v=3&amp;s=460</div></pre></td></tr></table></figure>
<h2 id="設置favicon"><a href="#設置favicon" class="headerlink" title="設置favicon"></a>設置favicon</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">favicon: /favicon.ico</div></pre></td></tr></table></figure>
<h2 id="設置關鍵詞"><a href="#設置關鍵詞" class="headerlink" title="設置關鍵詞"></a>設置關鍵詞</h2><p>關鍵詞主要作用是優化SEO</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">keywords: forsigner,前端,設計,Hexo主題,前端開發,用戶體驗,設計,frontend,design,nodejs,JavaScript</div></pre></td></tr></table></figure>
<h2 id="設置首頁內容"><a href="#設置首頁內容" class="headerlink" title="設置首頁內容"></a>設置首頁內容</h2><p>你可以設置是否在首頁直接顯示文章</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">init_page_content: HOME_NAV  <span class="comment"># HOME_NAV | POST</span></div></pre></td></tr></table></figure>
<h2 id="設置首頁導航"><a href="#設置首頁導航" class="headerlink" title="設置首頁導航"></a>設置首頁導航</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">home_nav:</div><div class="line">  - name: B<span class="built_in">log</span></div><div class="line">    url: /archives</div><div class="line">  - name: Github</div><div class="line">    url: https://github.com/forsigner</div><div class="line">    target: _blank</div><div class="line">  - name: Douban</div><div class="line">    url: http://www.douban.com/people/forsigner/</div><div class="line">    target: _blank</div><div class="line">  - name: Twitter</div><div class="line">    url: https://twitter.com/forsigner</div><div class="line">    target: _blank</div></pre></td></tr></table></figure>
<h2 id="設置頁面導航"><a href="#設置頁面導航" class="headerlink" title="設置頁面導航"></a>設置頁面導航</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">page_nav:</div><div class="line">  - 博客: /archives/</div><div class="line">  - 分類: /category/</div><div class="line">  - 標簽: /tag/</div><div class="line">  - 友鏈: /link/</div><div class="line">  - 關於: /about/</div><div class="line">  - RSS: /atom.xml</div></pre></td></tr></table></figure>
<h2 id="設置頁面導航樣式"><a href="#設置頁面導航樣式" class="headerlink" title="設置頁面導航樣式"></a>設置頁面導航樣式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">page_nav_style: CIRCLE  <span class="comment"># CIRCLE|ROUND_RECT</span></div></pre></td></tr></table></figure>
<h2 id="設置面包屑"><a href="#設置面包屑" class="headerlink" title="設置面包屑"></a>設置面包屑</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">breadcrumb:</div><div class="line">  isShow: <span class="literal">true</span> <span class="comment"># true|fase</span></div></pre></td></tr></table></figure>
<h2 id="設置盒子"><a href="#設置盒子" class="headerlink" title="設置盒子"></a>設置盒子</h2><p>你可設置盒子是否顯示和其顯示的文字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">toolbox:</div><div class="line">  isShow: <span class="literal">true</span> <span class="comment"># true|fase</span></div><div class="line">  text: 盒子</div></pre></td></tr></table></figure>
<h2 id="搜索頁面-Slogan"><a href="#搜索頁面-Slogan" class="headerlink" title="搜索頁面 Slogan"></a>搜索頁面 Slogan</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">search_slogan:</div><div class="line">  isShow: <span class="literal">true</span> <span class="comment"># true|fase</span></div><div class="line">  text: Can you find the bug of world ~</div></pre></td></tr></table></figure>
<h2 id="友鏈頁面-Slogan"><a href="#友鏈頁面-Slogan" class="headerlink" title="友鏈頁面 Slogan"></a>友鏈頁面 Slogan</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">link_slogan:</div><div class="line">  isShow: <span class="literal">true</span> <span class="comment"># true|fase</span></div><div class="line">  text: 交換友鏈可以郵件 forsigner@gmail.com</div></pre></td></tr></table></figure>
<h2 id="設置文章標題對齊方式"><a href="#設置文章標題對齊方式" class="headerlink" title="設置文章標題對齊方式"></a>設置文章標題對齊方式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">post:</div><div class="line">  header_align: center <span class="comment"># left|center</span></div></pre></td></tr></table></figure>
<h1 id="啟用頁面"><a href="#啟用頁面" class="headerlink" title="啟用頁面"></a>啟用頁面</h1><p>你可以啟用你想要的頁面，在開啟關於、友鏈、項目的頁面後，你可以對這些設置這些頁面的內容</p>
<h2 id="啟用分類頁面"><a href="#啟用分類頁面" class="headerlink" title="啟用分類頁面"></a>啟用分類頁面</h2><ol>
<li>在博客根目錄執行 <code>hexo new page category</code></li>
<li>修改<code>my-blog/source/category/index.md</code>裏面的內容:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: category</div><div class="line">layout: category</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<h2 id="啟用標簽頁面"><a href="#啟用標簽頁面" class="headerlink" title="啟用標簽頁面"></a>啟用標簽頁面</h2><ol>
<li>在博客根目錄執行 <code>hexo new page tag</code></li>
<li>修改<code>my-blog/source/tag/index.md</code>裏面的內容:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: tag</div><div class="line">layout: tag</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<h2 id="啟用友鏈頁面"><a href="#啟用友鏈頁面" class="headerlink" title="啟用友鏈頁面"></a>啟用友鏈頁面</h2><ol>
<li>在博客根目錄執行 <code>hexo new page link</code></li>
<li>修改<code>my-blog/source/link/index.md</code>裏面的內容:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: link</div><div class="line">layout: link</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<p>啟用友鏈頁面後，可以設置類似以下格式的內容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">link:</div><div class="line">  - name: 織網</div><div class="line">    info: 身體和靈魂，總有一個在路上</div><div class="line">    url: http://zheng-ji.info/</div><div class="line">    avatar: https://avatars3.githubusercontent.com/u/1414745?v=3&amp;s=460</div><div class="line">  - name: Dongyado</div><div class="line">    info: 生命不止，折騰不息</div><div class="line">    url: http://dongyado.com/</div><div class="line">    avatar: https://avatars0.githubusercontent.com/u/6274940?v=3&amp;s=460</div><div class="line">  - name: OrangeCoder</div><div class="line">    info: android ffmpeg nodejs gradle</div><div class="line">    url: http://orangecoder.com/</div><div class="line">    avatar: https://avatars0.githubusercontent.com/u/2263785?v=3&amp;s=460</div><div class="line">  - name: EverET</div><div class="line">    info: 好記性不如爛筆頭</div><div class="line">    url: http://everet.org/about-me/</div><div class="line">    avatar: https://avatars1.githubusercontent.com/u/1559563?v=3&amp;s=460</div></pre></td></tr></table></figure>
<h2 id="啟用關於頁面"><a href="#啟用關於頁面" class="headerlink" title="啟用關於頁面"></a>啟用關於頁面</h2><ol>
<li>在博客根目錄執行 <code>hexo new page about</code></li>
<li>修改<code>my-blog/source/about/index.md</code>裏面的內容:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: about</div><div class="line">layout: about</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<p>啟用關於頁面後，可以設置類似以下格式的內容:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">about:</div><div class="line">  - <span class="built_in">type</span>: me</div><div class="line">    icon: icon-user</div><div class="line">    text_value:</div><div class="line">    - <span class="string">"Scut，1991，Spring."</span></div><div class="line">    - <span class="string">"喜歡設計，擅長編程，喜歡睡懶覺."</span></div><div class="line">    - <span class="string">"前端開發工程師，常用 HTML / CSS / JavaScript."</span></div><div class="line">  - <span class="built_in">type</span>: Github</div><div class="line">    icon: icon-github</div><div class="line">    text_key: Github</div><div class="line">    text_value: <span class="string">"@forsigner"</span></div><div class="line">    text_value_url: https://github.com/forsigner</div><div class="line">  - <span class="built_in">type</span>: weibo</div><div class="line">    icon: icon-weibo</div><div class="line">    text_key: 微博</div><div class="line">    text_value: <span class="string">"@forsigner"</span></div><div class="line">    text_value_url: http://weibo.com/u/1847075964</div><div class="line">  - <span class="built_in">type</span>: mail</div><div class="line">    icon: icon-mail</div><div class="line">    text_key: Gmail</div><div class="line">    text_value: <span class="string">"forsigner@gmail.com"</span></div><div class="line">  - <span class="built_in">type</span>: location</div><div class="line">    icon: icon-location</div><div class="line">    text_value: 珠海</div></pre></td></tr></table></figure>
<h2 id="啟用項目頁面"><a href="#啟用項目頁面" class="headerlink" title="啟用項目頁面"></a>啟用項目頁面</h2><ol>
<li>在博客根目錄執行 <code>hexo new page project</code></li>
<li>修改<code>my-blog/source/project/index.md</code>裏面的內容:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: project</div><div class="line">layout: project</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<p>啟用項目頁面後，可以設置類似以下格式的內容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">project:</div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: fexo</div><div class="line">    url: https://github.com/forsigner/fexo</div><div class="line">    intro: A minimalist design theme <span class="keyword">for</span> hexo</div><div class="line">  <span class="comment"># - type: company</span></div><div class="line">  <span class="comment">#   name: Fexo</span></div><div class="line">  <span class="comment">#   url: https://github.com/forsigner/fexo</span></div><div class="line">  <span class="comment">#   intro: A minimalist design theme for hexo</span></div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: beside</div><div class="line">    url: https://github.com/forsigner/beside</div><div class="line">    intro: I need you beside me</div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: web-fontmin</div><div class="line">    url: https://github.com/forsigner/web-fontmin</div><div class="line">    intro: 字體子集化，在線提取你需要的字體</div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: magic-check</div><div class="line">    url: https://github.com/forsigner/magic-check</div><div class="line">    intro: Beautify Radio and Checkbox with pure CSS</div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: nice-bar</div><div class="line">    url: https://github.com/forsigner/nice-bar</div><div class="line">    intro: A nice and lightweight scrollbar</div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: angular-nice-bar</div><div class="line">    url: https://github.com/forsigner/angular-nice-bar</div><div class="line">    intro: A nice and lightweight scrollbar <span class="keyword">in</span> Angular</div></pre></td></tr></table></figure>
<h2 id="啟用搜索頁面"><a href="#啟用搜索頁面" class="headerlink" title="啟用搜索頁面"></a>啟用搜索頁面</h2><ul>
<li>在博客根目錄執行 <code>hexo new page search</code></li>
<li>修改<code>my-blog/source/search/index.md</code>裏面的內容:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: search</div><div class="line">layout: search</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<ul>
<li>然後安裝 Hexo 插件 <code>hexo-search</code> (重要)</li>
</ul>
<p>先進入 blog 的根目錄</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> my-blog</div><div class="line">$ npm install hexo-search --save</div></pre></td></tr></table></figure>
<h1 id="個性化設置"><a href="#個性化設置" class="headerlink" title="個性化設置"></a>個性化設置</h1><h2 id="自定義CSS"><a href="#自定義CSS" class="headerlink" title="自定義CSS"></a>自定義CSS</h2><p>也許 Fexo 默認的樣式滿足不了你個性化的需求，使用此配置你可以在不修改 Fexo 源碼的情況下，任意的自定義 Fexo 的樣式，方法如下：</p>
<ol>
<li>在 blog 根目錄新建文件夾 <code>my-blog/source/css</code></li>
<li>然後在此目錄新建一個 CSS，名字隨意，如 <code>personal-style.css</code></li>
<li>修改<code>fexo/_config.yml</code>下面配置，然後你就可以寫你想要的樣式了</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">personal_style: /css/personal-style.css</div><div class="line"><span class="comment"># 如果不想啟用自定義樣式，註釋這行就可以了</span></div></pre></td></tr></table></figure>
<p>比如我的個人自定義樣式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">font-face</span> &#123;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">"Meiryo"</span>;</div><div class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"/fonts/Meiryo.eot"</span>);</div><div class="line">  <span class="comment">/* IE9 */</span></div><div class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"/fonts/Meiryo.eot?#iefix"</span>) <span class="built_in">format</span>(<span class="string">"embedded-opentype"</span>), <span class="comment">/* IE6-IE8 */</span></div><div class="line">  <span class="built_in">url</span>(<span class="string">"/fonts/Meiryo.woff"</span>) <span class="built_in">format</span>(<span class="string">"woff"</span>), <span class="comment">/* chrome, firefox */</span></div><div class="line">  <span class="built_in">url</span>(<span class="string">"/fonts/Meiryo.ttf"</span>) <span class="built_in">format</span>(<span class="string">"truetype"</span>), <span class="comment">/* chrome, firefox, opera, Safari, Android, iOS 4.2+ */</span></div><div class="line">  <span class="built_in">url</span>(<span class="string">"/fonts/Meiryo.svg#Meiryo"</span>) <span class="built_in">format</span>(<span class="string">"svg"</span>);</div><div class="line">  <span class="comment">/* iOS 4.1- */</span></div><div class="line">  <span class="attribute">font-style</span>: normal;</div><div class="line">  <span class="attribute">font-weight</span>: normal;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">html</span><span class="selector-class">.page-home</span> &#123;</div><div class="line">  <span class="comment">/*background-image: url('/images/bg.jpg')*/</span></div><div class="line"></div><div class="line">  <span class="comment">/*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/</span></div><div class="line">  <span class="comment">/*background-blend-mode: screen;*/</span></div><div class="line"></div><div class="line">  <span class="comment">/*background: linear-gradient(to left, #5f2c82, #49a09d);*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定義博客名的字體"><a href="#自定義博客名的字體" class="headerlink" title="自定義博客名的字體"></a>自定義博客名的字體</h2><p>由於中文字體文件太大，有的快10M，所以 Fexo 沒有引入中文字體，導致博客名有點難看。<br>但是可以通過提取字體來減小字體文件大小，讓字體只有幾KB。<br>一下步驟可以讓你實現自定義博客名字體，包括英文和中文：</p>
<ol>
<li>下載免費可用的ttf格式字體</li>
<li>利用 <a href="http://fontmin.forsigner.com/" target="_blank" rel="external">Web-Fontmin</a> 提取字體，然後下載 Web 字體和樣式</li>
<li>在博客根目錄的<code>source</code>文件夾新建目錄 <code>fonts</code></li>
<li>把下載的 web-fontmin 裏的 CSS 內容 copy 到你的 <code>personal-style.css</code> 裏去</li>
<li>修改<code>fexo/_config.yml</code>下面配置，設置字體名稱：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">blog_name_font_familiy: myFontName</div><div class="line"></div><div class="line"><span class="comment"># 註意: 這是css文件裏的font-familiy的值 ,例如裏面是 font-familiy: "myfontName"</span></div></pre></td></tr></table></figure>
<p>PS：自定義博客名字體前請先自定義CSS</p>
<h2 id="為首頁設置背景"><a href="#為首頁設置背景" class="headerlink" title="為首頁設置背景"></a>為首頁設置背景</h2><p>如果你不喜歡首頁簡潔的白色，想個性化一點，你可以自定義首頁的背景顏色或者圖片</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">html</span><span class="selector-class">.page-home</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/bg.jpg'</span>);</div><div class="line">  <span class="attribute">background-color</span>: transparent;</div><div class="line">  <span class="attribute">background-size</span>: cover;</div><div class="line">  <span class="attribute">background-position</span>: center center;</div><div class="line">  <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line"></div><div class="line">  <span class="comment">/*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/</span></div><div class="line">  <span class="comment">/*background-blend-mode: screen;*/</span></div><div class="line"></div><div class="line">  <span class="comment">/*background: linear-gradient(to left, #5f2c82, #49a09d);*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="第三方服務"><a href="#第三方服務" class="headerlink" title="第三方服務"></a>第三方服務</h1><h2 id="啟用統計"><a href="#啟用統計" class="headerlink" title="啟用統計"></a>啟用統計</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">google_analytics:</div><div class="line">baidu_analytics: 57e94d016sfsf1fba3xxxx8a2b0263af0</div></pre></td></tr></table></figure>
<h2 id="啟用評論"><a href="#啟用評論" class="headerlink" title="啟用評論"></a>啟用評論</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">disqus_shortname: forsigner</div><div class="line"><span class="comment"># duoshuo_shortname: forsigner</span></div></pre></td></tr></table></figure>
<h2 id="使用-Mathjax"><a href="#使用-Mathjax" class="headerlink" title="使用 Mathjax"></a>使用 Mathjax</h2><p>要使用 Mathjax，可以通過 Hexo 插件 <a href="https://github.com/phoenixcw/hexo-renderer-mathjax" target="_blank" rel="external">hexo-renderer-mathjax</a>支持</p>
<p>查看 hexo-renderer-mathjax <a href="https://github.com/phoenixcw/hexo-renderer-mathjax" target="_blank" rel="external">文檔</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;開始&quot;&gt;&lt;a href=&quot;#開始&quot; class=&quot;headerlink&quot; title=&quot;開始&quot;&gt;&lt;/a&gt;開始&lt;/h1&gt;&lt;h2 id=&quot;安裝&quot;&gt;&lt;a href=&quot;#安裝&quot; class=&quot;headerlink&quot; title=&quot;安裝&quot;&gt;&lt;/a&gt;安裝&lt;/h2&gt;&lt;figur
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.forsigner.com/tags/JavaScript/"/>
    
      <category term="Hexo" scheme="http://www.forsigner.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Fexo Doc</title>
    <link href="http://www.forsigner.com/2016/03/10/fexo-doc-en/"/>
    <id>http://www.forsigner.com/2016/03/10/fexo-doc-en/</id>
    <published>2016-03-09T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h1><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> my-blog</div><div class="line">$ git <span class="built_in">clone</span> git@github.com:forsigner/fexo.git themes/fexo</div></pre></td></tr></table></figure>
<h2 id="Enable-theme"><a href="#Enable-theme" class="headerlink" title="Enable theme"></a>Enable theme</h2><p>In file <code>my-blog/_config.yml</code> set <code>theme: fexo</code></p>
<h2 id="Upgrade"><a href="#Upgrade" class="headerlink" title="Upgrade"></a>Upgrade</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> themes/fexo</div><div class="line">$ git commit -am <span class="string">'update'</span></div><div class="line">$ git pull</div></pre></td></tr></table></figure>
<h1 id="Theme-Configuration"><a href="#Theme-Configuration" class="headerlink" title="Theme Configuration"></a>Theme Configuration</h1><p>All setting is in file <code>theme/fexo/_config.yml</code>.</p>
<h2 id="Setting-basic-info"><a href="#Setting-basic-info" class="headerlink" title="Setting  basic info"></a>Setting  basic info</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">blog_name: Forsigner</div><div class="line">slogan: Find the bug of the world</div></pre></td></tr></table></figure>
<h2 id="Setting-avatar"><a href="#Setting-avatar" class="headerlink" title="Setting avatar"></a>Setting avatar</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># relative url</span></div><div class="line">avatar: /images/avatar.jpg</div><div class="line"><span class="comment"># or absolute url</span></div><div class="line">avatar: https://avatars0.githubusercontent.com/u/2668081?v=3&amp;s=460</div></pre></td></tr></table></figure>
<h2 id="Setting-favicon"><a href="#Setting-favicon" class="headerlink" title="Setting favicon"></a>Setting favicon</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">favicon: /favicon.ico</div></pre></td></tr></table></figure>
<h2 id="Setting-keywords"><a href="#Setting-keywords" class="headerlink" title="Setting keywords"></a>Setting keywords</h2><p>Keywords is for SEO.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">keywords: forsigner,frontend,design,nodejs,JavaScript</div></pre></td></tr></table></figure>
<h2 id="Setting-initail-page-content"><a href="#Setting-initail-page-content" class="headerlink" title="Setting initail page content"></a>Setting initail page content</h2><p>Show post list directly in home page or note.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">init_page_content: HOME_NAV  <span class="comment"># HOME_NAV | POST</span></div></pre></td></tr></table></figure>
<h2 id="Setting-home-nav"><a href="#Setting-home-nav" class="headerlink" title="Setting home nav"></a>Setting home nav</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">home_nav:</div><div class="line">  - name: B<span class="built_in">log</span></div><div class="line">    url: /archives</div><div class="line">  - name: Github</div><div class="line">    url: https://github.com/forsigner</div><div class="line">    target: _blank</div><div class="line">  - name: Douban</div><div class="line">    url: http://www.douban.com/people/forsigner/</div><div class="line">    target: _blank</div><div class="line">  - name: Twitter</div><div class="line">    url: https://twitter.com/forsigner</div><div class="line">    target: _blank</div></pre></td></tr></table></figure>
<h2 id="Setting-page-nav"><a href="#Setting-page-nav" class="headerlink" title="Setting page nav"></a>Setting page nav</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">page_nav:</div><div class="line">  - 博客: /archives/</div><div class="line">  - 分类: /category/</div><div class="line">  - 标签: /tag/</div><div class="line">  - 友链: /link/</div><div class="line">  - 关于: /about/</div><div class="line">  - RSS: /atom.xml</div></pre></td></tr></table></figure>
<h2 id="Setting-page-nav-style"><a href="#Setting-page-nav-style" class="headerlink" title="Setting page nav style"></a>Setting page nav style</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">page_nav_style: CIRCLE  <span class="comment"># CIRCLE|ROUND_RECT</span></div></pre></td></tr></table></figure>
<h2 id="Setting-breadcrumb"><a href="#Setting-breadcrumb" class="headerlink" title="Setting breadcrumb"></a>Setting breadcrumb</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">breadcrumb:</div><div class="line">  isShow: <span class="literal">true</span> <span class="comment"># true|fase</span></div></pre></td></tr></table></figure>
<h2 id="Setting-toolbox"><a href="#Setting-toolbox" class="headerlink" title="Setting toolbox"></a>Setting toolbox</h2><p>You can set toolbox’s text</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">toolbox:</div><div class="line">  isShow: <span class="literal">true</span> <span class="comment"># true|fase</span></div><div class="line">  text: box</div></pre></td></tr></table></figure>
<h2 id="Slogan-in-search-page"><a href="#Slogan-in-search-page" class="headerlink" title="Slogan in search page"></a>Slogan in search page</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">search_slogan:</div><div class="line">  isShow: <span class="literal">true</span> <span class="comment"># true|fase</span></div><div class="line">  text: Can you find the bug of world ~</div></pre></td></tr></table></figure>
<h2 id="Slogan-in-link-page"><a href="#Slogan-in-link-page" class="headerlink" title="Slogan in link page"></a>Slogan in link page</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">link_slogan:</div><div class="line">  isShow: <span class="literal">true</span> <span class="comment"># true|fase</span></div><div class="line">  text: Mail me to  exchagne friendlink: forsigner@gmail.com</div></pre></td></tr></table></figure>
<h2 id="Setting-post-header-align-type"><a href="#Setting-post-header-align-type" class="headerlink" title="Setting post header align type"></a>Setting post header align type</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">post:</div><div class="line">  header_align: center <span class="comment"># left|center</span></div></pre></td></tr></table></figure>
<h1 id="Enable-page"><a href="#Enable-page" class="headerlink" title="Enable page"></a>Enable page</h1><p>You can enable some page that you want，about, link, project and so on</p>
<h2 id="Enable-category-page"><a href="#Enable-category-page" class="headerlink" title="Enable category page"></a>Enable category page</h2><ol>
<li>Run <code>hexo new page category</code></li>
<li>Replace <code>source/category/index.md</code> content with :</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: category</div><div class="line">layout: category</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<h2 id="Enable-tag-page"><a href="#Enable-tag-page" class="headerlink" title="Enable tag page"></a>Enable tag page</h2><ol>
<li>Run <code>hexo new page tag</code></li>
<li>Replace <code>source/tag/index.md</code> content with :</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: tag</div><div class="line">layout: tag</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<h2 id="Enable-friend-links-page"><a href="#Enable-friend-links-page" class="headerlink" title="Enable friend links page"></a>Enable friend links page</h2><ol>
<li>Run <code>hexo new page link</code></li>
<li>Replace <code>source/link/index.md</code> content with :</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: link</div><div class="line">layout: link</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<p>to configure link content:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">link:</div><div class="line">  - name: 织网</div><div class="line">    info: 身体和灵魂，总有一个在路上</div><div class="line">    url: http://zheng-ji.info/</div><div class="line">    avatar: https://avatars3.githubusercontent.com/u/1414745?v=3&amp;s=460</div><div class="line">  - name: Dongyado</div><div class="line">    info: 生命不止，折腾不息</div><div class="line">    url: http://dongyado.com/</div><div class="line">    avatar: https://avatars0.githubusercontent.com/u/6274940?v=3&amp;s=460</div><div class="line">  - name: OrangeCoder</div><div class="line">    info: android ffmpeg nodejs gradle</div><div class="line">    url: http://orangecoder.com/</div><div class="line">    avatar: https://avatars0.githubusercontent.com/u/2263785?v=3&amp;s=460</div><div class="line">  - name: EverET</div><div class="line">    info: 好记性不如烂笔头</div><div class="line">    url: http://everet.org/about-me/</div><div class="line">    avatar: https://avatars1.githubusercontent.com/u/1559563?v=3&amp;s=460</div></pre></td></tr></table></figure>
<h2 id="Enable-about-page"><a href="#Enable-about-page" class="headerlink" title="Enable about page"></a>Enable about page</h2><ol>
<li>Run <code>hexo new page about</code></li>
<li>Replace <code>source/about/index.md</code> content with :</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: about</div><div class="line">layout: about</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<p>to configure about content:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">about:</div><div class="line">  - <span class="built_in">type</span>: me</div><div class="line">    icon: icon-user</div><div class="line">    text_value:</div><div class="line">    - <span class="string">"Scut，1991，Spring."</span></div><div class="line">    - <span class="string">"喜欢设计，擅长编程，喜欢睡懒觉."</span></div><div class="line">    - <span class="string">"前端开发工程师，常用 HTML / CSS / JavaScript."</span></div><div class="line">  - <span class="built_in">type</span>: Github</div><div class="line">    icon: icon-github</div><div class="line">    text_key: Github</div><div class="line">    text_value: <span class="string">"@forsigner"</span></div><div class="line">    text_value_url: https://github.com/forsigner</div><div class="line">  - <span class="built_in">type</span>: weibo</div><div class="line">    icon: icon-weibo</div><div class="line">    text_key: 微博</div><div class="line">    text_value: <span class="string">"@forsigner"</span></div><div class="line">    text_value_url: http://weibo.com/u/1847075964</div><div class="line">  - <span class="built_in">type</span>: mail</div><div class="line">    icon: icon-mail</div><div class="line">    text_key: Gmail</div><div class="line">    text_value: <span class="string">"forsigner@gmail.com"</span></div><div class="line">  - <span class="built_in">type</span>: location</div><div class="line">    icon: icon-location</div><div class="line">    text_value: 珠海</div></pre></td></tr></table></figure>
<h2 id="Enable-project-page"><a href="#Enable-project-page" class="headerlink" title="Enable project page"></a>Enable project page</h2><ol>
<li>Run <code>hexo new page project</code></li>
<li>Replace <code>source/project/index.md</code> content with :</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: project</div><div class="line">layout: project</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<p>to configure project content:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">project:</div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: fexo</div><div class="line">    url: https://github.com/forsigner/fexo</div><div class="line">    intro: A minimalist design theme <span class="keyword">for</span> hexo</div><div class="line">  <span class="comment"># - type: company</span></div><div class="line">  <span class="comment">#   name: Fexo</span></div><div class="line">  <span class="comment">#   url: https://github.com/forsigner/fexo</span></div><div class="line">  <span class="comment">#   intro: A minimalist design theme for hexo</span></div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: beside</div><div class="line">    url: https://github.com/forsigner/beside</div><div class="line">    intro: I need you beside me</div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: web-fontmin</div><div class="line">    url: https://github.com/forsigner/web-fontmin</div><div class="line">    intro: 字体子集化，在线提取你需要的字体</div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: magic-check</div><div class="line">    url: https://github.com/forsigner/magic-check</div><div class="line">    intro: Beautify Radio and Checkbox with pure CSS</div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: nice-bar</div><div class="line">    url: https://github.com/forsigner/nice-bar</div><div class="line">    intro: A nice and lightweight scrollbar</div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: angular-nice-bar</div><div class="line">    url: https://github.com/forsigner/angular-nice-bar</div><div class="line">    intro: A nice and lightweight scrollbar <span class="keyword">in</span> Angular</div></pre></td></tr></table></figure>
<h2 id="Enable-search-page"><a href="#Enable-search-page" class="headerlink" title="Enable search page"></a>Enable search page</h2><ol>
<li>Run <code>hexo new page search</code></li>
<li>Replace <code>source/search/index.md</code> content with :</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: search</div><div class="line">layout: search</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<ul>
<li>Then install Hexo Plugin <code>hexo-search</code> (important)</li>
</ul>
<p>Then to config:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> my-blog</div><div class="line">$ npm install hexo-search --save</div></pre></td></tr></table></figure>
<h1 id="Customize"><a href="#Customize" class="headerlink" title="Customize"></a>Customize</h1><h2 id="Customize-CSS"><a href="#Customize-CSS" class="headerlink" title="Customize CSS"></a>Customize CSS</h2><p>To customzie CSS style and not to change Fexo source code, you should do something like that:</p>
<ol>
<li>在 blog 根目录新建文件夹 <code>my-blog/source/css</code></li>
<li>然后在此目录新建一个 CSS，名字随意，如 <code>personal-style.css</code></li>
<li><p>修改<code>fexo/_config.yml</code>下面配置，然后你就可以写你想要的样式了</p>
</li>
<li><p>Create dir in my-blog <code>my-blog/source/css</code></p>
</li>
<li>Create a css file and name it you like, eg: <code>personal-style.css</code></li>
<li>Update <code>fexo/_config.yml</code> config，then you can write CSS style in this file</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">personal_style: /css/personal-style.css</div><div class="line"><span class="comment"># dont't want to customzie, comment this config</span></div></pre></td></tr></table></figure>
<p>this is my custom:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">font-face</span> &#123;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">"Meiryo"</span>;</div><div class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"/fonts/Meiryo.eot"</span>);</div><div class="line">  <span class="comment">/* IE9 */</span></div><div class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"/fonts/Meiryo.eot?#iefix"</span>) <span class="built_in">format</span>(<span class="string">"embedded-opentype"</span>), <span class="comment">/* IE6-IE8 */</span></div><div class="line">  <span class="built_in">url</span>(<span class="string">"/fonts/Meiryo.woff"</span>) <span class="built_in">format</span>(<span class="string">"woff"</span>), <span class="comment">/* chrome, firefox */</span></div><div class="line">  <span class="built_in">url</span>(<span class="string">"/fonts/Meiryo.ttf"</span>) <span class="built_in">format</span>(<span class="string">"truetype"</span>), <span class="comment">/* chrome, firefox, opera, Safari, Android, iOS 4.2+ */</span></div><div class="line">  <span class="built_in">url</span>(<span class="string">"/fonts/Meiryo.svg#Meiryo"</span>) <span class="built_in">format</span>(<span class="string">"svg"</span>);</div><div class="line">  <span class="comment">/* iOS 4.1- */</span></div><div class="line">  <span class="attribute">font-style</span>: normal;</div><div class="line">  <span class="attribute">font-weight</span>: normal;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">html</span><span class="selector-class">.page-home</span> &#123;</div><div class="line">  <span class="comment">/*background-image: url('/images/bg.jpg')*/</span></div><div class="line"></div><div class="line">  <span class="comment">/*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/</span></div><div class="line">  <span class="comment">/*background-blend-mode: screen;*/</span></div><div class="line"></div><div class="line">  <span class="comment">/*background: linear-gradient(to left, #5f2c82, #49a09d);*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Custom-fonts"><a href="#Custom-fonts" class="headerlink" title="Custom fonts"></a>Custom fonts</h2><ol>
<li>Download ttf font</li>
<li>Use <a href="http://fontmin.forsigner.com/" target="_blank" rel="external">Web-Fontmin</a> get Font，and download font and css</li>
<li>Create a dir <code>fonts</code> in my-blog’s <code>source</code></li>
<li>Copy font to source’s <code>font</code>, copy CSS style content to <code>personal-style.css</code></li>
<li>Update <code>fexo/_config.yml</code> Config，Set font-familiy</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">blog_name_font_familiy: myFontName</div><div class="line"><span class="comment"># PS: myFontName is the value of font-familiy in css `personal-style.css`</span></div></pre></td></tr></table></figure>
<p>PS：自定义博客名字体前请先自定义CSS</p>
<h2 id="Custom-background"><a href="#Custom-background" class="headerlink" title="Custom background"></a>Custom background</h2><p>You can custom some page background, use <code>personal-style.css</code> better</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">html</span><span class="selector-class">.page-home</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/bg.jpg'</span>);</div><div class="line">  <span class="attribute">background-color</span>: transparent;</div><div class="line">  <span class="attribute">background-size</span>: cover;</div><div class="line">  <span class="attribute">background-position</span>: center center;</div><div class="line">  <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line"></div><div class="line">  <span class="comment">/*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/</span></div><div class="line">  <span class="comment">/*background-blend-mode: screen;*/</span></div><div class="line"></div><div class="line">  <span class="comment">/*background: linear-gradient(to left, #5f2c82, #49a09d);*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h1><h2 id="Enable-stats"><a href="#Enable-stats" class="headerlink" title="Enable stats"></a>Enable stats</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">google_analytics:</div><div class="line">baidu_analytics: 57e94d016sfsf1fba3xxxx8a2b0263af0</div></pre></td></tr></table></figure>
<h2 id="Enable-comment"><a href="#Enable-comment" class="headerlink" title="Enable comment"></a>Enable comment</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">disqus_shortname: forsigner</div><div class="line"><span class="comment"># duoshuo_shortname: forsigner</span></div></pre></td></tr></table></figure>
<h2 id="Use-Mathjax"><a href="#Use-Mathjax" class="headerlink" title="Use Mathjax"></a>Use Mathjax</h2><p>Use Mathjax，You can use hexo plugin <a href="https://github.com/phoenixcw/hexo-renderer-mathjax" target="_blank" rel="external">hexo-renderer-mathjax</a></p>
<p>Check hexo-renderer-mathjax <a href="https://github.com/phoenixcw/hexo-renderer-mathjax" target="_blank" rel="external">Doc</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Start&quot;&gt;&lt;a href=&quot;#Start&quot; class=&quot;headerlink&quot; title=&quot;Start&quot;&gt;&lt;/a&gt;Start&lt;/h1&gt;&lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerli
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.forsigner.com/tags/JavaScript/"/>
    
      <category term="Hexo" scheme="http://www.forsigner.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Fexo 文档</title>
    <link href="http://www.forsigner.com/2016/03/10/fexo-doc-zh-cn/"/>
    <id>http://www.forsigner.com/2016/03/10/fexo-doc-zh-cn/</id>
    <published>2016-03-09T16:00:00.000Z</published>
    <updated>2016-11-15T02:06:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> my-blog</div><div class="line">$ git <span class="built_in">clone</span> git@github.com:forsigner/fexo.git themes/fexo</div></pre></td></tr></table></figure>
<h2 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h2><p>打开博客根目录的 <code>_config.yml</code> 设为 <code>theme: fexo</code></p>
<h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> themes/fexo</div><div class="line">$ git commit -am <span class="string">'update'</span></div><div class="line">$ git pull</div></pre></td></tr></table></figure>
<h1 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h1><p>主题配置全部在<code>theme/fexo</code>里面完成，所里下面所有配置指的是配置<code>theme/fexo/_config.yml</code>。</p>
<h2 id="设置基本信息"><a href="#设置基本信息" class="headerlink" title="设置基本信息"></a>设置基本信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">blog_name: Forsigner</div><div class="line">slogan: Find the bug of the world</div></pre></td></tr></table></figure>
<h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># relative url</span></div><div class="line">avatar: /images/avatar.jpg</div><div class="line"><span class="comment"># or absolute url</span></div><div class="line">avatar: https://avatars0.githubusercontent.com/u/2668081?v=3&amp;s=460</div></pre></td></tr></table></figure>
<h2 id="设置favicon"><a href="#设置favicon" class="headerlink" title="设置favicon"></a>设置favicon</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">favicon: /favicon.ico</div></pre></td></tr></table></figure>
<h2 id="设置关键词"><a href="#设置关键词" class="headerlink" title="设置关键词"></a>设置关键词</h2><p>关键词主要作用是优化SEO</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">keywords: forsigner,前端,设计,Hexo主题,前端开发,用户体验,设计,frontend,design,nodejs,JavaScript</div></pre></td></tr></table></figure>
<h2 id="设置首页内容"><a href="#设置首页内容" class="headerlink" title="设置首页内容"></a>设置首页内容</h2><p>你可以设置是否在首页直接显示文章</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">init_page_content: HOME_NAV  <span class="comment"># HOME_NAV | POST</span></div></pre></td></tr></table></figure>
<h2 id="设置首页导航"><a href="#设置首页导航" class="headerlink" title="设置首页导航"></a>设置首页导航</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">home_nav:</div><div class="line">  - name: B<span class="built_in">log</span></div><div class="line">    url: /archives</div><div class="line">  - name: Github</div><div class="line">    url: https://github.com/forsigner</div><div class="line">    target: _blank</div><div class="line">  - name: Douban</div><div class="line">    url: http://www.douban.com/people/forsigner/</div><div class="line">    target: _blank</div><div class="line">  - name: Twitter</div><div class="line">    url: https://twitter.com/forsigner</div><div class="line">    target: _blank</div></pre></td></tr></table></figure>
<h2 id="设置页面导航"><a href="#设置页面导航" class="headerlink" title="设置页面导航"></a>设置页面导航</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">page_nav:</div><div class="line">  - 博客: /archives/</div><div class="line">  - 分类: /category/</div><div class="line">  - 标签: /tag/</div><div class="line">  - 友链: /link/</div><div class="line">  - 关于: /about/</div><div class="line">  - RSS: /atom.xml</div></pre></td></tr></table></figure>
<h2 id="设置页面导航样式"><a href="#设置页面导航样式" class="headerlink" title="设置页面导航样式"></a>设置页面导航样式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">page_nav_style: CIRCLE  <span class="comment"># CIRCLE|ROUND_RECT</span></div></pre></td></tr></table></figure>
<h2 id="设置面包屑"><a href="#设置面包屑" class="headerlink" title="设置面包屑"></a>设置面包屑</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">breadcrumb:</div><div class="line">  isShow: <span class="literal">true</span> <span class="comment"># true|fase</span></div></pre></td></tr></table></figure>
<h2 id="设置盒子"><a href="#设置盒子" class="headerlink" title="设置盒子"></a>设置盒子</h2><p>你可设置盒子是否显示和其显示的文字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">toolbox:</div><div class="line">  isShow: <span class="literal">true</span> <span class="comment"># true|fase</span></div><div class="line">  text: 盒子</div></pre></td></tr></table></figure>
<h2 id="搜索页面-Slogan"><a href="#搜索页面-Slogan" class="headerlink" title="搜索页面 Slogan"></a>搜索页面 Slogan</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">search_slogan:</div><div class="line">  isShow: <span class="literal">true</span> <span class="comment"># true|fase</span></div><div class="line">  text: Can you find the bug of world ~</div></pre></td></tr></table></figure>
<h2 id="友链页面-Slogan"><a href="#友链页面-Slogan" class="headerlink" title="友链页面 Slogan"></a>友链页面 Slogan</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">link_slogan:</div><div class="line">  isShow: <span class="literal">true</span> <span class="comment"># true|fase</span></div><div class="line">  text: 交换友链可以邮件 forsigner@gmail.com</div></pre></td></tr></table></figure>
<h2 id="设置文章标题对齐方式"><a href="#设置文章标题对齐方式" class="headerlink" title="设置文章标题对齐方式"></a>设置文章标题对齐方式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">post:</div><div class="line">  header_align: center <span class="comment"># left|center</span></div></pre></td></tr></table></figure>
<h1 id="启用页面"><a href="#启用页面" class="headerlink" title="启用页面"></a>启用页面</h1><p>你可以启用你想要的页面，在开启关于、友链、项目的页面后，你可以对这些设置这些页面的内容</p>
<h2 id="启用分类页面"><a href="#启用分类页面" class="headerlink" title="启用分类页面"></a>启用分类页面</h2><ol>
<li>在博客根目录执行 <code>hexo new page category</code></li>
<li>修改<code>my-blog/source/category/index.md</code>里面的内容:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: category</div><div class="line">layout: category</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<h2 id="启用标签页面"><a href="#启用标签页面" class="headerlink" title="启用标签页面"></a>启用标签页面</h2><ol>
<li>在博客根目录执行 <code>hexo new page tag</code></li>
<li>修改<code>my-blog/source/tag/index.md</code>里面的内容:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: tag</div><div class="line">layout: tag</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<h2 id="启用友链页面"><a href="#启用友链页面" class="headerlink" title="启用友链页面"></a>启用友链页面</h2><ol>
<li>在博客根目录执行 <code>hexo new page link</code></li>
<li>修改<code>my-blog/source/link/index.md</code>里面的内容:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: link</div><div class="line">layout: link</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<p>启用友链页面后，可以设置类似以下格式的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">link:</div><div class="line">  - name: 织网</div><div class="line">    info: 身体和灵魂，总有一个在路上</div><div class="line">    url: http://zheng-ji.info/</div><div class="line">    avatar: https://avatars3.githubusercontent.com/u/1414745?v=3&amp;s=460</div><div class="line">  - name: Dongyado</div><div class="line">    info: 生命不止，折腾不息</div><div class="line">    url: http://dongyado.com/</div><div class="line">    avatar: https://avatars0.githubusercontent.com/u/6274940?v=3&amp;s=460</div><div class="line">  - name: OrangeCoder</div><div class="line">    info: android ffmpeg nodejs gradle</div><div class="line">    url: http://orangecoder.com/</div><div class="line">    avatar: https://avatars0.githubusercontent.com/u/2263785?v=3&amp;s=460</div><div class="line">  - name: EverET</div><div class="line">    info: 好记性不如烂笔头</div><div class="line">    url: http://everet.org/about-me/</div><div class="line">    avatar: https://avatars1.githubusercontent.com/u/1559563?v=3&amp;s=460</div></pre></td></tr></table></figure>
<h2 id="启用关于页面"><a href="#启用关于页面" class="headerlink" title="启用关于页面"></a>启用关于页面</h2><ol>
<li>在博客根目录执行 <code>hexo new page about</code></li>
<li>修改<code>my-blog/source/about/index.md</code>里面的内容:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: about</div><div class="line">layout: about</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<p>启用关于页面后，可以设置类似以下格式的内容:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">about:</div><div class="line">  - <span class="built_in">type</span>: me</div><div class="line">    icon: icon-user</div><div class="line">    text_value:</div><div class="line">    - <span class="string">"Scut，1991，Spring."</span></div><div class="line">    - <span class="string">"喜欢设计，擅长编程，喜欢睡懒觉."</span></div><div class="line">    - <span class="string">"前端开发工程师，常用 HTML / CSS / JavaScript."</span></div><div class="line">  - <span class="built_in">type</span>: Github</div><div class="line">    icon: icon-github</div><div class="line">    text_key: Github</div><div class="line">    text_value: <span class="string">"@forsigner"</span></div><div class="line">    text_value_url: https://github.com/forsigner</div><div class="line">  - <span class="built_in">type</span>: weibo</div><div class="line">    icon: icon-weibo</div><div class="line">    text_key: 微博</div><div class="line">    text_value: <span class="string">"@forsigner"</span></div><div class="line">    text_value_url: http://weibo.com/u/1847075964</div><div class="line">  - <span class="built_in">type</span>: mail</div><div class="line">    icon: icon-mail</div><div class="line">    text_key: Gmail</div><div class="line">    text_value: <span class="string">"forsigner@gmail.com"</span></div><div class="line">  - <span class="built_in">type</span>: location</div><div class="line">    icon: icon-location</div><div class="line">    text_value: 珠海</div></pre></td></tr></table></figure>
<h2 id="启用项目页面"><a href="#启用项目页面" class="headerlink" title="启用项目页面"></a>启用项目页面</h2><ol>
<li>在博客根目录执行 <code>hexo new page project</code></li>
<li>修改<code>my-blog/source/project/index.md</code>里面的内容:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: project</div><div class="line">layout: project</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<p>启用项目页面后，可以设置类似以下格式的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">project:</div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: fexo</div><div class="line">    url: https://github.com/forsigner/fexo</div><div class="line">    intro: A minimalist design theme <span class="keyword">for</span> hexo</div><div class="line">  <span class="comment"># - type: company</span></div><div class="line">  <span class="comment">#   name: Fexo</span></div><div class="line">  <span class="comment">#   url: https://github.com/forsigner/fexo</span></div><div class="line">  <span class="comment">#   intro: A minimalist design theme for hexo</span></div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: beside</div><div class="line">    url: https://github.com/forsigner/beside</div><div class="line">    intro: I need you beside me</div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: web-fontmin</div><div class="line">    url: https://github.com/forsigner/web-fontmin</div><div class="line">    intro: 字体子集化，在线提取你需要的字体</div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: magic-check</div><div class="line">    url: https://github.com/forsigner/magic-check</div><div class="line">    intro: Beautify Radio and Checkbox with pure CSS</div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: nice-bar</div><div class="line">    url: https://github.com/forsigner/nice-bar</div><div class="line">    intro: A nice and lightweight scrollbar</div><div class="line">  - <span class="built_in">type</span>: personal</div><div class="line">    name: angular-nice-bar</div><div class="line">    url: https://github.com/forsigner/angular-nice-bar</div><div class="line">    intro: A nice and lightweight scrollbar <span class="keyword">in</span> Angular</div></pre></td></tr></table></figure>
<h2 id="启用搜索页面"><a href="#启用搜索页面" class="headerlink" title="启用搜索页面"></a>启用搜索页面</h2><ul>
<li>在博客根目录执行 <code>hexo new page search</code></li>
<li>修改<code>my-blog/source/search/index.md</code>里面的内容:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: search</div><div class="line">layout: search</div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<ul>
<li>然后安装 Hexo 插件 <code>hexo-search</code> (重要)</li>
</ul>
<p>先进入 blog 的根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> my-blog</div><div class="line">$ npm install hexo-search --save</div></pre></td></tr></table></figure>
<h1 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h1><h2 id="自定义CSS"><a href="#自定义CSS" class="headerlink" title="自定义CSS"></a>自定义CSS</h2><p>也许 Fexo 默认的样式满足不了你个性化的需求，使用此配置你可以在不修改 Fexo 源码的情况下，任意的自定义 Fexo 的样式，方法如下：</p>
<ol>
<li>在 blog 根目录新建文件夹 <code>my-blog/source/css</code></li>
<li>然后在此目录新建一个 CSS，名字随意，如 <code>personal-style.css</code></li>
<li>修改<code>fexo/_config.yml</code>下面配置，然后你就可以写你想要的样式了</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">personal_style: /css/personal-style.css</div><div class="line"><span class="comment"># 如果不想启用自定义样式，注释这行就可以了</span></div></pre></td></tr></table></figure>
<p>比如我的个人自定义样式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">font-face</span> &#123;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">"Meiryo"</span>;</div><div class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"/fonts/Meiryo.eot"</span>);</div><div class="line">  <span class="comment">/* IE9 */</span></div><div class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"/fonts/Meiryo.eot?#iefix"</span>) <span class="built_in">format</span>(<span class="string">"embedded-opentype"</span>), <span class="comment">/* IE6-IE8 */</span></div><div class="line">  <span class="built_in">url</span>(<span class="string">"/fonts/Meiryo.woff"</span>) <span class="built_in">format</span>(<span class="string">"woff"</span>), <span class="comment">/* chrome, firefox */</span></div><div class="line">  <span class="built_in">url</span>(<span class="string">"/fonts/Meiryo.ttf"</span>) <span class="built_in">format</span>(<span class="string">"truetype"</span>), <span class="comment">/* chrome, firefox, opera, Safari, Android, iOS 4.2+ */</span></div><div class="line">  <span class="built_in">url</span>(<span class="string">"/fonts/Meiryo.svg#Meiryo"</span>) <span class="built_in">format</span>(<span class="string">"svg"</span>);</div><div class="line">  <span class="comment">/* iOS 4.1- */</span></div><div class="line">  <span class="attribute">font-style</span>: normal;</div><div class="line">  <span class="attribute">font-weight</span>: normal;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">html</span><span class="selector-class">.page-home</span> &#123;</div><div class="line">  <span class="comment">/*background-image: url('/images/bg.jpg')*/</span></div><div class="line"></div><div class="line">  <span class="comment">/*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/</span></div><div class="line">  <span class="comment">/*background-blend-mode: screen;*/</span></div><div class="line"></div><div class="line">  <span class="comment">/*background: linear-gradient(to left, #5f2c82, #49a09d);*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义博客名的字体"><a href="#自定义博客名的字体" class="headerlink" title="自定义博客名的字体"></a>自定义博客名的字体</h2><p>由于中文字体文件太大，有的快10M，所以 Fexo 没有引入中文字体，导致博客名有点难看。<br>但是可以通过提取字体来减小字体文件大小，让字体只有几KB。<br>一下步骤可以让你实现自定义博客名字体，包括英文和中文：</p>
<ol>
<li>下载免费可用的ttf格式字体</li>
<li>利用 <a href="http://fontmin.forsigner.com/" target="_blank" rel="external">Web-Fontmin</a> 提取字体，然后下载 Web 字体和样式</li>
<li>在博客根目录的<code>source</code>文件夹新建目录 <code>fonts</code></li>
<li>把下载的 web-fontmin 里的 CSS 内容 copy 到你的 <code>personal-style.css</code> 里去</li>
<li>修改<code>fexo/_config.yml</code>下面配置，设置字体名称：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">blog_name_font_familiy: myFontName</div><div class="line"></div><div class="line"><span class="comment"># 注意: 这是css文件里的font-familiy的值 ,例如里面是 font-familiy: "myfontName"</span></div></pre></td></tr></table></figure>
<p>PS：自定义博客名字体前请先自定义CSS</p>
<h2 id="为首页设置背景"><a href="#为首页设置背景" class="headerlink" title="为首页设置背景"></a>为首页设置背景</h2><p>如果你不喜欢首页简洁的白色，想个性化一点，你可以自定义首页的背景颜色或者图片</p>
<p>修改<code>personal-style.css</code>:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">html</span><span class="selector-class">.page-home</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/bg.jpg'</span>);</div><div class="line">  <span class="attribute">background-color</span>: transparent;</div><div class="line">  <span class="attribute">background-size</span>: cover;</div><div class="line">  <span class="attribute">background-position</span>: center center;</div><div class="line">  <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line"></div><div class="line">  <span class="comment">/*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/</span></div><div class="line">  <span class="comment">/*background-blend-mode: screen;*/</span></div><div class="line"></div><div class="line">  <span class="comment">/*background: linear-gradient(to left, #5f2c82, #49a09d);*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h1><h2 id="启用统计"><a href="#启用统计" class="headerlink" title="启用统计"></a>启用统计</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">google_analytics:</div><div class="line">baidu_analytics: 57e94d016sfsf1fba3xxxx8a2b0263af0</div></pre></td></tr></table></figure>
<h2 id="启用评论"><a href="#启用评论" class="headerlink" title="启用评论"></a>启用评论</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">disqus_shortname: forsigner</div><div class="line"><span class="comment"># duoshuo_shortname: forsigner</span></div></pre></td></tr></table></figure>
<h2 id="使用-Mathjax"><a href="#使用-Mathjax" class="headerlink" title="使用 Mathjax"></a>使用 Mathjax</h2><p>要使用 Mathjax，可以通过 Hexo 插件 <a href="https://github.com/phoenixcw/hexo-renderer-mathjax" target="_blank" rel="external">hexo-renderer-mathjax</a>支持</p>
<p>查看 hexo-renderer-mathjax <a href="https://github.com/phoenixcw/hexo-renderer-mathjax" target="_blank" rel="external">文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figur
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.forsigner.com/tags/JavaScript/"/>
    
      <category term="Hexo" scheme="http://www.forsigner.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>怎样打造一个DOM元素位置引擎 (一)</title>
    <link href="http://www.forsigner.com/2016/03/06/beside-1/"/>
    <id>http://www.forsigner.com/2016/03/06/beside-1/</id>
    <published>2016-03-05T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>这是一篇早就应该写的文章，但是由于过年前项目紧张，一直没有时间，这个周末决定把这笔债换了。这个项目开始于两个月前，也是花了比较多时间的一个项目，不像前段时间写的 Hexo 主题 <a href="https://github.com/forsigner/fexo" target="_blank" rel="external">fexo</a> ，灵感一现，两个晚上就大体出来了。这也是一个比较有意思的项目，因为它不是一个可以直接用的前端UI组件，它是一个基础UI类库，要更好的使用它，你需要再它基础上去实现一些可用的前端组件。</p>
<h2 id="这个DOM元素位置引擎是什么？"><a href="#这个DOM元素位置引擎是什么？" class="headerlink" title="这个DOM元素位置引擎是什么？"></a>这个DOM元素位置引擎是什么？</h2><p>说成一个引擎，实在有些装逼，其实它就是控制 DOM 元素位置的一个 JavaScript Library，在前端交互中，怎样给 DOM 元素定位是一个经常遇到的问题，所以我把可以通用的部分抽象出来，这样可以更方便的给元素定位。</p>
<p>这个类库我给它取名叫做 <strong><a href="https://github.com/forsigner/beside" target="_blank" rel="external">beside</a></strong>，意思是【在旁边】，这也是 <strong><a href="https://github.com/forsigner/beside" target="_blank" rel="external">beside</a></strong> 的核心功能，让一个元素放置于另一个元素旁边。</p>
<h2 id="Beside起源"><a href="#Beside起源" class="headerlink" title="Beside起源"></a>Beside起源</h2><p>它起源跟艺术一样，源于生活（装逼）。其实他的起源来源于一个删除按钮，需求来源于我们的交互设计师。开始我们前端做了一个删除成员的功能，没有任何提示，就直接删除了。交互说这当然是不行的，要加个二次确认，前端说可以加个弹窗吗？交互说不行，不要这种大弹窗，在删除按钮旁边弹个小卡片就好了，也就是下面的效果:</p>
<p><img src="https://raw.githubusercontent.com/forsigner/blog/master/source/images/beside/fo-popover.png" alt="fo-popover"></p>
<p>二次确认这个小功能，它就是 Beside 的起源。</p>
<h2 id="Beside-到底是什么？"><a href="#Beside-到底是什么？" class="headerlink" title="Beside 到底是什么？"></a>Beside 到底是什么？</h2><p>一句话: <strong><a href="https://github.com/forsigner/beside" target="_blank" rel="external">beside</a></strong> 是一个让一个 DOM 元素放置在另一 DOM 元素的基础 UI 库。</p>
<p>Gibhub: <strong><a href="https://github.com/forsigner/beside" target="_blank" rel="external">beside</a></strong></p>
<p>Demo: <a href="http://forsigner.com/beside/" target="_blank" rel="external">查看</a></p>
<p>效果图：</p>
<p><img src="https://raw.githubusercontent.com/forsigner/blog/master/source/images/beside/beside.png" alt="beside"></p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>使用 Beside 可以更方便的实现一些前端组件, 典型的包括： Tooltip、Popover、 Dropdown Menu、垂直居中的 Modal 等。</p>
<h2 id="Beside-的用法"><a href="#Beside-的用法" class="headerlink" title="Beside 的用法"></a>Beside 的用法</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bower_components/beside/dist/beside.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"me"</span>&gt;</span>ME<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"you"</span>&gt;</span>YOU<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">beside.init(&#123;</div><div class="line">  <span class="attr">me</span>: <span class="built_in">document</span>.getElementById(<span class="string">'me'</span>),</div><div class="line">  <span class="attr">you</span>: <span class="built_in">document</span>.getElementById(<span class="string">'you'</span>),</div><div class="line">  <span class="attr">where</span>: <span class="string">'top center'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="基于-Beside-的-UI-component"><a href="#基于-Beside-的-UI-component" class="headerlink" title="基于 Beside 的 UI component"></a>基于 Beside 的 UI component</h3><ul>
<li><a href="https://github.com/forsigner/fo-popover" target="_blank" rel="external">fo-popover</a> A nice popover for Angular.</li>
<li><a href="https://github.com/forsigner/fo-tooltip" target="_blank" rel="external">fo-tooltop</a> A nice tooltip for Angular.</li>
</ul>
<h3 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h3><ul>
<li>IE7 &amp;&amp; IE7+</li>
<li>Firefox</li>
<li>Chrome</li>
<li>Safari</li>
<li>Opera</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h2&gt;&lt;p&gt;这是一篇早就应该写的文章，但是由于过年前项目紧张，一直没有时间，这个周末决定把这笔债换了。这个项目开始于两个月前，也是花了比较多时间
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.forsigner.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>在浏览器端获取文件的MD5值</title>
    <link href="http://www.forsigner.com/2016/03/04/browser-md5-file/"/>
    <id>http://www.forsigner.com/2016/03/04/browser-md5-file/</id>
    <published>2016-03-03T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天接到一个奇怪的需求，要在web页面中计算文件的md5值，还好这个项目是只需兼容现代浏览器的，不然要坑死了。</p>
<p>其实对文件进行md5，对于后端来说是及其简单的。比如使用Node.js，只要下面几行代码就可以了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> fs= <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5File</span>(<span class="params">path, callback</span>) </span>&#123;</div><div class="line">  fs.readFile(path, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> md5Value= crypto.createHash(<span class="string">'md5'</span>).update(data, <span class="string">'utf8'</span>).digest(<span class="string">'hex'</span>);</div><div class="line">    callback(md5Value)；</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是对于浏览器，如果不能使用HTML5的file api，对文件md5是几乎不可能的事。如果可以不使用file api，还请哪位大牛給分享一下。</p>
<p>要在浏览器中对文件进行md5，基本思路就是使用HTML5的FileReader接口把文件读取到内存，然后获取文件的二进制内容，最后再进行md5。</p>
<p>Github中已经有人最这个问题进行研究，其中比较优秀的一个项目就是：<a href="https://github.com/satazor/js-spark-md5" target="_blank" rel="external">js-spark-md5</a>，该项目使用了世界上最快的md5算法。</p>
<p>为了更好的重用代码，我在js-spark-md5的基础上封装了<a href="https://github.com/forsigner/browser-md5-file" target="_blank" rel="external">browser-md5-file</a>，可以更方便的使用md5 file。</p>
<ul>
<li><p>项目地址：<strong><a href="https://github.com/forsigner/browser-md5-file" target="_blank" rel="external">browser-md5-file</a></strong></p>
</li>
<li><p>Demo： <a href="http://forsigner.com/browser-md5-file" target="_blank" rel="external">查看</a></p>
</li>
</ul>
<p>使用方法非常简单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bower_components/browser-md5-file/dist/browser-md5-file.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'upload'</span>);</div><div class="line">el.addEventListener(<span class="string">'change'</span>, handle, <span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> file = e.target.files[<span class="number">0</span>];</div><div class="line">  browserMD5File(file, <span class="function"><span class="keyword">function</span> (<span class="params">err, md5</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(md5); <span class="comment">// 97027eb624f85892c69c4bcec8ab0f11</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>详细的使用方法可以查看Github中的文档。</p>
<p>关于浏览器兼容性，由于使用的HTML5 api，所以只能兼容到一下浏览器：</p>
<ul>
<li>IE10+</li>
<li>Firefox</li>
<li>Chrome</li>
<li>Safari</li>
<li>Opera</li>
</ul>
<p>还有一点，由于需要把文件读取到内存，md5大文件会性能较差。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天接到一个奇怪的需求，要在web页面中计算文件的md5值，还好这个项目是只需兼容现代浏览器的，不然要坑死了。&lt;/p&gt;
&lt;p&gt;其实对文件进行md5，对于后端来说是及其简单的。比如使用Node.js，只要下面几行代码就可以了：&lt;/p&gt;
&lt;figure class=&quot;high
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.forsigner.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>一个极简主义设计的 Hexo 主题</title>
    <link href="http://www.forsigner.com/2016/02/23/fexo/"/>
    <id>http://www.forsigner.com/2016/02/23/fexo/</id>
    <published>2016-02-22T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为设计师出身的前端攻城狮， blog 用着别人的主题终究还是不爽，于是花了两天晚上写了一个 Hexo 主题。</p>
<p>主题 Github 地址：<a href="https://github.com/forsigner/fexo" target="_blank" rel="external">Fexo</a> - A minimalist design theme.</p>
<p>Demo：<a href="http://forsigner.com/" target="_blank" rel="external">http://forsigner.com/</a></p>
<p>主题的特点是：</p>
<ul>
<li>极简主义设计</li>
<li>去除了各种复杂的元素，总共只有 3 个页面</li>
<li>列表页面借鉴了 Facebook 的 timeline</li>
<li>Pure CSS, No JavaScript, No images 所以轻量加载性能高</li>
<li>兼容主流浏览器，包括低版本IE</li>
</ul>
<p>主题截图：<br><img src="http://forsigner.com/images/fexo/mobile.png" alt="screenshot-1.png"><br><img src="http://forsigner.com/images/fexo/fexo-1.png" alt="screenshot-1.png"><br><img src="http://forsigner.com/images/fexo/fexo-2.png" alt="screenshot-2.png"></p>
<h2 id="怎样使用"><a href="#怎样使用" class="headerlink" title="怎样使用"></a>怎样使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> my-site</div><div class="line">$ git <span class="built_in">clone</span> git@github.com:forsigner/fexo.git themes/fexo</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>修改根目录的 <code>_config.yml</code>，设置 <code>theme: fexo</code></p>
<h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> themes/fexo</div><div class="line">$ git pull</div></pre></td></tr></table></figure>
<h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>替换 <code>theme/hexo/source/images/avatar.jpg</code> 就好了</p>
<h3 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h3><ul>
<li>IE8+</li>
<li>Firefox</li>
<li>Chrome</li>
<li>Safari</li>
<li>Opera</li>
</ul>
<p>详细文档： <a href="https://github.com/forsigner/fexo/blob/master/README.md" target="_blank" rel="external">Documention</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为设计师出身的前端攻城狮， blog 用着别人的主题终究还是不爽，于是花了两天晚上写了一个 Hexo 主题。&lt;/p&gt;
&lt;p&gt;主题 Github 地址：&lt;a href=&quot;https://github.com/forsigner/fexo&quot; target=&quot;_blank&quot; r
    
    </summary>
    
      <category term="设计" scheme="http://www.forsigner.com/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="JavaScript" scheme="http://www.forsigner.com/tags/JavaScript/"/>
    
      <category term="Hexo" scheme="http://www.forsigner.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>用纯CSS美化radio和checkbox</title>
    <link href="http://www.forsigner.com/2016/02/18/magic-check/"/>
    <id>http://www.forsigner.com/2016/02/18/magic-check/</id>
    <published>2016-02-17T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Radio和checkbox需要美化吗？答案是必须的，因为设计风格一直都会变化，原生的样式百年不变肯定满足不了需求。</p>
<p>先看看纯CSS美化过后的radio和checkbox效果：<a href="http://forsigner.com/magic-check/" target="_blank" rel="external">查看</a>。</p>
<p>项目地址：<a href="https://github.com/forsigner/magic-check" target="_blank" rel="external">magic-check</a></p>
<p>在CSS出现之前，我们美化radio和checkbox需要借助JavaScript，最具代表性的就是<a href="https://github.com/fronteed/icheck" target="_blank" rel="external">icheck</a>，它功能强大复杂并且主题很多。icheck这种美化方案很好很强大，但是也有很多缺点：</p>
<ul>
<li>太重，需要引入JS、CSS，还有图片或者字体图标，而且还依赖jQuery</li>
<li>扩展性差，Pure js项目还好，如果是Angular.js、React、Vue.js或者Meteor项目，一般都需要自己对icheck做wrapper</li>
<li>样式自定义性不好，修改样式只能重新做图</li>
<li>事件行为跟原生不一致</li>
<li>可维护性差、复杂，谁用谁知道</li>
</ul>
<p>所以，如果的项目不需兼容古董浏览器的话，用CSS美化radio和checkbox是最好的选择，这样什么都不用依赖，只需CSS，无JS，无图片，无字体图标。</p>
<p>为了更好的在项目中重用，我把美化的代码写成一个项目，叫<a href="https://github.com/forsigner/magic-check" target="_blank" rel="external">magic-check</a>，寓意像魔法一样去美化radio和checkbox。</p>
<p>用法非常简单，最好用Bower和npm进行管理，先Install：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># bower:</span></div><div class="line">$ bower install --save magic-check</div><div class="line"></div><div class="line"><span class="comment"># npm:</span></div><div class="line">$ npm install --save magic-check</div></pre></td></tr></table></figure>
<p>然后加载CSS文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bower_components/magic-check/css/magic-check.css"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后，只要给input元素加上一个CSS类magic-checkbox或magic-radio就可以：</p>
<p><strong> Radio</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"magic-radio"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"11"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"11"</span>&gt;</span>Normal<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong> Checkbox</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"magic-checkbox"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"layout"</span> <span class="attr">id</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"1"</span>&gt;</span>Normal<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Radio和checkbox需要美化吗？答案是必须的，因为设计风格一直都会变化，原生的样式百年不变肯定满足不了需求。&lt;/p&gt;
&lt;p&gt;先看看纯CSS美化过后的radio和checkbox效果：&lt;a href=&quot;http://forsigner.com/magic-check/
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.forsigner.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>不可错过的Angular scrollbar library</title>
    <link href="http://www.forsigner.com/2016/02/17/angular-nice-bar/"/>
    <id>http://www.forsigner.com/2016/02/17/angular-nice-bar/</id>
    <published>2016-02-16T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近，工作中忙于开发一个desktop apps，主要技术基于 <a href="https://github.com/atom/electron" target="_blank" rel="external">electron</a> 和 <a href="https://github.com/angular/angular.js" target="_blank" rel="external">angular.js</a> 。开发过程中，发现在 Windows 中滚动条巨丑无敌，作为一个设计出身的程序猿，我当然不能忍，于是我用下班时间造了一个 scrollbar 轮子，叫 <strong><a href="https://github.com/forsigner/angular-nice-bar" target="_blank" rel="external">angular-nice-bar</a></strong> （<a href="http://forsigner.com/nice-bar/" target="_blank" rel="external">查看 Demo</a>）。</p>
<p>我希望这个滚动条长得好看，可自定义，轻量级，不要依赖于jQuery，能和Ajax一起用，且支持黑色主题，因为我们的app是深色背景的。所以这个滚动条有以下高大上的Features ^ ^:</p>
<ul>
<li>Nice looking</li>
<li>Customize</li>
<li>Lightweight</li>
<li>No jQuery dependency</li>
<li>Can use with Ajax</li>
<li>Support dark theme</li>
</ul>
<p>开始，我并不想造轮子，尝试找一些现有的好用的angular scrollbar libraries，比如下面的类库：</p>
<ul>
<li><a href="https://github.com/itsdrewmiller/angular-perfect-scrollbar" target="_blank" rel="external">Angular-perfect-scrollbar</a></li>
<li><a href="https://github.com/yads/ngTinyScrollbar" target="_blank" rel="external">ngTinyScrollbar</a></li>
<li><a href="https://github.com/asafdav/ng-scrollbar" target="_blank" rel="external">ng-scrollbar</a></li>
<li><a href="https://github.com/iominh/ng-scrollbars" target="_blank" rel="external">ng-scrollbars</a></li>
</ul>
<p>可惜，这些libraries并不能很好满足我的需求，有些长得不好看，有些用起来别扭，有些和Ajax一起用就挂了，有些太重量级。因此我决定自己去实现一个。</p>
<p>希望<strong><a href="https://github.com/forsigner/angular-nice-bar" target="_blank" rel="external">angular-nice-bar</a></strong> 能帮到有需要的人。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，工作中忙于开发一个desktop apps，主要技术基于 &lt;a href=&quot;https://github.com/atom/electron&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;electron&lt;/a&gt; 和 &lt;a href=&quot;https:/
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.forsigner.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>用JavaScript修复ipa处理过的的png图片</title>
    <link href="http://www.forsigner.com/2016/02/16/node-pngdefry/"/>
    <id>http://www.forsigner.com/2016/02/16/node-pngdefry/</id>
    <published>2016-02-15T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近做项目遇到一个需求：<strong>解析apk和ipa包，然后把里面的icon上传到服务器。</strong></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>解析上传过程比较简单，我使用<a href="https://stuk.github.io/jszip/" target="_blank" rel="external">JSZip</a>对apk和ipa进行解压，然后把找到里面的icon上传到服务器。但是，当我在网页中使用图片时，问题出现了。对于apk中的icon，没有任何问题，但是对于ipa中解析出来的图片，在safari中可以正常显示，在其他任何浏览器去无法显示。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Google后发现，是苹果对png图片进行了优化处理，具体看这篇文章（<a href="http://www.jongware.com/pngdefry.html" target="_blank" rel="external">查看</a>），在文章中我们可以了解到一些有用信息：</p>
<blockquote>
<p>Apple uses <a href="http://pmt.sourceforge.net/pngcrush/" target="_blank" rel="external">PNGCursh</a> open source library to crush png images inside iPA files。</p>
</blockquote>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>作为一个前端工程师，我希望用javascript解决这个问题。其实之前国外已经有人去解决了，<a href="https://github.com/Startappz/NodeJS-PNGDefry" target="_blank" rel="external">NodeJS-PNGDefry</a>就是可以，可惜这个太久没维护，已经跑不起来。</p>
<p>找不到可用的，我只能自己动手丰衣足食，自己写一个。因此有了<a href="https://github.com/forsigner/node-pngdefry" target="_blank" rel="external">node-pngdefry</a>。<a href="https://github.com/forsigner/node-pngdefry" target="_blank" rel="external">node-pngdefry</a>的功能很明确，就是用Javascript来还原被苹果处理过的png图片。</p>
<p><a href="https://github.com/forsigner/node-pngdefry" target="_blank" rel="external">node-pngdefry</a>用法很简单，支持命令行和常规的Node.js:</p>
<h4 id="命令行用法"><a href="#命令行用法" class="headerlink" title="命令行用法"></a>命令行用法</h4><p><strong>install：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install -g pngdefry</div></pre></td></tr></table></figure>
<p><strong> then run:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ pngdefry -i icon.png -o icon.new.png</div></pre></td></tr></table></figure>
<h4 id="在Node-js中使用"><a href="#在Node-js中使用" class="headerlink" title="在Node.js中使用"></a>在Node.js中使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install pngdefry --save-dev</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pngdefry = <span class="built_in">require</span>(<span class="string">'pngdefry'</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> input = path.join(__dirname, <span class="string">'icon.png'</span>);</div><div class="line"><span class="keyword">var</span> output = path.join(__dirname, <span class="string">'icon.new.png'</span>);</div><div class="line"></div><div class="line">pngdefry(input, output, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'success'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm <span class="built_in">test</span></div></pre></td></tr></table></figure>
<h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/forsigner/node-pngdefry" target="_blank" rel="external">node-pngdefry</a></p>
<h4 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h4><p>最后感谢上面提到的文章的作者Jongware。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做项目遇到一个需求：&lt;strong&gt;解析apk和ipa包，然后把里面的icon上传到服务器。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;解析上传过
    
    </summary>
    
      <category term="后端" scheme="http://www.forsigner.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.forsigner.com/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="http://www.forsigner.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB Shell Command</title>
    <link href="http://www.forsigner.com/2015/07/01/MongoDB-Command/"/>
    <id>http://www.forsigner.com/2015/07/01/MongoDB-Command/</id>
    <published>2015-07-01T14:10:10.000Z</published>
    <updated>2016-08-25T03:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ mongod &lt;hostname|ip&gt; <span class="comment"># 登录MongoDB</span></div></pre></td></tr></table></figure>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"></div><div class="line">$ use &lt;dbname&gt; <span class="comment"># 切换到某个数据库 | 创建数据库</span></div><div class="line">$ db <span class="comment"># 查看当前数据库</span></div><div class="line">$ show dbs <span class="comment"># 查看服务器上的数据库</span></div><div class="line"></div><div class="line"><span class="comment"># 该操作会在test2数据库中新建一个hellocollection，并在其中插入一条记录</span></div><div class="line">$ db.hello.insert(&#123;<span class="string">"name"</span>:<span class="string">"testdb"</span>&#125;)</div></pre></td></tr></table></figure>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ db.dropDatabase() <span class="comment"># 删除数据库</span></div></pre></td></tr></table></figure>
<h2 id="创建collection"><a href="#创建collection" class="headerlink" title="创建collection"></a>创建collection</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ db.createCollection(name, options)</div><div class="line">$ db.createCollection(<span class="string">"Hello"</span>, &#123; capped : <span class="literal">true</span>, autoIndexID : <span class="literal">true</span>, size : 6142800, max : 10000 &#125; )</div><div class="line">$ db.Hello.insert(&#123;<span class="string">"hello"</span> : <span class="string">"world"</span>&#125;) 插入数据自动创建collection</div><div class="line">$ show collections <span class="comment"># 查看当前数据库中的所有collection</span></div><div class="line">$ db.Hello.renameCollection(<span class="string">"hi"</span>) <span class="comment"># 重命名collection</span></div></pre></td></tr></table></figure>
<h2 id="删除collection"><a href="#删除collection" class="headerlink" title="删除collection"></a>删除collection</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ db.&lt;collection_name&gt;.drop() <span class="comment"># 删除collection</span></div></pre></td></tr></table></figure>
<h2 id="插入document"><a href="#插入document" class="headerlink" title="插入document"></a>插入document</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ db.&lt;collection_name&gt;.insert(&lt;document&gt;)</div></pre></td></tr></table></figure>
<h2 id="查询document"><a href="#查询document" class="headerlink" title="查询document"></a>查询document</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ db.&lt;collection_name&gt;.find() <span class="comment"># 查询有document</span></div><div class="line">$ db.&lt;collection_name&gt;.find().pretty() <span class="comment"># 格式化显示</span></div></pre></td></tr></table></figure>
<h2 id="更新document"><a href="#更新document" class="headerlink" title="更新document"></a>更新document</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ db.&lt;collection_name&gt;.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</div><div class="line">$ db.mycol.update(&#123;<span class="string">'title'</span>:<span class="string">'MongoDB Overview'</span>&#125;,&#123;<span class="variable">$set</span>:&#123;<span class="string">'title'</span>:<span class="string">'New MongoDB Tutorial'</span>&#125;&#125;)</div><div class="line"></div><div class="line"><span class="comment"># MongoDB默认将只更新单一的文件，来更新多个你需要设置参数置'multi' 为true</span></div><div class="line">$ db.mycol.update(&#123;<span class="string">'title'</span>:<span class="string">'MongoDB Overview'</span>&#125;,&#123;<span class="variable">$set</span>:&#123;<span class="string">'title'</span>:<span class="string">'New MongoDB Tutorial'</span>&#125;&#125;,&#123;multi:<span class="literal">true</span>&#125;)</div><div class="line"></div><div class="line"><span class="comment"># save() 方法替换现有的document</span></div><div class="line">$ db.&lt;collection_name&gt;.save(&#123;_id:ObjectId(),NEW_DATA&#125;)</div></pre></td></tr></table></figure>
<h2 id="删除document"><a href="#删除document" class="headerlink" title="删除document"></a>删除document</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ db.&lt;collection_name&gt;.remove(DELLETION_CRITTERIA)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;登录数据库&quot;&gt;&lt;a href=&quot;#登录数据库&quot; class=&quot;headerlink&quot; title=&quot;登录数据库&quot;&gt;&lt;/a&gt;登录数据库&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;p
    
    </summary>
    
      <category term="后端" scheme="http://www.forsigner.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="MongoDB" scheme="http://www.forsigner.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>ionic android打包</title>
    <link href="http://www.forsigner.com/2015/03/12/ionic-android-package/"/>
    <id>http://www.forsigner.com/2015/03/12/ionic-android-package/</id>
    <published>2015-03-11T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>App用ionic开发完成后，就可以打包发布市场啦。发布一个App可以上传市场的包，关键要做两样东西，一是打一个release包，而是给包签名。命令不多，但命令比较长，记录一下。<br><a id="more"></a></p>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>首先生成 release包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$  cordova build --release android  <span class="comment"># 记得加上--release 参数，不然会打出debug包</span></div></pre></td></tr></table></figure>
<p>执行完这条命令后，cordova会根据你的config.xml生成一个未签名的apk包。在platform文件夹可以找到apk包（<code>platforms/android/ant-build</code>），接下来就可以签名了。</p>
<h2 id="生成安全钥匙"><a href="#生成安全钥匙" class="headerlink" title="生成安全钥匙"></a>生成安全钥匙</h2><p>App签名需要用到安全钥匙，你可以用JDK的keytool工具生成，执行下面命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 把my-release-key和alias_name换成你的名字</span></div><div class="line">$ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize <span class="number">2048</span> -validity <span class="number">10000</span></div></pre></td></tr></table></figure>
<p>执行后需要回答一些问题，正常填写就好了</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">Enter keystore password:</div><div class="line">Re-enter new password:</div><div class="line">What is your first and last name?</div><div class="line">  [Unknown]:  test</div><div class="line">What is the name of your organizational unit?</div><div class="line">  [Unknown]:  test</div><div class="line">What is the name of your organization?</div><div class="line">  [Unknown]:  test</div><div class="line">What is the name of your City or Locality?</div></pre></td></tr></table></figure>
<p>之后会生成一个your_name.keystore文件，这就是你的安全秘钥，记得要好好保管，下次更新应用要用到，丢失就大事了，你以后就甭想更新市场上的应用了。</p>
<h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><p>使用JDK中的jarsigner工具为apk签名，命令如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># my-release-key和alias_name换成你的名字</span></div><div class="line">$ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore HelloWorld-release-unsigned.apk alias_name</div></pre></td></tr></table></figure>
<p>执行后会生成一个已签名成功的apk，你可以用这个包发布市场。</p>
<h2 id="优化（可选）"><a href="#优化（可选）" class="headerlink" title="优化（可选）"></a>优化（可选）</h2><p>使用Zipalign优化，Zipalign是一个android平台上整理APK文件的工具，它首次被引入是在Android 1.6版本的SDK软件开发工具包中。它能够对打包的Android应用程序进行优化， 以使Android操作系统与应用程序之间的交互作用更有效率，这能够让应用程序和整个系统运行得更快。</p>
<p>命令如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ zipalign -v <span class="number">4</span> HelloWorld-release-unsigned.apk HelloWorld.apk</div></pre></td></tr></table></figure>
<p>done</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;App用ionic开发完成后，就可以打包发布市场啦。发布一个App可以上传市场的包，关键要做两样东西，一是打一个release包，而是给包签名。命令不多，但命令比较长，记录一下。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ionic" scheme="http://www.forsigner.com/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>ionic Mac下连接android手机调试</title>
    <link href="http://www.forsigner.com/2015/03/07/mac-android-debug/"/>
    <id>http://www.forsigner.com/2015/03/07/mac-android-debug/</id>
    <published>2015-03-06T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端开发时，调试比较方便，一个Chrome，不用编译不用等待，非常方便。ionic开发就不一样了，界面调试虽然可以用Chrome，但是Chrome代替不了真实的手机环境，ionic程序经常可以在Chrome的emulator可以运行，但到着呢是的手机环境就撒娇了。有两种方法可以对ionic程序进行调试，一种是虚拟机，另一种是真实的android手机。虚拟机的优点是就是你不需要一部android手机，只要配置好android开发环境就好了，但虚拟机慢得实在让人无法忍受；另一种就是真机调试咯，真机调试优点就是快。在Mac下，可能会遇到adb无法连接android手机的情况，下面是我的解决办法。<br><a id="more"></a></p>
<h2 id="获取Android设备的Vendor-ID"><a href="#获取Android设备的Vendor-ID" class="headerlink" title="获取Android设备的Vendor ID"></a>获取Android设备的Vendor ID</h2><p>执行以下命令查看连接的USB设备信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ system_profiler SPUSBDataType</div></pre></td></tr></table></figure>
<p>执行完这条命令后，找到你手机的连接信息，例如我的手机手魅蓝，连接信息如下:</p>
<p><img src="http://d.pcs.baidu.com/thumbnail/422fa50e99b8336a79525ee68eaa94ea?fid=1749149254-250528-231176613827012&amp;time=1428202800&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-cHKfxQvHxOWs41vd%2bypZWLOkVv0%3d&amp;expires=8h&amp;prisign=unknow&amp;chkbd=0&amp;chkv=0&amp;size=c1920_u1080&amp;quality=90" alt="usb连接信息"></p>
<p>上图中的”0x2a45”，就是所需要的Vender ID。</p>
<h2 id="修改adb-usb-ini文件"><a href="#修改adb-usb-ini文件" class="headerlink" title="修改adb_usb.ini文件"></a>修改adb_usb.ini文件</h2><p>输入：<code>vim ~/.android/adb_usb.ini</code>命令，打开adb_usb.ini文件中添加你的Vender ID，格式如下：</p>
<p><img src="http://d.pcs.baidu.com/thumbnail/d862ccbfe7768944683165053cbe8212?fid=1749149254-250528-520240299263789&amp;time=1428202800&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-N6t8bfrhnlEuDEvNn4J7cAZi4V4%3d&amp;expires=8h&amp;prisign=unknow&amp;chkbd=0&amp;chkv=0&amp;size=c1920_u1080&amp;quality=90" alt="usb连接信息"></p>
<p>记得格式要争取，不然会出现一下错误：</p>
<p><img src="http://d.pcs.baidu.com/thumbnail/9bc09a4ebfb0c0d1f2a226893c43f9b7?fid=1749149254-250528-983441257023133&amp;time=1428202800&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-VHC7XVRfdvTMYkEQfscxn%2b8pA5k%3d&amp;expires=8h&amp;prisign=unknow&amp;chkbd=0&amp;chkv=0&amp;size=c1920_u1080&amp;quality=90" alt="更新"></p>
<h3 id="重启adb"><a href="#重启adb" class="headerlink" title="重启adb"></a>重启adb</h3><p>执行以下命令重启adb</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ adb kill-server</div><div class="line">$ adb start-server</div><div class="line">$ adb devices</div></pre></td></tr></table></figure>
<p>执行完<code>adb devices</code>后看到以下反馈就说明你成功了：</p>
<p><img src="http://d.pcs.baidu.com/thumbnail/7fa250bf3278858e28a9da70583a3d94?fid=1749149254-250528-658210706645655&amp;time=1428202800&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-fJOG4y3Ix5Ob%2foS%2f%2b5iJxTXHYlg%3d&amp;expires=8h&amp;prisign=unknow&amp;chkbd=0&amp;chkv=0&amp;size=c1920_u1080&amp;quality=90" alt="检查"></p>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>现在你就可以使用真机调试ionic程序了，执行一下命令就可以了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ ionic run android</div></pre></td></tr></table></figure>
<p>当然,你使用Eclipse或Android Studio开发Android App时，同样可以使用这种方法连接你的Android设备。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端开发时，调试比较方便，一个Chrome，不用编译不用等待，非常方便。ionic开发就不一样了，界面调试虽然可以用Chrome，但是Chrome代替不了真实的手机环境，ionic程序经常可以在Chrome的emulator可以运行，但到着呢是的手机环境就撒娇了。有两种方法可以对ionic程序进行调试，一种是虚拟机，另一种是真实的android手机。虚拟机的优点是就是你不需要一部android手机，只要配置好android开发环境就好了，但虚拟机慢得实在让人无法忍受；另一种就是真机调试咯，真机调试优点就是快。在Mac下，可能会遇到adb无法连接android手机的情况，下面是我的解决办法。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ionic" scheme="http://www.forsigner.com/tags/ionic/"/>
    
      <category term="android" scheme="http://www.forsigner.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>ionic常用命令</title>
    <link href="http://www.forsigner.com/2015/03/01/ionic-command/"/>
    <id>http://www.forsigner.com/2015/03/01/ionic-command/</id>
    <published>2015-02-28T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>下面是ionic常用命令，或者在终端执行“ionic -h”也可以查看，由于这些命令会重复利用，所以还是整理一下，方便自己和别人。<br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ npm install -g cordova ionic  <span class="comment"># 安装ionic</span></div><div class="line"></div><div class="line">$ ionic start myApp blank  <span class="comment"># 开始一个空白ionic项目</span></div><div class="line">$ ionic start myApp tabs  <span class="comment"># 开始一个tabs ionic项目</span></div><div class="line">$ ionic start myApp sidemenu  <span class="comment"># 开始一个sidemenu ionic项目</span></div><div class="line"></div><div class="line">$ionic serve  <span class="comment"># 在浏览器运行项目</span></div><div class="line"></div><div class="line">$ ionic platform add ios  <span class="comment"># 添加到ios平台</span></div><div class="line">$ ionic build ios  <span class="comment"># build</span></div><div class="line">$ ionic emulate ios  <span class="comment"># 在模拟器运行项目</span></div><div class="line">$ ionic run ios  <span class="comment"># 在手机运行项目</span></div><div class="line"></div><div class="line">$ ionic platform add android</div><div class="line">$ ionic build android</div><div class="line">$ ionic emulate android</div><div class="line">$ ionic run android  <span class="comment"># 在手机运行项目</span></div><div class="line"></div><div class="line">$ ionic package [debug,release] [android,ios] <span class="comment"># 打包</span></div><div class="line"></div><div class="line">$ ionic upload  <span class="comment"># 上传到ionic view</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面是ionic常用命令，或者在终端执行“ionic -h”也可以查看，由于这些命令会重复利用，所以还是整理一下，方便自己和别人。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ionic" scheme="http://www.forsigner.com/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>Mac中配置ionic框架</title>
    <link href="http://www.forsigner.com/2015/02/27/setting-ionic/"/>
    <id>http://www.forsigner.com/2015/02/27/setting-ionic/</id>
    <published>2015-02-26T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近想做一个App，却苦于自己没有那么多精力去学习Java和Object-C，自己只对JavaScript最熟悉，所以决定用Web来实现，也就是做一Hybrid App。<br><a id="more"></a></p>
<p>参考了很多Hybrid App的解决方案，觉得ionic最适合我。一是它性能比较出众，而是他基于Agular，我对Agular非常熟悉。</p>
<p>下面是ionic开发环境的配置方法，没有非常复杂：</p>
<h2 id="安装ionic"><a href="#安装ionic" class="headerlink" title="安装ionic"></a>安装ionic</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$  npm install -g cordova ionic  <span class="comment"># 安装cordova和ionic</span></div></pre></td></tr></table></figure>
<p>可以有三种方式开始一个ionic项目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$  ionic start myApp tabs   <span class="comment"># 创建带有top栏和bottom栏的示例项目</span></div><div class="line">$  ionic start myApp sidemenu　 <span class="comment"># 创建带有左侧带有menu栏的示例项目</span></div><div class="line">$  ionic start myApp blank   <span class="comment">#创建空白项目</span></div></pre></td></tr></table></figure>
<p>再执行下面命令就可以再浏览器查看效果了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$  ionic sserve</div></pre></td></tr></table></figure>
<h2 id="添加ios平台"><a href="#添加ios平台" class="headerlink" title="添加ios平台"></a>添加ios平台</h2><p>确保你已经安装了xcode，执行以下命令就可以再模拟器看到效果了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ sudo npm install -g ios-sim</div><div class="line">$ cd myApp</div><div class="line">$ ionic platform add ios</div><div class="line">$ ionic build ios</div><div class="line">$ ionic emulate ios</div></pre></td></tr></table></figure>
<h2 id="添加Android平台"><a href="#添加Android平台" class="headerlink" title="添加Android平台"></a>添加Android平台</h2><p>确保你已经配置好android的开发环境，执行以下命令就可以再模拟器看到效果了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ cd myApp</div><div class="line">$ ionic platform add android //这行可能会报错</div><div class="line">$ ionic build android</div><div class="line">$ ionic emulate android</div></pre></td></tr></table></figure>
<p>整个过程很简单，可能在配置android开发环境比较麻烦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想做一个App，却苦于自己没有那么多精力去学习Java和Object-C，自己只对JavaScript最熟悉，所以决定用Web来实现，也就是做一Hybrid App。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ionic" scheme="http://www.forsigner.com/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>我的技术栈</title>
    <link href="http://www.forsigner.com/2015/01/03/my-tech/"/>
    <id>http://www.forsigner.com/2015/01/03/my-tech/</id>
    <published>2015-01-02T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>学的技术越来越杂，涉及到前端、后端、客户端，还有老本行设计，写篇文章备份一下。<br><a id="more"></a></p>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><ul>
<li><a href="https://github.com/h5bp/html5-boilerplate" target="_blank" rel="external">html5-boilerplate</a> - htm5模板</li>
</ul>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h4 id="CSS编写工具"><a href="#CSS编写工具" class="headerlink" title="CSS编写工具"></a>CSS编写工具</h4><ul>
<li><a href="https://github.com/necolas/idiomatic-css" target="_blank" rel="external">idiomatic-css</a> - CSS书写原则</li>
<li><a href="http://cssguidelin.es/" target="_blank" rel="external">cssguidelin</a> - CSS书写指导</li>
<li><a href="https://github.com/sass/sass" target="_blank" rel="external">sass</a> - CSS预处理器（元老），用ruby编译</li>
<li><a href="https://github.com/less/less.js" target="_blank" rel="external">less.js</a> - CSS预处理器之一，Bootstrap用它写的</li>
<li><a href="https://github.com/Automattic/stylus" target="_blank" rel="external">stylus</a> -  CSS预处理器之一，用node.js编译</li>
<li><a href="https://github.com/Compass/compass" target="_blank" rel="external">compass</a> - Sass的工具库</li>
<li><a href="https://github.com/wagerfield/cssmixins" target="_blank" rel="external">cssmixins</a> - 预处理器的工具库</li>
<li><a href="https://github.com/kristoferjoseph/flexboxgrid" target="_blank" rel="external">flexboxgrid</a> - 基于flexbox的网格系统</li>
<li><a href="https://github.com/google/material-design-icons" target="_blank" rel="external">material-design-icons</a> - material icon</li>
<li><a href="https://github.com/callemall/material-ui" target="_blank" rel="external">material-ui</a> - material框架</li>
<li><a href="https://github.com/saeedalipoor/icono" target="_blank" rel="external">icono</a> - 一个DIV实现的icon</li>
<li><a href="https://github.com/lukehaas/css-loaders" target="_blank" rel="external">css-loaders</a> - CSS loading</li>
</ul>
<h4 id="CSS框架"><a href="#CSS框架" class="headerlink" title="CSS框架"></a>CSS框架</h4><ul>
<li><a href="https://github.com/twbs/bootstrap-sass" target="_blank" rel="external">bootstrap-sass</a>  - Bootstrap的sass版本</li>
<li><a href="https://github.com/twbs/ratchet" target="_blank" rel="external">ratchet</a> - 用HTML和CSS写mobile App样式</li>
<li><a href="https://github.com/Dogfalo/materialize" target="_blank" rel="external">materialize</a> Material Design 框架</li>
<li><a href="https://github.com/Semantic-Org/Semantic-UI" target="_blank" rel="external">Semantic-UI</a></li>
<li><a href="https://github.com/designmodo/Flat-UI" target="_blank" rel="external">Flat-UI</a> - flat-ui</li>
</ul>
<h4 id="CSS组件"><a href="#CSS组件" class="headerlink" title="CSS组件"></a>CSS组件</h4><ul>
<li><a href="https://github.com/chinchang/hint.css" target="_blank" rel="external">hint.css</a> - 很漂亮的CSS tooltip</li>
<li><a href="https://github.com/hojberg/cssarrowplease" target="_blank" rel="external">cssarrowplease</a> - 另一个CSS tooltip</li>
<li><a href="https://github.com/hakimel/css" target="_blank" rel="external">hakime/css</a> -  一些好玩的CSS</li>
<li><a href="https://github.com/hakimel/Ladda" target="_blank" rel="external">Ladda</a> - 按钮触发提示</li>
<li><a href="https://github.com/IanLunn/Hover" target="_blank" rel="external">Hover</a> - 元素hover效果</li>
<li><a href="https://github.com/drublic/css-modal" target="_blank" rel="external">css-modal</a> - 纯CSS弹窗</li>
<li><a href="https://github.com/marvelapp/devices.css" target="_blank" rel="external">devices.css</a> - 纯CSS写的手机外壳</li>
<li><a href="https://github.com/FortAwesome/Font-Awesome" target="_blank" rel="external">Font-Awesome</a> - 最出名的字体图标</li>
<li><a href="https://github.com/SamHerbert/SVG-Loaders" target="_blank" rel="external">SVG-Loaders</a> - 好看的CSS loading</li>
<li><a href="https://github.com/saeedalipoor/icono" target="_blank" rel="external">icono</a> - 一个div实现的图标</li>
<li><a href="https://github.com/philipwalton/solved-by-flexbox" target="_blank" rel="external">solved-by-flexbox</a></li>
<li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="external">autoprefixer</a> - 自动加前缀</li>
</ul>
<ul>
<li><a href="https://github.com/csscomb/csscomb.js" target="_blank" rel="external">csscomb.js</a> - CSS自动排序</li>
</ul>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li><a href="https://github.com/BonsaiDen/JavaScript-Garden" target="_blank" rel="external">JavaScript-Garden</a> -  JS的一些常奇技淫巧</li>
<li><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You-Dont-Know-JS</a> - 你不了解JS</li>
</ul>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><h3 id="js工具"><a href="#js工具" class="headerlink" title="js工具"></a>js工具</h3><ul>
<li><a href="https://github.com/madrobby/zepto" target="_blank" rel="external">zepto</a> - 简化版的JQ</li>
<li><a href="https://github.com/hakimel/Avgrund" target="_blank" rel="external">Avgrund</a> - 很酷的弹窗</li>
<li><a href="https://github.com/hakimel/reveal.js" target="_blank" rel="external">reveal.js</a> - 用网页做PPT</li>
<li><a href="https://github.com/bartaz/impress.js" target="_blank" rel="external">impress.js</a> - 用网页做PPT</li>
<li><a href="https://github.com/viljamis/ResponsiveSlides.js" target="_blank" rel="external">ResponsiveSlides.js</a> - 轻量级的slides</li>
<li><a href="https://github.com/RubaXa/Sortable" target="_blank" rel="external">Sortable</a> - 拖放排序元素</li>
<li><a href="https://github.com/zeroclipboard/zeroclipboard" target="_blank" rel="external">zeroclipboard</a> - 粘贴板</li>
<li><a href="https://github.com/mrdoob/three.js" target="_blank" rel="external">three.js</a> - JS 3D库</li>
<li><a href="https://github.com/mbostock/d3" target="_blank" rel="external">d3</a> -JS svg工具</li>
<li><a href="https://github.com/ftlabs/fastclick" target="_blank" rel="external">fastclick</a> - 解决移动端点击300ms延迟问题</li>
<li><a href="https://github.com/chriso/validator.js" target="_blank" rel="external">alidator.js</a> - js字符串、数值验证等服务</li>
<li><a href="https://github.com/flowjs/flow.js" target="_blank" rel="external">flow.js</a> - 文件上传</li>
<li><a href="https://github.com/matthewhudson/device.js" target="_blank" rel="external">device.js</a> - 识别设备</li>
<li><a href="https://github.com/BBC-News/Imager.js" target="_blank" rel="external">Imager.js</a> - 响应式图片</li>
<li><a href="https://github.com/jacoborus/nanobar" target="_blank" rel="external">nanobar</a> - 进度条</li>
<li><a href="https://github.com/fgnass/spin.js" target="_blank" rel="external">spin.js</a> - 加载动画</li>
<li><a href="https://github.com/cferdinandi/smooth-scroll" target="_blank" rel="external">smooth-scroll</a> 平滑滚动</li>
<li><a href="https://github.com/javve/list.js" target="_blank" rel="external">list.js</a> - 排序、过滤等</li>
<li><a href="https://github.com/nnnick/Chart.js" target="_blank" rel="external">Chart.js</a> - html5图标</li>
<li><a href="https://github.com/Modernizr/Modernizr" target="_blank" rel="external">Modernizr</a> - 检测对 html5和css3的支持</li>
<li><a href="https://github.com/moment/moment" target="_blank" rel="external">moment</a> - 日期处理工具</li>
<li><a href="https://github.com/nolimits4web/Swiper" target="_blank" rel="external">Swiper</a> - 使用硬件加速的slider</li>
<li><a href="https://github.com/ariya/phantomjs" target="_blank" rel="external">phantomjs</a> - 无界面的webkit</li>
<li><a href="https://github.com/HubSpot/pace" target="_blank" rel="external">pace</a> - 加载条</li>
<li><a href="https://github.com/aui/font-spider" target="_blank" rel="external">ont-spider</a> - 中文字体压缩</li>
<li><a href="https://github.com/numbers/numbers.js" target="_blank" rel="external">numbers.js</a> - 数学计算库</li>
<li><a href="https://github.com/cjohansen/Sinon.JS" target="_blank" rel="external">Sinon.JS</a> - 前端mocks</li>
<li><a href="https://github.com/mochajs/mocha" target="_blank" rel="external">mocha</a> - js测试框架</li>
<li><a href="https://github.com/kenwheeler/slick" target="_blank" rel="external">slick</a> - light weight slider</li>
<li><a href="https://github.com/julianlloyd/scrollReveal.js" target="_blank" rel="external">scrollReveal.js</a> - CSS页面单个元素动画</li>
<li><a href="https://github.com/hakimel/Ladda" target="_blank" rel="external">Ladda</a> - 按钮加载动画</li>
</ul>
<h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><ul>
<li><a href="https://github.com/angular/angular.js" target="_blank" rel="external">angular.js</a> - 官方github库</li>
<li><a href="https://github.com/angular/angular-phonecat" target="_blank" rel="external">angular-phonecat</a> - Angular教程项目</li>
<li><a href="https://github.com/jmcunningham/AngularJS-Learning" target="_blank" rel="external">AngularJS-Learning</a> - Angular学习资料</li>
<li><a href="https://github.com/johnpapa/angular-styleguide" target="_blank" rel="external">angular-styleguide</a> - 风格指南</li>
<li><a href="https://github.com/angular-ui/ui-utils" target="_blank" rel="external">ui-utils</a> - Angular工具集</li>
<li><a href="https://github.com/angular-ui/ui-router" target="_blank" rel="external">ui-router</a> -可以嵌套的路由</li>
<li><a href="https://github.com/mgonto/restangular" target="_blank" rel="external">restangular</a> - restful Api处理工具</li>
<li><a href="https://github.com/angular-ui/bootstrap" target="_blank" rel="external">bootstrap</a> - Angular版的Bootstrap指令</li>
<li><a href="https://github.com/likeastore/ngDialog" target="_blank" rel="external">ngDialog</a> - Angular弹窗</li>
<li><a href="https://github.com/begriffs/angular-paginate-anything" target="_blank" rel="external">angular-paginate-anything</a> -Angular分页</li>
<li><a href="https://github.com/flowjs/ng-flow" target="_blank" rel="external">ng-flow</a> - Agular上传文件</li>
<li><a href="https://github.com/danialfarid/ng-file-upload" target="_blank" rel="external">ng-file-upload</a> - Agular上传文件</li>
<li><a href="https://github.com/nervgh/angular-file-upload" target="_blank" rel="external">angular-file-upload</a> - Agular上传文件</li>
<li><a href="https://github.com/esvit/ng-table" target="_blank" rel="external">ng-table</a> - 具有排序和过滤功能的表格</li>
<li><a href="https://github.com/angular-ui/ng-grid" target="_blank" rel="external">ng-grid</a> - 强大的Angular表格</li>
<li><a href="https://github.com/prerender/prerender" target="_blank" rel="external">prerender</a> - SEO优化工具</li>
<li><a href="https://github.com/prerender/prerender-node" target="_blank" rel="external">prerender-node</a> - SEO优化工具</li>
<li><a href="https://github.com/fraywing/textAngular" target="_blank" rel="external">textAngular</a> - 富文本编辑器</li>
<li><a href="https://github.com/TylerGarlick/angular-redactor" target="_blank" rel="external">angular-redactor</a>  - 富文本编辑器</li>
<li><a href="https://github.com/ckeditor/ckeditor-dev" target="_blank" rel="external">ckeditor-dev</a>  - 富文本编辑器</li>
<li><a href="https://github.com/urish/angular-moment" target="_blank" rel="external">angular-moment</a> - 日期处理工具</li>
<li><a href="https://github.com/angular-ui/ui-sortable" target="_blank" rel="external">ui-sortable</a> - Agular排序工具</li>
<li><a href="https://github.com/Pasvaz/bindonce" target="_blank" rel="external">bindonce</a> - Zero watches binding for AngularJs</li>
<li><a href="https://github.com/angular-ui/ui-select" target="_blank" rel="external">ui-select</a> - select控件</li>
<li><a href="https://github.com/mcasimir/mobile-angular-ui" target="_blank" rel="external">mobile-angular-ui</a> - 一个手机端的框架</li>
<li><a href="https://github.com/rstacruz/nprogress" target="_blank" rel="external">nprogress</a> - 进度条</li>
<li><a href="https://github.com/voronianski/ngprogress-lite" target="_blank" rel="external">ngprogress-lite</a> - 进度条</li>
<li><a href="https://github.com/urish/angular-spinner" target="_blank" rel="external">angular-spinner</a>  - 加载动画</li>
<li><a href="https://github.com/siddii/angular-timer" target="_blank" rel="external">angular-timer</a> - 计时器</li>
<li><a href="https://github.com/asafdav/ng-clip" target="_blank" rel="external">ng-clip</a> - 剪切板</li>
<li><a href="https://github.com/yaru22/angular-hovercard" target="_blank" rel="external">angular-hovercard</a> - hover控件</li>
<li><a href="https://github.com/Hendrixer/ngFx" target="_blank" rel="external">ngFx</a> - Angular动画</li>
<li><a href="https://github.com/machineboy2045/angular-selectize" target="_blank" rel="external">angular-selectize</a> -  Angular选择控件</li>
<li><a href="https://github.com/gonewandering/angles" target="_blank" rel="external">angles</a> - 基于Chartjs的图表</li>
<li><a href="https://github.com/sroze/ngInfiniteScroll" target="_blank" rel="external">ngInfiniteScroll</a> - 无限加载</li>
<li><a href="https://github.com/afklm/ng-lazy-image" target="_blank" rel="external">ng-lazy-image</a> - layzy loading</li>
<li><a href="https://github.com/chieffancypants/angular-loading-bar" target="_blank" rel="external">angular-loading-bar</a> - 加载条</li>
<li><a href="https://github.com/angular/material" target="_blank" rel="external">material</a> - 基于Angualr的Material框架</li>
</ul>
<h3 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h3><ul>
<li><a href="https://github.com/malihu/malihu-custom-scrollbar-plugin" target="_blank" rel="external">malihu-custom-scrollbar-plugin</a> - 自定义滚动条</li>
<li><a href="https://github.com/fronteed/iCheck" target="_blank" rel="external">iCheck</a> - 漂亮的表单控件</li>
<li><a href="https://github.com/alvarotrigo/fullPage.js" target="_blank" rel="external">fullPage.js</a> - 如题</li>
<li><a href="https://github.com/desandro/imagesloaded" target="_blank" rel="external">imagesloaded</a> - 监控图片是否加载完成</li>
<li><a href="https://github.com/dimsemenov/Magnific-Popup" target="_blank" rel="external">Magnific-Popup</a> - 弹窗控件</li>
<li><a href="https://github.com/woothemes/FlexSlider" target="_blank" rel="external">FlexSlider</a> - 响应式slider</li>
<li><a href="https://github.com/blueimp/jQuery-File-Upload" target="_blank" rel="external">jQuery-File-Upload</a> -文件上传</li>
<li><a href="https://github.com/HubSpot/messenger" target="_blank" rel="external">messenger</a> - 消息提醒</li>
<li><a href="https://github.com/harvesthq/chosen" target="_blank" rel="external">chosen</a> - 表单美化</li>
<li><a href="https://github.com/select2/select2" target="_blank" rel="external">select2</a> - 选择美化控件</li>
<li><a href="https://github.com/aFarkas/lazysizes" target="_blank" rel="external">lazysizes</a> - 图片layzy loading</li>
<li><a href="https://github.com/twitter/typeahead.js" target="_blank" rel="external">typeahead.js</a> - 自动完成</li>
<li><a href="https://github.com/infinite-scroll/infinite-scroll" target="_blank" rel="external">infinite-scroll</a> - 无限加载</li>
</ul>
<h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><ul>
<li><a href="https://github.com/gulpjs/gulp" target="_blank" rel="external">gulp</a></li>
<li><a href="https://github.com/duojs/duo" target="_blank" rel="external">duo</a></li>
</ul>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><ul>
<li><a href="https://github.com/addyosmani/es6-tools" target="_blank" rel="external">es6-tools</a> - es6工具</li>
<li><a href="https://github.com/ruanyf/es6tutorial" target="_blank" rel="external">es6tutorial</a> -es6新特性</li>
<li><a href="https://github.com/babel/babel" target="_blank" rel="external">babel</a> - js编译器</li>
</ul>
<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><ul>
<li><a href="https://github.com/felixge/node-mysql" target="_blank" rel="external">node-mysql</a> - node mysql客户端</li>
<li><a href="https://github.com/tj/n" target="_blank" rel="external">n</a> -版本控制</li>
<li><a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a> -版本控制</li>
<li><a href="https://github.com/pillarjs/node-frameworks" target="_blank" rel="external">node-frameworks</a> - nodejs框架列表</li>
<li><a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="external">node-inspector</a> - nodejs调试工具</li>
<li><a href="https://github.com/visionmedia/debug" target="_blank" rel="external">debug</a> - debug工具</li>
<li><a href="https://github.com/joyent/node" target="_blank" rel="external">node</a> 官方github</li>
<li><a href="https://github.com/iojs/io.js" target="_blank" rel="external">io.js</a> - iojs官方github</li>
<li><a href="https://github.com/Automattic/socket.io" target="_blank" rel="external">socket.io</a> - 用于构建实时应用</li>
<li><a href="https://github.com/trentm/node-bunyan" target="_blank" rel="external">node-bunyan</a> JSON风格nodejs日志</li>
<li><a href="https://github.com/winstonjs/winston" target="_blank" rel="external">winston</a> - 日志工具</li>
<li><a href="https://github.com/caolan/async" target="_blank" rel="external">async</a> - Async utilities for node and the browser</li>
<li><a href="https://github.com/kriskowal/q" target="_blank" rel="external">q</a> - 基于Promise的解决回调问题方案</li>
<li><a href="https://github.com/petkaantonov/bluebird" target="_blank" rel="external">bluebird</a> - 基于Promise的解决回调问题方案</li>
<li><a href="https://github.com/sequelize/sequelize" target="_blank" rel="external">sequelize</a> - ORM for Node.js &amp; io.js</li>
<li><a href="https://github.com/kvz/phpjs" target="_blank" rel="external">phpjs</a> - JS实现的php函数</li>
<li><a href="https://github.com/jashkenas/underscore" target="_blank" rel="external">underscore</a> - JS工具库</li>
<li><a href="https://github.com/epeli/underscore.string" target="_blank" rel="external">underscore.string</a> - 字符串工具</li>
<li><a href="https://github.com/lodash/lodash" target="_blank" rel="external">lodash</a> - JS工具库</li>
<li><a href="https://github.com/jaredhanson/passport" target="_blank" rel="external">passport</a> - nodejs认证工具</li>
<li><a href="https://github.com/Unitech/PM2" target="_blank" rel="external">PM2</a> - 生产环境使用的 nodejs进程管理工具</li>
<li><a href="https://github.com/remy/nodemon" target="_blank" rel="external">nodemon</a> - 开发环境使用的 nodejs进程管理工具</li>
<li><a href="https://github.com/cnwhy/lib-qqwry" target="_blank" rel="external">lib-qqwry</a> - ip解析工具</li>
<li><a href="https://github.com/cheeriojs/cheerio" target="_blank" rel="external">cheerio</a> - 服务器端的JQ，抓取网页用的</li>
<li><a href="https://github.com/felixge/node-formidable" target="_blank" rel="external">node-formidable</a> - nodejs文件上传</li>
<li><a href="https://github.com/ashtuchkin/iconv-lite" target="_blank" rel="external">iconv-lite</a> - 处理node编码问题</li>
<li><a href="https://github.com/JacksonTian/bufferhelper" target="_blank" rel="external">bufferhelper</a> - 处理buffer</li>
<li><a href="https://github.com/turingou/gbk" target="_blank" rel="external">gbk</a> - 处理node编码问题</li>
<li><a href="https://github.com/DoubleSpout/ccap" target="_blank" rel="external">ccap</a> - 生成验证码</li>
<li><a href="https://github.com/tj/commander.js" target="_blank" rel="external">commander.js</a> - node.js command-line interfaces made easy</li>
<li><a href="https://github.com/yanyiwu/nodejieba" target="_blank" rel="external">nodejieba</a> - nodejs分词</li>
<li><a href="https://github.com/leizongmin/node-segment" target="_blank" rel="external">node-segment</a> - nodejs分词</li>
<li><a href="https://github.com/ncb000gt/node-cron" target="_blank" rel="external">node-cron</a> - 时间任务工具</li>
<li><p><a href="https://github.com/bunkat/later" target="_blank" rel="external">later</a> - 时间任务工具</p>
</li>
<li><p><a href="https://github.com/strongloop/express" target="_blank" rel="external">express</a> - 最流行的nodejs框架</p>
</li>
<li><a href="https://github.com/balderdashy/sails" target="_blank" rel="external">sails</a> - nodejs框架</li>
<li><a href="https://github.com/meteor/meteor" target="_blank" rel="external">meteor</a> - nodejs框架</li>
<li><a href="https://github.com/linnovate/mean" target="_blank" rel="external">mean</a>  - 全栈JS框架</li>
<li><a href="https://github.com/senchalabs/connect" target="_blank" rel="external">connect</a> - 强大的nodejs中间件</li>
<li><a href="https://github.com/meanjs/mean" target="_blank" rel="external">mean</a> - Full-Stack JavaScript</li>
<li><a href="https://github.com/jaredhanson/oauth2orize" target="_blank" rel="external">oauth2orize</a> - nodejs oauth2 服务</li>
<li><a href="https://github.com/request/request" target="_blank" rel="external">request</a> - Simplified HTTP request client.</li>
<li><a href="https://github.com/LearnBoost/cluster" target="_blank" rel="external">cluster</a> - nodejs多核</li>
<li><a href="https://github.com/TryGhost/Ghost" target="_blank" rel="external">Ghost</a> - 新一代blog</li>
</ul>
<h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><ul>
<li><a href="https://github.com/thomseddon/node-oauth2-server" target="_blank" rel="external">node-oauth2-server</a> - express oauth 服务</li>
</ul>
<h2 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h2><ul>
<li><a href="https://github.com/koajs/koa" target="_blank" rel="external">koa</a> - 下一代nodejs框架</li>
<li><a href="https://github.com/koajs/examples" target="_blank" rel="external">examples</a> -示例</li>
<li><a href="https://github.com/thomseddon/koa-oauth-server" target="_blank" rel="external">koa-oauth-server</a> - oauth2服务</li>
<li><a href="https://github.com/alexmingoia/koa-router" target="_blank" rel="external">koa-router</a> - 路由</li>
<li><a href="https://github.com/alexmingoia/koa-router" target="_blank" rel="external">koa-router</a> - 路由</li>
<li><a href="https://github.com/tj/co-views" target="_blank" rel="external">co-views</a> - koa视图</li>
<li><a href="https://github.com/RocksonZeta/koa-validate" target="_blank" rel="external">koa-validate</a> - 参数验证</li>
<li><a href="https://github.com/dlau/koa-body" target="_blank" rel="external">koa-body</a> - 一个body parser中间件</li>
<li><a href="https://github.com/koajs/bodyparser" target="_blank" rel="external">bodyparser</a> - 一个body parser中间件</li>
<li><a href="https://github.com/RisingStack/koa-prerender" target="_blank" rel="external">koa-prerender</a> - SEO优化用的</li>
<li><a href="https://github.com/cnpm/koa-middlewares" target="_blank" rel="external">koa-middlewares</a> - koa中间件集合</li>
<li><a href="https://github.com/koajs/static" target="_blank" rel="external">static</a> - 静态文件服务</li>
<li><a href="https://github.com/koajs/static-cache" target="_blank" rel="external">static-cache</a> - 静态文件服务</li>
<li><a href="https://github.com/rkusa/koa-passport" target="_blank" rel="external">koa-passport</a> - 基于Passport的验证</li>
</ul>
<h1 id="ionic"><a href="#ionic" class="headerlink" title="ionic"></a>ionic</h1><ul>
<li><a href="https://github.com/driftyco/ionic" target="_blank" rel="external">ionic</a> - 基于Angular的混合App开发框架</li>
<li><a href="https://github.com/driftyco/ionic-cli" target="_blank" rel="external">ionic-cli</a> - 命令行工具</li>
<li><a href="https://github.com/driftyco/ionicons" target="_blank" rel="external">ionicons</a> - 图标</li>
<li><a href="https://github.com/driftyco/ng-cordova" target="_blank" rel="external">ng-cordova</a> - 用Angular包装好的Cordova插件</li>
</ul>
<p>#MongoDB</p>
<ul>
<li><a href="https://github.com/mongodb/mongo" target="_blank" rel="external">mongo</a> - mongo官方库</li>
<li><a href="https://github.com/Automattic/mongoose" target="_blank" rel="external">mongoose</a> - 数据库操作工具</li>
</ul>
<h1 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h1><ul>
<li><a href="https://github.com/koenbok/Framer" target="_blank" rel="external">Framer</a> - 原型制作工具</li>
</ul>
<h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><ul>
<li><a href="https://github.com/neovim/neovim" target="_blank" rel="external">neovim</a> - 重构的vim</li>
<li><a href="https://github.com/atom/atom" target="_blank" rel="external">atom</a> -  github的编辑器</li>
</ul>
<h1 id="Unix-工具"><a href="#Unix-工具" class="headerlink" title="Unix 工具"></a>Unix 工具</h1><ul>
<li><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">oh-my-zsh</a> - 终端提效工具</li>
<li><a href="https://github.com/b4winckler/macvim" target="_blank" rel="external">macvim</a></li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">awesome</a> - A curated list of awesome lists</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学的技术越来越杂，涉及到前端、后端、客户端，还有老本行设计，写篇文章备份一下。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.forsigner.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://www.forsigner.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>云南之行</title>
    <link href="http://www.forsigner.com/2014/03/24/traval/"/>
    <id>http://www.forsigner.com/2014/03/24/traval/</id>
    <published>2014-03-23T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>终于完成了走出广东省、坐火车、坐飞机的愿望。</p>
<p>这次云南之行，没有艳遇，只有偶遇。经历的是用千万语写不完，唯有用几张图片留点记忆。<br><a id="more"></a></p>
<h3 id="Day-One-大理一日游"><a href="#Day-One-大理一日游" class="headerlink" title="Day One-大理一日游"></a>Day One-大理一日游</h3><p><img src="/images/1.jpg" alt="云南旅游"></p>
<p>洱海</p>
<h3 id="Day-Two-走在去泸沽湖的路上"><a href="#Day-Two-走在去泸沽湖的路上" class="headerlink" title="Day Two-走在去泸沽湖的路上"></a>Day Two-走在去泸沽湖的路上</h3><p><img src="/images/2.jpg" alt="云南旅游"></p>
<p>金沙江</p>
<h3 id="Day-Tree-环泸沽湖"><a href="#Day-Tree-环泸沽湖" class="headerlink" title="Day Tree-环泸沽湖"></a>Day Tree-环泸沽湖</h3><p><img src="/images/3.jpg" alt="云南旅游"></p>
<p>泸沽湖天空</p>
<h3 id="Day-Four-泸沽湖发呆"><a href="#Day-Four-泸沽湖发呆" class="headerlink" title="Day Four-泸沽湖发呆"></a>Day Four-泸沽湖发呆</h3><p><img src="/images/4.jpg" alt="云南旅游"></p>
<p>猪槽船</p>
<h3 id="Day-Five-探索泸沽湖"><a href="#Day-Five-探索泸沽湖" class="headerlink" title="Day Five-探索泸沽湖"></a>Day Five-探索泸沽湖</h3><p><img src="/images/5.jpg" alt="云南旅游"></p>
<p>泸沽湖的海鸥</p>
<h3 id="Day-Six-游丽江古城"><a href="#Day-Six-游丽江古城" class="headerlink" title="Day Six-游丽江古城"></a>Day Six-游丽江古城</h3><p><img src="/images/6.jpg" alt="云南旅游"></p>
<p>丽江古城</p>
<h3 id="Day-Seven-咖啡厅的一天"><a href="#Day-Seven-咖啡厅的一天" class="headerlink" title="Day Seven-咖啡厅的一天"></a>Day Seven-咖啡厅的一天</h3><p><img src="/images/8.jpg" alt="云南旅游"></p>
<p>无间堂多多的面包树</p>
<h3 id="Day-Eight-飞广州"><a href="#Day-Eight-飞广州" class="headerlink" title="Day Eight-飞广州"></a>Day Eight-飞广州</h3><p><img src="/images/9.jpg" alt="云南旅游"></p>
<p>机翼</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于完成了走出广东省、坐火车、坐飞机的愿望。&lt;/p&gt;
&lt;p&gt;这次云南之行，没有艳遇，只有偶遇。经历的是用千万语写不完，唯有用几张图片留点记忆。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://www.forsigner.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="life" scheme="http://www.forsigner.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>在Chrome下调试Sass</title>
    <link href="http://www.forsigner.com/2013/12/06/sass-sourcemap/"/>
    <id>http://www.forsigner.com/2013/12/06/sass-sourcemap/</id>
    <published>2013-12-05T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>用Sass写CSS很爽，但是调试起来却让人头痛，因为CSS文件是编译生成的，所以在Chrome调试时得出的CSS位置信息并没有多大帮助。为了解决Sass的调试难题，也有开发这开发了一些Chrome插件，如<a href="https://chrome.google.com/webstore/detail/sass-inspector/lkofmbmllpgfbnonmnenkiakimpgoamn" target="_blank" rel="external">SASS Inspector</a>, 我体验了一整子，用起来并不是很舒服。<br><a id="more"></a></p>
<p>Google是个好人，为了让开发这更好的使用CSS预处理器，为Chrome增加了一个叫source map功能，利用source map，我们可以在Chrome像调试CSS一样调试Sass,但前提是所用的CSS预处理器需要支持source map</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><strong>首先，要让Chrome启用CSS source maps</strong></p>
<p>CSS source maps默认是启用的，不过你还要启用Auto-reload generated CSS,方法是：打开开发者工具的设置，然后点击General,然后启用Enable CSS source maps 和 Auto-reload generated CSS。</p>
<p><strong>然后，使用Sass或Compass编译CSS</strong></p>
<p><strong>如果直接使用Sass</strong>，因为要支持source map，所以要安装pre版</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ gem install sass -v <span class="string">'&gt;=3.3.0alpha'</span> --pre</div></pre></td></tr></table></figure>
<p>安装好后,就可以编译支持source map的CSS了，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 编译一个style.scss文件</span></div><div class="line">$ sass --watch --sourcemap sass/styles.scss:css/styles.css</div><div class="line"></div><div class="line"><span class="comment"># 编译一个style.scss文件（如果有用到compass）</span></div><div class="line">$ sass --watch --compass --sourcemap sass/styles.scss:css/styles.css </div><div class="line"></div><div class="line"><span class="comment"># 编译整个文件夹里的所有scss文件</span></div><div class="line">$ sass --watch --sourcemap sass/:css/</div></pre></td></tr></table></figure>
<p><strong>如果使用Compass</strong>，为了支持source map，也要要安装pre版</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ gem install compass --pre</div><div class="line"><span class="comment"># 或者</span></div><div class="line">$ gem install compass-sourcemaps --pre</div></pre></td></tr></table></figure>
<p>安装好后,在config.rb中添加<code>sass_options = {:sourcemap =&gt; true}</code>,就可以编译支持source map的CSS了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ compass watch</div></pre></td></tr></table></figure>
<p>最好，把编译好的css引入到的项目中，然后审查元素，奇迹就出现了。</p>
<h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul>
<li><a href="https://developers.google.com/chrome-developer-tools/docs/css-preprocessors?hl=zh-CN" target="_blank" rel="external">Working with CSS Preprocessors</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Sass写CSS很爽，但是调试起来却让人头痛，因为CSS文件是编译生成的，所以在Chrome调试时得出的CSS位置信息并没有多大帮助。为了解决Sass的调试难题，也有开发这开发了一些Chrome插件，如&lt;a href=&quot;https://chrome.google.com/webstore/detail/sass-inspector/lkofmbmllpgfbnonmnenkiakimpgoamn&quot;&gt;SASS Inspector&lt;/a&gt;, 我体验了一整子，用起来并不是很舒服。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://www.forsigner.com/tags/CSS/"/>
    
      <category term="Sass" scheme="http://www.forsigner.com/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 编码风格指南</title>
    <link href="http://www.forsigner.com/2013/09/01/javascript-style-guide/"/>
    <id>http://www.forsigner.com/2013/09/01/javascript-style-guide/</id>
    <published>2013-08-31T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>程序语言的编码风格指南对于一个长期维护的软件而言是非常重要的。本指南是基于“Java语言编码规范”（Code Conventions fo the Java Programming Language）和Crockford的（JavaScript）规范，同时结合了我个人的经验和喜好做了一些改动。</p>
<a id="more"></a>
<h2 id="1-缩进"><a href="#1-缩进" class="headerlink" title="1.缩进"></a>1.缩进</h2><p>每一行的层级由四个空格组成，避免使用制表符（Tab）进行缩进。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-行的长度"><a href="#2-行的长度" class="headerlink" title="2.行的长度"></a>2.行的长度</h2><p>每行长度不应该超过80个字符。如果一行多余80个字符，应当在一个运算符（逗号，加号等）后换行。下一行应当增加两极缩进（8个字符）；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line">doSomething(argument1, argument2, argument3, argument4,</div><div class="line">        argument5);</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：第二行只有四个空格的缩进</span></div><div class="line">doSomething(argument1, argument2, argument3, argument4,</div><div class="line">    argument5);</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：在运算符之前换行</span></div><div class="line">doSomething(argument1, argument2, argument3, argument4</div><div class="line">             ,argument5);</div></pre></td></tr></table></figure>
<h2 id="3-原始值"><a href="#3-原始值" class="headerlink" title="3.原始值"></a>3.原始值</h2><p>字符串应当始终使用单引号(避免使用双引号)且保持一行。避免在字符串中使用斜线另起一行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">'Nicholas'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法： 双引号</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">"Nicholas"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：字符串结束之前换行</span></div><div class="line"><span class="keyword">var</span> longString = <span class="string">'Here is the story, of a man \</span></div><div class="line">named Brady.';</div></pre></td></tr></table></figure>
<p>数字应当使用十进制整数，科学计数法表示整数，十六进制整数，或者十进制浮点小数，小数点前后应当至少保留一位数字。避免使用八进制直接量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> price = <span class="number">10.0</span>;</div><div class="line"><span class="keyword">var</span> price = <span class="number">10.00</span>;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> num = <span class="number">0xA2</span>;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> num = <span class="number">1e23</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：十进制数字以小数点结尾</span></div><div class="line"><span class="keyword">var</span> price = <span class="number">10.</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：十进制数字以小数点开头</span></div><div class="line"><span class="keyword">var</span> price = <span class="number">.1</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：八进制（base 8）写法已废弃</span></div><div class="line"><span class="keyword">var</span> num = <span class="number">010</span>;</div></pre></td></tr></table></figure>
<p>特殊值null除了下述情况下应当避免使用。</p>
<ul>
<li>用来初始化一个变量，这个变量可能被赋值为一个对象。</li>
<li>用来和一个已经初始化的变量比较，这个变量可以是也可以不是一个变量。</li>
<li>当函数的参数期望是对象时，被用作参数传入。</li>
<li>当函数的返回值期望是对象时，被用作返回值传出。</li>
</ul>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> person = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPersion</span>(<span class="params"></span>);</span></div><div class="line"><span class="title">if</span> (<span class="params">persion != null</span>) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：和一个未被初始化的变量比较</span></div><div class="line"><span class="keyword">var</span> persion;</div><div class="line"><span class="keyword">if</span> (persion != <span class="literal">null</span>) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1, arg2, arg3, arg4</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (arg4 != <span class="literal">null</span>) &#123;</div><div class="line">        doSomething(Else);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>避免使用特殊值 undefined。判断一个变量是否定义应当使用typeof操作符。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> variable == <span class="string">'undefined'</span>) &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：使用了undefined直接量</span></div><div class="line"><span class="keyword">if</span> (variable == <span class="literal">undefined</span>) &#123;</div><div class="line">    <span class="comment">// do something;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-运算符间距"><a href="#4-运算符间距" class="headerlink" title="4.运算符间距"></a>4.运算符间距</h2><p>二元运算符前后必须使用一个空格来保持表达式的整洁。操作符包括赋值运算符和逻辑运算符。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> found = (values[i] === item);</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">if</span> (found &amp;&amp; (count &gt; <span class="number">10</span>)) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">    process(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：丢失空格</span></div><div class="line"><span class="keyword">var</span> found = (values[i]===item);</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：丢失空格</span></div><div class="line"><span class="keyword">if</span> (found&amp;&amp;(count&gt;<span class="number">10</span>)) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：丢失空格</span></div><div class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;count; i++) &#123;</div><div class="line">    process(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-括号间距"><a href="#5-括号间距" class="headerlink" title="5.括号间距"></a>5.括号间距</h2><p>当使用括号时，紧接左括号之后和紧接右括号之前不应该有空格。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> found = (values[i] === item);</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">if</span> (found &amp;&amp; (count &gt; <span class="number">10</span>)) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">for</span> (i= <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">    process(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：左括号之后有额外的空格</span></div><div class="line"><span class="keyword">var</span> found = ( values[i] === item);</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：右括号之后有额外的空格</span></div><div class="line"><span class="keyword">if</span> (found &amp;&amp; (count &gt; <span class="number">10</span>) ) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 不好的写法：参数两边有额外的空格</span></div><div class="line"><span class="keyword">for</span> (i= <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">    process( i );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-对象直接量"><a href="#6-对象直接量" class="headerlink" title="6.对象直接量"></a>6.对象直接量</h2><p>对象直接量应当使用如下格式。</p>
<ul>
<li>其实左括号应当同表达式保持同一行。</li>
<li>每个属性的名值对应当保持一个缩进，第一个属性应当在左括号后另起一行。</li>
<li>每个属性的名值对应当使用不用引号的属性名，其后紧跟一个冒号（之前不含空格）,而后是值。</li>
<li>倘若属性值是函数类型，函数体应当在属性名之下另起一行，而且其后均应保留一个空行。</li>
<li>一组相关的属性前后可以插入空行以提升代码的可读性。</li>
<li>结束的右括号应当独占一行。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line"></div><div class="line">    <span class="attr">key1</span>: value1,</div><div class="line"></div><div class="line">    <span class="attr">key2</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//做些什么</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">key3</span>: value3</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：不且当的缩进</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">                <span class="attr">key1</span>: value1,</div><div class="line">                <span class="attr">key2</span>: value2</div><div class="line">            &#125;</div><div class="line">;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：函数体周围缺少空行</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line"></div><div class="line">    <span class="attr">key1</span>: value1,</div><div class="line">    <span class="attr">key2</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//做些什么</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">key3</span>: value3</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>当对象字面量作为函数参数时，如果值是变量，起始花括号应当同函数名在同一行。</p>
<p>所有其余先前列出的规则同样使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line">doSomething(&#123;</div><div class="line">    <span class="attr">key1</span>: value1,</div><div class="line">    <span class="attr">key2</span>: value2</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法： 所有代码在一行上</span></div><div class="line">doSomething(&#123; <span class="attr">key1</span>: value1, <span class="attr">key2</span>: value2 &#125;);</div></pre></td></tr></table></figure>
<h2 id="7-注释"><a href="#7-注释" class="headerlink" title="7.注释"></a>7.注释</h2><p>频繁地使用注释有助于他人理解你的代码。如下情况应当使用注释。</p>
<ul>
<li>代码晦涩难懂。</li>
<li>可能被误认为错误的代码。</li>
<li>必要但不明显的针对特定浏览器的代码。</li>
<li>对于对象、方法或者属性，生成文档是有必要的（使用且当的文档注释）。</li>
</ul>
<h3 id="7-1-单行注释"><a href="#7-1-单行注释" class="headerlink" title="7.1 单行注释"></a>7.1 单行注释</h3><p>单行注释应当来说明一行代码或者一组相关的代码。单行注释可能有三种使用方式。</p>
<ul>
<li>独占一行的注释，用来解释下一行代码。</li>
<li>在代码行的尾部注释，用来解释之前的代码。</li>
<li>多行，用来注释掉一个代码块。</li>
</ul>
<p>这里有一些示例代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 如果代码执行到这里，则表明通过了所有安全性检查</span></div><div class="line">    allowed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：注释之前没有空行</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    <span class="comment">// 如果代码执行到这里，则表明通过了所有安全性检查</span></div><div class="line">    allowed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：错误的缩进</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line"></div><div class="line"><span class="comment">// 如果代码执行到这里，则表明通过了所有安全性检查</span></div><div class="line">    allowed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：这里应当用多行注释</span></div><div class="line"><span class="comment">// 接下来的这段代码非常难，那么，让我详细解释一下</span></div><div class="line"><span class="comment">// 这段代码的作用是首先判断条件是否为真</span></div><div class="line"><span class="comment">// 只有为真时才执行。这里的条件是通过</span></div><div class="line"><span class="comment">// 多个函数计算出来的，在整个会话生命期内</span></div><div class="line"><span class="comment">// 这个值是可以修改的</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    <span class="comment">// 如果代码执行到这里，则表明通过了所有安全性检查</span></div><div class="line">    allowed();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于代码尾单行注释的情况，应确保代码尾同注释之间至少一个缩进。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> result = something + somethingElse; <span class="comment">// somethingElse will never be null</span></div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：代码和注释间没有足够的空格</span></div><div class="line"><span class="keyword">var</span> result = something + somethingElse;<span class="comment">// somethingElse will never be null</span></div></pre></td></tr></table></figure>
<p>注释一个代码块时在连续多行使用单行注释是唯一可以接受的情况。多行注释不应当在这种情况下使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="comment">// if (condition) &#123;</span></div><div class="line"><span class="comment">//     doSomething();</span></div><div class="line"><span class="comment">//     thenDoSomethingElse();</span></div><div class="line"><span class="comment">// &#125;</span></div></pre></td></tr></table></figure>
<h3 id="7-2-多行注释"><a href="#7-2-多行注释" class="headerlink" title="7.2 多行注释"></a>7.2 多行注释</h3><p>多行注释应当在代码需要更多文字去解释的时候使用。每个多行注释都至少有如下三行。</p>
<ol>
<li>首行仅仅包括/*注释开始。该行不应当有其他文字。</li>
<li>接下来的行以*开头并保持左对齐。这些行可以有文字描述。</li>
<li>最后一行以*/开头并同先前行保持对齐。也不应该有其他文字。</li>
</ol>
<p>多行注释的手行应当保持同它描述代码的相同层次缩进。后续的每行应当有同样层次的缩进并附加一个空格（为了适当保持*字符的对齐）。对每一个多行代码之前应预留一个空格。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 如果代码执行到这里</div><div class="line">     * 说明通过了所有的安全检测</div><div class="line">     */</div><div class="line">    allowed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：注释之前无空行</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 如果代码执行到这里</div><div class="line">     * 说明通过了所有的安全检测</div><div class="line">     */</div><div class="line">    allowed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：星号后没有空格</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     *如果代码执行到这里</div><div class="line">     *说明通过了所有的安全检测</div><div class="line">     */</div><div class="line">    allowed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：错误的缩进</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 如果代码执行到这里</div><div class="line"> * 说明通过了所有的安全检测</div><div class="line"> */</div><div class="line">    allowed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：代码尾部注释不要用多行注释格式</span></div><div class="line"><span class="keyword">var</span> result = something + somethingElse; <span class="comment">/* somethingElse will never be null */</span></div></pre></td></tr></table></figure>
<h3 id="7-3-注释声明"><a href="#7-3-注释声明" class="headerlink" title="7.3 注释声明"></a>7.3 注释声明</h3><p>注释有时候也可以用来给一段代码声明额外的信息。这些声明的格式以单个单词打头并紧跟一个双引号。可使用的声明如下。</p>
<h4 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h4><p>说明代码还未完成。应当包含下一步要做的事情。</p>
<h4 id="HACK"><a href="#HACK" class="headerlink" title="HACK"></a>HACK</h4><p>表明代码实现走了一个捷径。应当包含为何使用hack的原因。这也可能表明该问题可能会有更好的解决办法。</p>
<h4 id="XXX"><a href="#XXX" class="headerlink" title="XXX"></a>XXX</h4><p>说明代码是有问题的并应当尽快修复。</p>
<h4 id="FIXME"><a href="#FIXME" class="headerlink" title="FIXME"></a>FIXME</h4><p>说明代码是有问题的并应尽快修复。重要行略次于XXX。</p>
<h4 id="REVIEW"><a href="#REVIEW" class="headerlink" title="REVIEW"></a>REVIEW</h4><p>说明代码任何可能的改动都需要评审。</p>
<p>这些声明可能在一行或多行注释中使用，并且应当遵循一般注释类型相同的格式规则。</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="comment">// TODO：我希望找到一种更快捷的方式</span></div><div class="line">doSomething();</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="comment">/*</span></div><div class="line"> * HACK：不得不针对IE做的特殊处理。我计划后续有时间时</div><div class="line"> * 重写这部分。这些代码可能需要在v1.2版本之前替换掉</div><div class="line"> */</div><div class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="comment">// REVIEW：有更好的方法吗？</span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：注释声明空格不正确</span></div><div class="line"><span class="comment">// TODO： 我希望找到一种更快捷的方式</span></div><div class="line">doSomething();</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：代码和注释应当保持同样的缩进</span></div><div class="line">    <span class="comment">// REVIEW：有更好的方法吗？</span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="8-声明变量"><a href="#8-声明变量" class="headerlink" title="8.声明变量"></a>8.声明变量</h2><p>所有的变量在使用前应当事先定义。变量定义应当放在函数开头，使用一个var表达式每行一个变量。除了首行，所有行都应当多一层缩进以使变量名能够垂直方向对齐。变量定义时应当初始化，并赋值操作符应当保持一直的缩进。初始化的变量应当在未初始化变量之前。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">10</span>,</div><div class="line">    name = <span class="string">'Nicholas'</span>,</div><div class="line">    found = <span class="literal">false</span>,</div><div class="line">    empty;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：不恰当的初始化赋值</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">10</span>,</div><div class="line">   name = <span class="string">'Nicholas'</span>,</div><div class="line">   found= <span class="literal">false</span>,</div><div class="line">   empty;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：错误缩进</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">10</span>,</div><div class="line">name = <span class="string">'Nicholas'</span>,</div><div class="line">found = <span class="literal">false</span>,</div><div class="line">empty;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：多个定于写在一行</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">10</span>, name = <span class="string">'Nicholas'</span>,</div><div class="line">    found = <span class="literal">false</span>, empty;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：为初始化的变量放在最前边</span></div><div class="line"><span class="keyword">var</span> empty,</div><div class="line">    count = <span class="number">10</span>,</div><div class="line">    name = <span class="string">'Nicholas'</span>,</div><div class="line">    found = <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：多个var表达式</span></div><div class="line"><span class="keyword">var</span> empty,</div><div class="line">    count = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> name = <span class="string">'Nicholas'</span>,</div><div class="line">    found = <span class="literal">false</span>;</div></pre></td></tr></table></figure>
<h2 id="9-函数声明"><a href="#9-函数声明" class="headerlink" title="9.函数声明"></a>9.函数声明</h2><p>函数应当在使用前提前定义。一个不是作为方法的函数（也就是说没有作为一个对象的属性）应当使用函数定义的格式（不是函数表达式和Function构造格式）。函数名和开始圆括号之间不应当有空格。结束的圆括号和右边的花括号之间应该留一个空格。右侧的花括号应当同function关键字保持同一行。开始和结束括号之间不应该有空格。参数名之间应当在逗号之后保留一个空格。函数体应当保持一级缩进。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1, arg2</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arg1 + arg2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：第一行不恰当的空格</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span> (<span class="params">arg1, arg2</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arg1 + arg2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：函数表达式</span></div><div class="line"><span class="keyword">var</span> doSomething = <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arg1 + arg2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：右侧花括号不对</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1, arg2</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> arg1 + arg2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 错误的写法：使用了Function构造器</span></div><div class="line"><span class="keyword">var</span> doSomething = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'arg1'</span>, <span class="string">'arg2'</span>, <span class="keyword">return</span> arg1 + arg2);</div></pre></td></tr></table></figure>
<p>其他函数内部定义函数应当在var语句后立即定义。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> count = <span class="number">10</span>,</div><div class="line">        name = <span class="string">'Nicholas'</span>,</div><div class="line">        found = <span class="literal">false</span>,</div><div class="line">        empty;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 代码</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 调用inner()的代码</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：inner函数的定义先于变量</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 代码</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> count = <span class="number">10</span>,</div><div class="line">        name = <span class="string">'Nicholas'</span>,</div><div class="line">        found = <span class="literal">false</span>,</div><div class="line">        empty;</div><div class="line"></div><div class="line">    <span class="comment">// 调用inner()的代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>匿名函数可能作为方法赋值给对象，或者作为其他函数的参数。function关键字同开始括号之间不应有空格。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line">object.method = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 代码</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：不正确的空格</span></div><div class="line">object.method = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 代码</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>立即被调用的函数应当在函数调用的外层用圆括号包裹。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> value = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 函数体</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">message</span>: <span class="string">'Hi'</span></div><div class="line">    &#125;</div><div class="line">&#125;());</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：函数调用外层没有用圆括号包裹</span></div><div class="line"><span class="keyword">var</span> value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 函数体</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">message</span>: <span class="string">'Hi'</span></div><div class="line">    &#125;</div><div class="line">&#125;();</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：圆括号的位置不当</span></div><div class="line"><span class="keyword">var</span> value = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 函数体</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">message</span>: <span class="string">'Hi'</span></div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h2 id="10-命名"><a href="#10-命名" class="headerlink" title="10.命名"></a>10.命名</h2><p>变量和函数在命名时应当小心。命名应仅限与数字字母字符，某些情况也可以使用下划线。最好不要在任何命名中使用美元（$）或反斜杠（\）。</p>
<p>变量命名应当采用驼峰命名格式，首字母小写，每个单词首字母大写。变量名的第一个单词应是一个名词（而非动词），以避免同函数混淆。不要在变量命名中使用下划线。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> accountNumber = <span class="string">'8401-1'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：大些字母开头</span></div><div class="line"><span class="keyword">var</span> AccountNumber = <span class="string">'8401-1'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：使用下划线</span></div><div class="line"><span class="keyword">var</span> account_number = <span class="string">'8401-1'</span>;</div></pre></td></tr></table></figure>
<p>函数命名也应当采用驼峰命名格式。函数名的第一个单词应当是动词（而非名词）来避免同变量混淆。函数名中最好不要使用下划线。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 代码</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：大些字母开头</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 代码</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：名词开头</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">car</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 代码</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：使用下划线</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_something</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造函数——通过new运算符创建新对象的函数——也应当以驼峰格式命名并且首字母大写。构造函数名称应一非动词开头，因为new代表这创建一个对象实例的操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 代码</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：小字母开头</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myObject</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 代码</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：使用下划线</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">My_Object</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 代码</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：动词开头</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">My_Object</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>常量（值不会被改变的变量）的命名应当是所有字母大写，不同单词之间用单个下划线隔开。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> TOTAL_COUNT = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：驼峰形式</span></div><div class="line"><span class="keyword">var</span> totalCount = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：混合形式</span></div><div class="line"><span class="keyword">var</span> total_COUNT= <span class="number">10</span>;</div></pre></td></tr></table></figure>
<p>对象的属性同变量的同命名规则相同。对象的方法同函数的命名规则相同。如果属性或方法是私有的，应当在之前加一个下划线。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">    <span class="attr">_count</span>: <span class="number">10</span>,</div><div class="line"></div><div class="line">    <span class="attr">_getCount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._count;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="11-严格模式"><a href="#11-严格模式" class="headerlink" title="11.严格模式"></a>11.严格模式</h2><p>严格模式应当仅限在函数内部使用，千万不要在全局使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 不好的写法：全局使用严格模式</span></div><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 代码</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 代码</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你期望在多个函数中使用严格模式而不需要多次声明“use<br>strict”，可以使用立刻被调用的函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 代码</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomethingElse</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 代码</span></div><div class="line">    &#125;</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h2 id="12-赋值"><a href="#12-赋值" class="headerlink" title="12.赋值"></a>12.赋值</h2><p>当给变量赋值时，如果右侧是含有比较语句的表达式，需要用括号包裹。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> flag = (i &lt; count);</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：遗漏括号</span></div><div class="line"><span class="keyword">var</span> flag = i &lt; count;</div></pre></td></tr></table></figure>
<h2 id="13-等号运算符"><a href="#13-等号运算符" class="headerlink" title="13.等号运算符"></a>13.等号运算符</h2><p>使用===（严格相等）和！==（严格不相等）代替==（相等）和！=（不等）来避免弱类型转换错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> same =(a === b);</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：使用==</span></div><div class="line"><span class="keyword">var</span> same =(a == b);</div></pre></td></tr></table></figure>
<h2 id="14-三元操作符"><a href="#14-三元操作符" class="headerlink" title="14.三元操作符"></a>14.三元操作符</h2><p>三元运算应当仅仅用在条件赋值语句中，而不要作为if语句的替代品。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的方法</span></div><div class="line"><span class="keyword">var</span> value = condition ? value1 : value2;</div><div class="line"></div><div class="line"><span class="comment">// 不好的方法</span></div><div class="line"><span class="keyword">var</span> condition ? doSomething() : doSomethingElse();</div></pre></td></tr></table></figure>
<h2 id="15-语句"><a href="#15-语句" class="headerlink" title="15.语句"></a>15.语句</h2><h3 id="15-1-简单语句"><a href="#15-1-简单语句" class="headerlink" title="15.1 简单语句"></a>15.1 简单语句</h3><p>每一行最多只包含一条语句。所有简单语句都应该以分号（;）结束。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line">count++;</div><div class="line">a = b;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line">count++; a = b;</div></pre></td></tr></table></figure>
<h3 id="15-2-返回语句"><a href="#15-2-返回语句" class="headerlink" title="15.2 返回语句"></a>15.2 返回语句</h3><p>返回语句当返回一个值的时候不应该使用圆括号包裹，除非在某些情况下这么做可以让返回值更容易理解。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">return</span>;</div><div class="line"><span class="keyword">return</span> collection.size();</div><div class="line"><span class="keyword">return</span> (size &gt; <span class="number">0</span> ? size : defaultSize);</div></pre></td></tr></table></figure>
<h3 id="15-3-复合语句"><a href="#15-3-复合语句" class="headerlink" title="15.3 复合语句"></a>15.3 复合语句</h3><p>复合语句是大括号括起来的语句列表。</p>
<ul>
<li>括起来的语句应当较复合语句多缩进一个层级。</li>
<li>开始的大括号应当在复合语句所在行的末尾；结束的大括号应当独占一行且同复合语句的开始保持同样的缩进。</li>
<li>当语句是控制结构的一部分时，诸如if或者for语句，所有语句都需要用大括号括起来，也包括单个单词。zh这个约定使得我们更方便地添加语句而不用担心忘记加括号而引起bug。</li>
<li>像if一样的语句开始的关键字，其后应该紧跟一个空格，起始大括号应当在空格之后。</li>
</ul>
<h3 id="15-4-if-语句"><a href="#15-4-if-语句" class="headerlink" title="15.4 if 语句"></a>15.4 if 语句</h3><p>if语句应当是下面的格式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    statments</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    statments</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    statments</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    statments</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition) &#123;</div><div class="line">    statments</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    statments</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>绝不允许在if语句中省略花括号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：不且当的空格</span></div><div class="line"><span class="keyword">if</span>(condition)&#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：遗漏花括号</span></div><div class="line"><span class="keyword">if</span> (condition)</div><div class="line">    doSomething();</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：所有代码在一行</span></div><div class="line"><span class="keyword">if</span> (condition) &#123; doSomething(); &#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：所有代码在一行且没有花括号</span></div><div class="line"><span class="keyword">if</span> (condition) doSomething();</div></pre></td></tr></table></figure>
<h3 id="15-5-for-语句"><a href="#15-5-for-语句" class="headerlink" title="15.5 for 语句"></a>15.5 for 语句</h3><p>for类型的语句应是下面的格式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (initialization; condition; update) &#123;</div><div class="line">    statments</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (variable <span class="keyword">in</span> object) &#123;</div><div class="line">    statments</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>for语句的初始化不应当有变量声明。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> i,</div><div class="line">    len;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = <span class="number">10</span>; i &lt; len; i++) &#123;</div><div class="line">    <span class="comment">// 代码</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：初始化时候声明变量</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="number">10</span>; i &lt; len; i++) &#123;</div><div class="line">    <span class="comment">// 代码</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：初始化的时候声明变量</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> object) &#123;</div><div class="line">    <span class="comment">// code</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当使用for-in语句时，记得使用hasOwnProperty()进行双重检查来过滤出对象的成员。</p>
<h3 id="15-6-while-语句"><a href="#15-6-while-语句" class="headerlink" title="15.6 while 语句"></a>15.6 while 语句</h3><p>while类的语句应当是下面的格式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">while</span> (condition) &#123;</div><div class="line">    statments</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="15-7-do-语句"><a href="#15-7-do-语句" class="headerlink" title="15.7 do 语句"></a>15.7 do 语句</h3><p>do类的语句应当是下面格式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    statments</div><div class="line">&#125; <span class="keyword">while</span> (condition);</div></pre></td></tr></table></figure>
<h3 id="15-8-switch-语句"><a href="#15-8-switch-语句" class="headerlink" title="15.8 switch 语句"></a>15.8 switch 语句</h3><p>switch类的语句应当是下面格式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">switch</span> (expression) &#123;</div><div class="line">    <span class="keyword">case</span> expression:</div><div class="line">        statments</div><div class="line"></div><div class="line">    defaul:</div><div class="line">        statments</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>switch下的每一个case都应当保持一个缩进。除第一个之外包括default在内的每一个case都应当在之前保持一个空行。每一个语句（除了default）都应当以break、return、throw结尾，或者用一行注释表示跳过。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">switch</span> (value) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        <span class="comment">/* falls through */</span></div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        doSomething();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">    defaul:</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'This should not happen'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果一个switch语句不包含default情况，应应用一行注释代替。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">switch</span> (value) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        <span class="comment">/* falls through */</span></div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        doSomething();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 没有default</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="15-9-ty-语句"><a href="#15-9-ty-语句" class="headerlink" title="15.9 ty 语句"></a>15.9 ty 语句</h3><p>try类语句应当格式如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    statments</div><div class="line">&#125; <span class="keyword">catch</span> (variable) &#123;</div><div class="line">    statments</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    statments</div><div class="line">&#125; <span class="keyword">catch</span> (variable) &#123;</div><div class="line">    statments</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    statments</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="16-留白"><a href="#16-留白" class="headerlink" title="16.留白"></a>16.留白</h2><p>在逻辑相关的代码之间添加空行可以提高代码的可读性。</p>
<p>两行空行仅限在如下情况中使用。</p>
<ul>
<li>在不同的源码文件之间。</li>
<li>在类和接口定义之间。</li>
</ul>
<p>单行空行仅限在如下情况中使用。</p>
<ul>
<li>方法之间。</li>
<li>方法中局部变量和第一行语句之间。</li>
<li>多行或者单行注释之前。</li>
<li>方法中逻辑代码块之间以提升代码的可读性。</li>
</ul>
<p>空格应在如下情况中使用。</p>
<ul>
<li>关键词后跟括号的情况应当用空格隔开。</li>
<li>参数列表中逗号之后应当保留一个空格。</li>
<li><p>所有的除了点（.）之外的二元运算符，其操作数都应当用空格隔开。单目运算符的操作数之间不应该用<br>空白隔开，诸如一元减号，递增（++），递减（–）。</p>
</li>
<li><p>for语句中的表达方式之间应当用空格号隔开。</p>
</li>
</ul>
<h2 id="17-需要避免的"><a href="#17-需要避免的" class="headerlink" title="17.需要避免的"></a>17.需要避免的</h2><ul>
<li>切勿使用像String一类的原始包装类型创建新的对象。</li>
<li>避免使用eval（）。</li>
<li>避免使用with语句。该语句在严格模式中不复存在，可能在未来的ECMAScript标准中也将去除。</li>
</ul>
<p>数字应当使用十进制整数，科学计数法表示整数，十六进制整数，或者十进制浮点小数，小数点前后应当至少保留一位数字。避免使用八进制直接量。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序语言的编码风格指南对于一个长期维护的软件而言是非常重要的。本指南是基于“Java语言编码规范”（Code Conventions fo the Java Programming Language）和Crockford的（JavaScript）规范，同时结合了我个人的经验和喜好做了一些改动。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.forsigner.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>一些Mac小技巧</title>
    <link href="http://www.forsigner.com/2013/08/29/mac-skills/"/>
    <id>http://www.forsigner.com/2013/08/29/mac-skills/</id>
    <published>2013-08-28T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac虽然好用，但是它也并不完美，它的功能并不能满足所有人各式各样的需求，作为一枚码农，当然我也有自己的需求，下面是作为程序员会用到的一些Mac小技巧，在这里记录一下。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ defaults write com.apple.finder AppleShowAllFiles -bool true  <span class="comment"># 显示掩藏文件</span></div><div class="line">$ defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES  <span class="comment"># 在Finder标题栏上显示完整路径</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac虽然好用，但是它也并不完美，它的功能并不能满足所有人各式各样的需求，作为一枚码农，当然我也有自己的需求，下面是作为程序员会用到的一些Mac小技巧，在这里记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.forsigner.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Mac" scheme="http://www.forsigner.com/tags/Mac/"/>
    
      <category term="tick" scheme="http://www.forsigner.com/tags/tick/"/>
    
  </entry>
  
  <entry>
    <title>Unix 系统下常用命令</title>
    <link href="http://www.forsigner.com/2013/08/23/Unix-command/"/>
    <id>http://www.forsigner.com/2013/08/23/Unix-command/</id>
    <published>2013-08-22T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">ls -l  <span class="comment"># 列出文件夹内容(详情模式)</span></div><div class="line">ls -al  <span class="comment"># 列出文件夹内容(包括隐藏文件)</span></div><div class="line">touch &lt;file&gt;  <span class="comment"># 新建文件</span></div><div class="line">mkdir &lt;dir&gt;  <span class="comment"># 新建文件夹</span></div><div class="line">rm [-rf] &lt;file/dir&gt;  <span class="comment"># 删除文件</span></div><div class="line">mv &lt;source&gt; &lt;target&gt;  <span class="comment"># 修改文件名字</span></div><div class="line">cp [-R] &lt;source&gt; &lt;target&gt;  <span class="comment"># 复制文件</span></div><div class="line">ln -s  &lt;source&gt; &lt;target&gt;  <span class="comment"># 建立符号链接</span></div><div class="line"></div><div class="line">rar x &lt;file&gt; <span class="comment">#解压</span></div><div class="line">tar -zxvf &lt;file&gt;</div><div class="line">unzip  &lt;file&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">which &lt;something&gt;  <span class="comment"># 搜索可执行文件</span></div><div class="line">whereis &lt;something&gt;  <span class="comment"># 搜索文件</span></div><div class="line">locate &lt;something&gt;  <span class="comment"># 搜索文件</span></div><div class="line"></div><div class="line">find &lt;dir&gt; &lt;condiction&gt; &lt;action&gt;</div><div class="line">find &lt;dir&gt; -name <span class="string">"*.jpg"</span> <span class="comment"># 查找文件</span></div><div class="line">find . -name <span class="string">"*~"</span>  | xargs rm -rf  <span class="comment"># 删除当前文件夹及子文件夹下的某些文件</span></div><div class="line"></div><div class="line"></div><div class="line">grep -nr <span class="string">'xxx'</span> &lt;dir&gt;  <span class="comment"># 查找包含字符串"xxx"的文件</span></div></pre></td></tr></table></figure>
<h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"></div><div class="line">sudo chown -R &lt;owner&gt;:&lt;group&gt;  &lt;file&gt;  <span class="comment"># 修改表文件ownership/group</span></div><div class="line"></div><div class="line">sudo chmod <span class="number">600</span> &lt;file&gt;  <span class="comment"># 只有所有者有读和写的权限</span></div><div class="line">sudo chmod <span class="number">644</span> &lt;file&gt;  <span class="comment"># 所有者有读和写的权限</span></div><div class="line">sudo chmod <span class="number">700</span> &lt;file&gt;  <span class="comment"># 只有所有者有读和写以及执行的权限</span></div><div class="line">sudo chmod <span class="number">666</span> &lt;file&gt;  <span class="comment"># 每个人都有读和写的权限</span></div><div class="line">sudo chmod <span class="number">777</span> &lt;file&gt;  <span class="comment"># 开放全部权限</span></div></pre></td></tr></table></figure>
<h2 id="Mac-OS-x"><a href="#Mac-OS-x" class="headerlink" title="Mac OS x"></a>Mac OS x</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">brew info &lt;package&gt;</div><div class="line">brew doctor &lt;package&gt;</div><div class="line">brew install &lt;package&gt;  <span class="comment"># 安装</span></div><div class="line">brew uninstall &lt;package&gt;</div><div class="line">brew list</div><div class="line">brew update</div><div class="line">brew upgrade</div><div class="line">brew cleanup</div></pre></td></tr></table></figure>
<h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"></div><div class="line">aptitude search <span class="string">'~i ^vim'</span> <span class="comment">#搜索文件</span></div><div class="line">sudo apt-get install &lt;package&gt;  <span class="comment"># 安装软件</span></div><div class="line">sudo aptitude purge &lt;package&gt;  <span class="comment"># ubuntu卸载软件</span></div><div class="line">sudo apt-get remove &lt;package&gt;  <span class="comment"># ubuntu卸载软件</span></div><div class="line">apt-get remove --purge &lt;package&gt;  <span class="comment"># 卸载并清除配置</span></div><div class="line">sudo  dpkg  -i  &lt;package.deb&gt;  <span class="comment"># 安装软件</span></div></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"></div><div class="line">cat  <span class="comment"># 由第一行开始显示档案内容</span></div><div class="line">tac  <span class="comment"># 从最后一行开始显示，可以看出 tac 是 cat 的反向显示！</span></div><div class="line">nl  <span class="comment"># 显示的时候，随便输出行号！</span></div><div class="line">more  <span class="comment"># 一页一页的显示档案内容</span></div><div class="line">less  <span class="comment"># 与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页！</span></div><div class="line">head  <span class="comment"># 查看头几行</span></div><div class="line">tail  <span class="comment"># 查看尾几行</span></div><div class="line"></div><div class="line"></div><div class="line">sed -i <span class="string">"s/oldstring/newstring/g"</span> `grep oldstring -rl yourdir` <span class="comment">#替换多文件的字符串</span></div><div class="line"></div><div class="line">ctrl-a  <span class="comment"># 在终端中跳到命令最前面</span></div><div class="line">ctrl-e  <span class="comment"># 在终端中跳到命令最后面</span></div><div class="line"></div><div class="line">ctrl-x e <span class="comment"># 打开默认编辑器</span></div><div class="line">man &lt;something&gt; <span class="comment">#帮助</span></div><div class="line">!!  <span class="comment"># 上一条命令</span></div><div class="line">cd -  <span class="comment"># 回到上一次目录</span></div><div class="line">pwd  <span class="comment"># 查看路径</span></div><div class="line"></div><div class="line">ps -A | grep -i apache2  <span class="comment"># 查找相关进程</span></div><div class="line">kill <span class="number">1285</span> (to kill the process apache2)  <span class="comment"># 杀死进程</span></div><div class="line"></div><div class="line">cal  <span class="comment"># 日历</span></div><div class="line">date  <span class="comment"># 日期</span></div><div class="line">bc  <span class="comment"># 计算器</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件操作&quot;&gt;&lt;a href=&quot;#文件操作&quot; class=&quot;headerlink&quot; title=&quot;文件操作&quot;&gt;&lt;/a&gt;文件操作&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ls -l  &lt;span class=&quot;comment&quot;&gt;# 列出文件夹内容(详情模式)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ls -al  &lt;span class=&quot;comment&quot;&gt;# 列出文件夹内容(包括隐藏文件)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;touch &amp;lt;file&amp;gt;  &lt;span class=&quot;comment&quot;&gt;# 新建文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mkdir &amp;lt;dir&amp;gt;  &lt;span class=&quot;comment&quot;&gt;# 新建文件夹&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm [-rf] &amp;lt;file/dir&amp;gt;  &lt;span class=&quot;comment&quot;&gt;# 删除文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mv &amp;lt;source&amp;gt; &amp;lt;target&amp;gt;  &lt;span class=&quot;comment&quot;&gt;# 修改文件名字&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp [-R] &amp;lt;source&amp;gt; &amp;lt;target&amp;gt;  &lt;span class=&quot;comment&quot;&gt;# 复制文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ln -s  &amp;lt;source&amp;gt; &amp;lt;target&amp;gt;  &lt;span class=&quot;comment&quot;&gt;# 建立符号链接&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rar x &amp;lt;file&amp;gt; &lt;span class=&quot;comment&quot;&gt;#解压&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tar -zxvf &amp;lt;file&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;unzip  &amp;lt;file&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.forsigner.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Unix" scheme="http://www.forsigner.com/tags/Unix/"/>
    
  </entry>
  
  <entry>
    <title>常用git命令</title>
    <link href="http://www.forsigner.com/2013/08/22/git-command/"/>
    <id>http://www.forsigner.com/2013/08/22/git-command/</id>
    <published>2013-08-21T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ git init  <span class="comment">#创建新的 $ git 仓库</span></div><div class="line">$ git <span class="built_in">clone</span> /path/to/repository  <span class="comment">#创建一个本地仓库的克隆版本</span></div><div class="line">$ git <span class="built_in">clone</span> username@host:/path/to/repository  <span class="comment">#克隆远端服务器上的仓库</span></div><div class="line">$ git status  <span class="comment">#查看状态</span></div><div class="line">$ git add &lt;file&gt;  <span class="comment">#把新文件或修改添加到缓存区(index)</span></div><div class="line">$ git add .  <span class="comment">#添加全部</span></div><div class="line">$ git commit -m <span class="string">"代码提交信息"</span>  <span class="comment">#把改动提交到 HEAD，但还没提交到到的远端仓库</span></div><div class="line">$ git pull  <span class="comment">#从远程获取最新版本并merge到本地</span></div><div class="line">$ git push  <span class="comment">#将改动提交到远端仓库</span></div><div class="line">$ git <span class="built_in">log</span>  <span class="comment">#查看记录</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ git checkout -b &lt;branch&gt;  <span class="comment">#新建分支</span></div><div class="line">$ git checkout &lt;branch&gt;  <span class="comment">#切换到某个分支</span></div><div class="line">$ git diff &lt;nowbranch&gt; &lt;otherbranch&gt;  <span class="comment">#查看两个分支的异同</span></div><div class="line">$ git merge &lt;otherbranch&gt;  <span class="comment">#合并当前分支和branch分支</span></div><div class="line">$ git branch <span class="_">-d</span> &lt;branch&gt;  <span class="comment">#删除分支</span></div><div class="line">$ git branch -D &lt;branch&gt;  <span class="comment"># 强制删除分支</span></div><div class="line">$ git push origin --delete &lt;branch&gt;  <span class="comment"># 删除一个远程分支</span></div></pre></td></tr></table></figure>
<h2 id="撒销操作"><a href="#撒销操作" class="headerlink" title="撒销操作"></a>撒销操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ git revert HEAD  <span class="comment">#撤销最近一次提交</span></div><div class="line">$ git rever HEAD^  <span class="comment">#撤销“上上次”提交</span></div><div class="line">$ git rever HEAD &lt;<span class="built_in">hash</span>&gt;  <span class="comment">#撤销指定的提交</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># reset命令把当前分支指向另一个位置，并且有选择的变动工作目录和索引。</span></div><div class="line"><span class="comment"># 也用来在从历史仓库中复制文件到索引，而不动工作目录。</span></div><div class="line">$ git reset HEAD  <span class="comment">#回到上次提交的状态(last commited state)</span></div><div class="line">$ git reset HEAD^($ git reset --hard HEAD~1)  <span class="comment">#回到上上次（倒数第二次）提交的状态</span></div><div class="line">$ git reset HEAD~2  <span class="comment">#回退两个commit</span></div><div class="line">$ git reset HEAD~3  <span class="comment">#回退三个commit</span></div><div class="line">$ git reset hard &lt;<span class="built_in">hash</span>&gt;  <span class="comment">#回滚到指定的版本</span></div><div class="line"></div><div class="line"><span class="comment">#如果用--hard选项，那么工作目录也更新。</span></div><div class="line">$ git reset --hard HEAD  <span class="comment">#回到上次提交的状态(last commited state)</span></div><div class="line">$ git reset --hard HEAD^($ git reset --hard HEAD~1)  <span class="comment">#回到上上次（倒数第二次）提交的状态</span></div><div class="line">$ git reset --hard HEAD~2  <span class="comment">#回退两个commit</span></div><div class="line">$ git reset --hard HEAD~3  <span class="comment">#回退三个commit</span></div><div class="line">$ git reset --hard &lt;<span class="built_in">hash</span>&gt;  <span class="comment">#回滚到指定的版本</span></div><div class="line"></div><div class="line">$ git commit --amend <span class="comment"># 修改最后一次提交</span></div></pre></td></tr></table></figure>
<h2 id="Checkout的使用"><a href="#Checkout的使用" class="headerlink" title="Checkout的使用"></a>Checkout的使用</h2><p>checkout命令用于从历史提交（或者暂存区域）中拷贝文件到工作目录，也可用于切换分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ git checkout &lt;file&gt; ($ git checkout HEAD  &lt;file&gt;)  <span class="comment">#从暂存区域中拷贝内容</span></div><div class="line">$ git checkout HEAD~2 foo.c  <span class="comment">#将会提交节点HEAD~2中的foo.c复制到工作目录并且加到暂存区域中。</span></div><div class="line"></div><div class="line">$ git checkout -b &lt;branch&gt;  <span class="comment">#新建分支</span></div><div class="line">$ git checkout &lt;branch&gt;  <span class="comment">#切换到某个分支</span></div><div class="line">$ git checkout &lt;tagname&gt;  <span class="comment">#切换到某个版本</span></div></pre></td></tr></table></figure>
<h2 id="rm的使用"><a href="#rm的使用" class="headerlink" title="rm的使用"></a>rm的使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"></div><div class="line">$ git rm [<span class="_">-f</span> | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--] &lt;file&gt;</div><div class="line"></div><div class="line">$ git rm &lt;file&gt;  <span class="comment">#把文件从 Git仓库中删除</span></div><div class="line">$ git rm --cached  &lt;file&gt; <span class="comment">#移除跟踪但不删除文件</span></div></pre></td></tr></table></figure>
<h2 id="push的使用"><a href="#push的使用" class="headerlink" title="push的使用"></a>push的使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ git push origin &lt;branch&gt;</div></pre></td></tr></table></figure>
<h2 id="rebase的使用"><a href="#rebase的使用" class="headerlink" title="rebase的使用"></a>rebase的使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ git rebase &lt;branch&gt; <span class="comment">#衍合是合并命令的另一种选择</span></div></pre></td></tr></table></figure>
<h2 id="stash的使用"><a href="#stash的使用" class="headerlink" title="stash的使用"></a>stash的使用</h2><p>经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是$ git stash命令。</p>
<p>“‘储藏”“可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ git stash  <span class="comment">#暂存临时代码</span></div><div class="line">$ git stash list  <span class="comment">#查看所有的搁置版本</span></div><div class="line">$ git stash aplly  <span class="comment">#找回之前搁置的改动</span></div><div class="line">$ git stash apply stash@&#123;1&#125;  <span class="comment">#就可以将你指定版本号为stash@&#123;1&#125;的工作取出来</span></div><div class="line">$ git stash pop  <span class="comment">#从Git栈中读取最近一次保存的内容，恢复工作区的相关内容</span></div><div class="line">$ git stash clear <span class="comment">#删除所有stash</span></div></pre></td></tr></table></figure>
<h2 id="git-config"><a href="#git-config" class="headerlink" title="$ git config"></a>$ git config</h2><p>忽略文件权限检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ git config --add core.filemode <span class="literal">false</span></div></pre></td></tr></table></figure>
<h2 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ gitk  <span class="comment">#内建的图形化$ git</span></div><div class="line">$ git config color.ui <span class="literal">true</span>  <span class="comment">#彩色的$ git输出</span></div><div class="line">$ git config format.pretty oneline  <span class="comment">#显示历史记录时，只显示一行信息</span></div><div class="line">$ git add -i  <span class="comment">#交互地添加文件至缓存区</span></div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">git - 简易指南</a></li>
<li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="external">图解Git</a></li>
<li><a href="http://gitbook.liuhui998.com/index.html" target="_blank" rel="external">Git Community Book 中文版</a></li>
<li><a href="http://git-scm.com/book/zh" target="_blank" rel="external">git book中文版</a></li>
<li><a href="https://www.kernel.org/pub/software/scm/git/docs/everyday.html" target="_blank" rel="external">Everyday GIT With 20 Commands Or So</a></li>
<li><a href="https://www.kernel.org/pub/software/scm/git/docs/gittutorial.html" target="_blank" rel="external">gittutorial</a></li>
<li><a href="https://www.kernel.org/pub/software/scm/git/docs/" target="_blank" rel="external">git Manual Page</a></li>
<li><a href="https://www.kernel.org/pub/software/scm/git/docs/user-manual.html" target="_blank" rel="external">Git User’s Manual</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git init  &lt;span class=&quot;comment&quot;&gt;#创建新的 $ git 仓库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; /path/to/repository  &lt;span class=&quot;comment&quot;&gt;#创建一个本地仓库的克隆版本&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; username@host:/path/to/repository  &lt;span class=&quot;comment&quot;&gt;#克隆远端服务器上的仓库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git status  &lt;span class=&quot;comment&quot;&gt;#查看状态&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git add &amp;lt;file&amp;gt;  &lt;span class=&quot;comment&quot;&gt;#把新文件或修改添加到缓存区(index)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git add .  &lt;span class=&quot;comment&quot;&gt;#添加全部&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git commit -m &lt;span class=&quot;string&quot;&gt;&quot;代码提交信息&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#把改动提交到 HEAD，但还没提交到到的远端仓库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git pull  &lt;span class=&quot;comment&quot;&gt;#从远程获取最新版本并merge到本地&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git push  &lt;span class=&quot;comment&quot;&gt;#将改动提交到远端仓库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#查看记录&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.forsigner.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://www.forsigner.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>好用的CSS sprite工具-TexturePacker</title>
    <link href="http://www.forsigner.com/2013/08/01/texturepacker-sprite/"/>
    <id>http://www.forsigner.com/2013/08/01/texturepacker-sprite/</id>
    <published>2013-07-31T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-sprite的苦恼"><a href="#CSS-sprite的苦恼" class="headerlink" title="CSS sprite的苦恼"></a>CSS sprite的苦恼</h2><p>最近在做web前端优化，其中之一就是把图片合并，也就是使用CSS<br>sprite技术,开始尝试使用PS手动合并，结果效率极低，而起很难维护。之后尝试各种各样的的CSS<br>sprite相关工具，最后选择了TextuerPacker，一个可以让我远离CSS sprite苦恼的工具。<br><a id="more"></a></p>
<h2 id="关于TexturePacker"><a href="#关于TexturePacker" class="headerlink" title="关于TexturePacker"></a>关于TexturePacker</h2><p>这是作者自己说的一段话：</p>
<blockquote>
<p>20 seconds to your optimized sprite sheet</p>
<ol>
<li>1.Drop your sprites to TexturePacker</li>
<li>2.Choose exporter and image formate</li>
<li>3.Press publish</li>
</ol>
</blockquote>
<ul>
<li>下载地址：<a href="http://www.codeandweb.com/texturepacker/download" target="_blank" rel="external">download TexturePacker</a></li>
</ul>
<h2 id="TexturePacker优点"><a href="#TexturePacker优点" class="headerlink" title="TexturePacker优点"></a>TexturePacker优点</h2><ul>
<li>跨平台，Linux、MacOS、Windows都能安装</li>
<li>效率高，可以通过文件夹导入、自动生成CSS、没有定位问题困扰</li>
<li>易维护，可以随意增加和减少图标而不影响定位</li>
</ul>
<h2 id="TexturePacker使用方法"><a href="#TexturePacker使用方法" class="headerlink" title="TexturePacker使用方法"></a>TexturePacker使用方法</h2><ul>
<li>把图标导入TexturePacker后会生成一个png和css文件，如sprite.png和sprite.css</li>
<li>对应的icon会根据名字生成class，如icon-ios.png会在css文件中生成.icon-ios {xxx: xxx; }，icon-ios-hover.pngs=&gt;.icon-ios:hover {xxx: xxx;}</li>
</ul>
<p>代码中使用：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 这些代码是自动生成的*/</span></div><div class="line"><span class="selector-class">.sprite</span> &#123;</div><div class="line">  <span class="attribute">display</span>:inline-block;</div><div class="line">  <span class="attribute">overflow</span>:hidden;</div><div class="line">  <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(css.png);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.icon-ios</span> &#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">80px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">32px</span>;</div><div class="line">  <span class="attribute">background-position</span>: -<span class="number">80px</span> -<span class="number">160px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.icon-ios</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">80px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">31px</span>;</div><div class="line">  <span class="attribute">background-position</span>: -<span class="number">160px</span> -<span class="number">160px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 要使用背景图像的元素 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sprite icon-ios"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="获取免费license"><a href="#获取免费license" class="headerlink" title="获取免费license"></a>获取免费license</h2><p>TexturePacker虽然非常优秀，但不是免费的。但作者对于开发人员是非常人道的，你可以去<a href="http://www.codeandweb.com/request-free-license申请一个free" target="_blank" rel="external">http://www.codeandweb.com/request-free-license申请一个free</a> licenses。要求如下：</p>
<blockquote>
<p>Bloggers and framework developers can get free full licenses to my tools.</p>
<p>My requirements to you are:</p>
<ul>
<li>You write your own blog</li>
<li>Your blog has at least 5 recent entries which are at least a page long and not older than 6 months</li>
<li>Your blog is about game/software/web development or about applications</li>
<li>FaceBook or Twitter is not a blog – except you have 100000 friends ;-)</li>
</ul>
</blockquote>
<p>申请成功后，作者会发送类似于一个这样的邮件给你：</p>
<blockquote>
<p>Hi chen,</p>
<p>Here’s your license key for TexturePacker - have fun with it!</p>
<p>XX-XXXX-XXXX-XXXX-XXXX</p>
<p>Nice blog! I would be happy to get a (short) blog post in return.</p>
<p>In case you do a tutorial post about my tools I can link back to your blog from the tutorials section on my page. That might give you some more visitors on your page!</p>
<p>Kind regards</p>
<p>Kerstin on behalf of Andreas</p>
<hr>
<p><a href="http://www.codeandweb.com" target="_blank" rel="external">http://www.codeandweb.com</a></p>
<p><a href="http://twitter.com/CodeAndWeb" target="_blank" rel="external">http://twitter.com/CodeAndWeb</a> - Follow me on Twitter</p>
<p>CodeAndWeb / Andreas Loew</p>
<p>Saalbaustrasse 61</p>
<p>89233 Neu-Ulm</p>
<p>Germany</p>
<p>> Free license request</p>
<p>></p>
<p>> Name: chen forsigner</p>
<p>> Blog: forsigner.com</p>
<p>> Description:</p>
<p>></p>
<p>>        I am a frontend engineer</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS-sprite的苦恼&quot;&gt;&lt;a href=&quot;#CSS-sprite的苦恼&quot; class=&quot;headerlink&quot; title=&quot;CSS sprite的苦恼&quot;&gt;&lt;/a&gt;CSS sprite的苦恼&lt;/h2&gt;&lt;p&gt;最近在做web前端优化，其中之一就是把图片合并，也就是使用CSS&lt;br&gt;sprite技术,开始尝试使用PS手动合并，结果效率极低，而起很难维护。之后尝试各种各样的的CSS&lt;br&gt;sprite相关工具，最后选择了TextuerPacker，一个可以让我远离CSS sprite苦恼的工具。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://www.forsigner.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>关于此博客</title>
    <link href="http://www.forsigner.com/2013/07/28/about-blog/"/>
    <id>http://www.forsigner.com/2013/07/28/about-blog/</id>
    <published>2013-07-27T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我为什么写博客"><a href="#我为什么写博客" class="headerlink" title="我为什么写博客"></a>我为什么写博客</h2><p>之所以写博客，原因有种种，对我来说，最主要的原因有两个：</p>
<ul>
<li>去学会坚持做一件事</li>
<li>去记住一些东西</li>
</ul>
<a id="more"></a>
<p>坚持，是一种优秀的品质，我身上貌似有点她的影子，但却不是很明显。曾经想学好英语，早上一个人去没人的地方练习英语，晚上没有字幕老友记，记得是把老友记看完了，然后，哪还有然后；曾经为了画好画，买了400张A4打印纸，却画了不到40张就放弃了；曾经想学好唱歌，还在淘宝买了教程，两年过去了，歌唱得不好听不说，也没学好多少首个；曾经去学会了多种球，足球、篮球、羽毛球、乒乓球,想让自己能驰骋球场，不过结果是每种球都是半桶水；曾经…是的，我是一个不懂的坚持的人，坚持不懈从来就不是我的强项，就像长跑一样。所以，我要坚持写博客，去学会坚持做一事情。</p>
<p>健忘，也许是人的天性，我的身上也有她的影子，但有点太明显了。曾经多少次出门忘记带钥匙，回来没钥匙回宿舍，只能默默地舍友回来；曾经去ATM取钱，终于轮到我了，摸摸裤袋，噢，里面什么都没有，原来银行卡还在宿舍躺着；曾经，一个人对着我喊我的名字，那个声音是如此的自然，好像我们是很好的朋友，我看着他的脸庞，在脑海中拼命的搜寻关于他的影像，却什么都没找到，那时，我停了好几秒，然后才对他的招呼做出勉强的回应，当然没有用他的名字回应，应为我压根就忘记他是谁了。当时我回应的延时，假得比足球场上的假摔还假，我知道我又伤害了一个人。所以，我觉得我有必要去记录一些东西。如果曾经我学会了画画，也许我会用画笔去记录我的见闻；如果曾经我学会了音乐，也许我会用音符记录我的感受，可惜我忘记了如何去坚持，所以我选择用博客：用文字和图片，去记录我的生活。</p>
<h2 id="关于博客名"><a href="#关于博客名" class="headerlink" title="关于博客名"></a>关于博客名</h2><p>此博客叫做forsigner，她也是我的网络ID，很多人问我forsigner是什么意思，我说没什么特殊意义，只是因为她独一无二而已。其实forsigner来至于两个单词：forgetful designer，叫健忘的设计师，因为曾经我以为我会成为一个设计师，而健忘是一个我的有点太明显的特点。不过世事难料，我现在没有成为设计师，但我懒得去想另一个ID了，就继续用forsigner，我把她读作[fɚ’zaɪnɚ]。所以她我来说确实没有什么特殊意义，用它是因为她的独一无二而已。</p>
<h2 id="此博客的建立过程"><a href="#此博客的建立过程" class="headerlink" title="此博客的建立过程"></a>此博客的建立过程</h2><p>曾经用过Wordpress，它是世界上最出名最流行的博客程序，不过它去未必适合每一个人，它太臃肿庞大了，而且我的文章很多是要写代码的，Wordpress用起来太难用了，最后舍弃了。</p>
<p>之后听说在gihub page可以免费建静态博客，就尝试自己搭建一个静态博客，开始选择的是Hexo，她的优点是简单，文章生成速度快,又是基于Nodejs，对于我这个小前端很有吸引力，但最后发现Hexo也并不适合我，它太不成熟了，缺少良好的社区支持，可折腾性太小，用了一段时间后也选择了放弃。</p>
<p>最终选择了Jekyll，就是现在的样子。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;我为什么写博客&quot;&gt;&lt;a href=&quot;#我为什么写博客&quot; class=&quot;headerlink&quot; title=&quot;我为什么写博客&quot;&gt;&lt;/a&gt;我为什么写博客&lt;/h2&gt;&lt;p&gt;之所以写博客，原因有种种，对我来说，最主要的原因有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去学会坚持做一件事&lt;/li&gt;
&lt;li&gt;去记住一些东西&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.forsigner.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="life" scheme="http://www.forsigner.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>关于inline-block最好的一篇文章</title>
    <link href="http://www.forsigner.com/2013/03/28/inline-block/"/>
    <id>http://www.forsigner.com/2013/03/28/inline-block/</id>
    <published>2013-03-27T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是转自火枪手团队博客的一篇文章：inline-block 前世今生。<br><a id="more"></a></p>
<p>这是读过的关于inline-block最好的文章，如下：</p>
<p>曾几何时，display:inline-block 已经深入「大街小巷」，随处可见 「display:inline-block; <em>display:inline; </em>zoom:1; 」这样的代码。如今现代浏览器已经全面支持这个属性值了，上面的代码只是为了兼容 IE6、7 而已。那么你真的了解 inline-block 了吗？本文将带你深入剖析该属性值的前世今生，让你更好的理解和运用 inline-block。（本文约定 display:inline-block 简写为 inline-block）</p>
<p>开篇我们来看几个问题：</p>
<ul>
<li>IE6、7 真的不支持 display:inline-block 吗？</li>
<li>display:inline-block 后的元素为什么会产生水平空隙，这真的是 bug 吗？</li>
<li>如何更好的解决 display:inline-block 元素间产生的水平空隙？</li>
</ul>
<h2 id="一、inline-block-前世"><a href="#一、inline-block-前世" class="headerlink" title="一、inline-block 前世"></a>一、inline-block 前世</h2><h3 id="1-认知"><a href="#1-认知" class="headerlink" title="1.认知"></a>1.认知</h3><p>也许有人问你为何要写「 display:inline-block; <em>display:inline; </em>zoom:1; 」 来兼容 IE6、7 时，你会立马答道：因为 IE6、7 不支持 display:inline-block 呗!不知道何时起，惯性思维给开发者带来了这样一个可怕的概念。万物都是辩证的，当你写下这些的时候，可曾怀疑过大众观点真的可靠吗？也许你认为这些无关 紧要，实现效果就好。但是如果不能理解每个属性或属性值的根本，你将永远无法全面的了解它，人云亦云只会让你浅尝辄止，止步不前。那么这里就涉及到所谓的 「CSS 学习瓶颈」的问题了，这个问题张鑫旭《说说CSS 学习中的瓶颈》一文有详细阐述，虽然部分观点我不是很赞同，但是中心思想还是很值得思考的。文中有几个不错的问题这里也列举出来供大家观摩：</p>
<p>line-height:150% 和 line-height:1.5 的区别是？</p>
<ul>
<li>float 为何会让外部容器高度塌陷？这是 bug？（我的答案在《那些年我们一起清除过的浮动》）</li>
<li>vertical-align 的表现为何在IE7, IE8, IE9 下表现不尽相同？其中的渲染机制是？<br>好了，回到 inline-block 的认知的问题，我的观点是：</li>
</ul>
<p>IE 从 5.5 开始就已经支持 display:inline-block 了，只是支持的并不是那么完善。</p>
<p>在 msdn 微软开发者社区，找到了 IE 从5.5 开始支持 inline-block 的证据：</p>
<p>The inline-block value is supported starting with Internet Explorer 5.5. You can use this value to give an object a layout without specifying the object’s height or width.</p>
<p>这里明确指出：从 IE5.5 开始支持 inline-block。</p>
<p>链接：<a href="http://msdn.microsoft.com/zh-cn/library/ie/ms530751(v=vs.85).aspx" target="_blank" rel="external">http://msdn.microsoft.com/zh-cn/library/ie/ms530751(v=vs.85).aspx</a></p>
<p>那么既然 IE5.5 开始就已经支持了 inline-block，为何我们还要写那么一坨 CSS 呢？同时我们知道 IE6、7 中 display:inline-block 是可以触发 hasLayout 的，触发了 hasLayout 的元素表现出来的特征就是一个独立的矩形容器，可以设置宽高而且不受外部元素的影响，类似于现代浏览器中的 Block formatting contexts （块级格式化上下文）的概念。</p>
<p>下面来做一个详细的测试，分别看看 IE6 中 inline 元素和 block 元素的表现：</p>
<p>1）inline 元素 display:inline-block</p>
<p>IE6 中截图如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.dib-inline</span>, <span class="selector-class">.dib-block</span> &#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">30px</span>;</div><div class="line">    <span class="attribute">line-height</span>:<span class="number">30px</span>;</div><div class="line">    <span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.dib-inline</span> &#123;</div><div class="line">    <span class="attribute">display</span>:inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试表明：IE6 中 inline 元素只要触发了 hasLayout 其表现就类似于 inline-block，这里设置 display:inline-block; 或者 zoom:1; 等其他属性值可以触发 hasLayout ，表现出来是一样的。</p>
<p>查看 DEMO</p>
<p>2）block 元素 display:inline-block</p>
<p>IE6 中截图如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.dib-inline</span>, <span class="selector-class">.dib-block</span> &#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">30px</span>;</div><div class="line">    <span class="attribute">line-height</span>:<span class="number">30px</span>;</div><div class="line">    <span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.dib-block</span>&#123;</div><div class="line">    <span class="attribute">display</span>:inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试表明：IE6 中 block 元素即使触发了 hasLayout 也不能具有 inline-block 元素不换行的特性。想要 block 元素支持 inline-block 元素的特性，我们可以这样做：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.dib-block</span> &#123;</div><div class="line">    <span class="attribute">display</span>:inline;</div><div class="line">    <span class="attribute">zoom</span>:<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先让 block 元素转化为 inline 元素，强制其不换行；然后通过 zoom:1 触发 hasLayout，使其可以设置宽高。修复后的 截图如下：</p>
<p>3）结合现代浏览器</p>
<p>综上，现代浏览器都支持 display:inline-block ，IE6、7 inline 元素也可以达到同样的效果，IE6、7 block 元素需要设置 display:inline; zoom:1; 它们结合在一起便是：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:inline-block</span>; <span class="comment">/* 现代浏览器 +IE6、7 inline 元素 *</span></div><div class="line">*display:inline; /* IE6、7 block 元素 *</div><div class="line">*zoom:1;</div></pre></td></tr></table></figure>
<p>为了不让支持 CSS2.1 inline-block 的浏览器 重置为 inline，我们针对 IE6、7 做一个 hack。由于现代浏览器也开始支持 zoom 属性，这里只是希望 IE6、7 中生效，所以还是 hack 一下比较合适。至此产生了我们熟悉的兼容各个浏览器的 inline-block 写法。</p>
<p>小结：IE6、7 并不是不支持 inline-block，只是 block 元素需要做一些处理来达到 inline-block 的效果。</p>
<h3 id="2-到底什么是-inline-block"><a href="#2-到底什么是-inline-block" class="headerlink" title="2. 到底什么是 inline-block"></a>2. 到底什么是 inline-block</h3><p>说了很多，或许很多朋友还不是太明白到底什么是 inline-block？W3C 在 CSS2.1 The ‘display’ property 中描述如下：</p>
<p>This value causes an element to generate an inline-level block container. The inside of an inline-block is formatted as a block box, and the element itself is formatted as an atomic inline-level box.</p>
<p>大致意思就是：inline-block 后的元素创建了一个行级的块容器，该元素内部（内容）被格式化成一个块元素，同时元素本身则被格式化成一个行内元素。</p>
<p>直白一点的意思就是：inline-block 的元素既具有 block 元素可以设置宽高的特性，同时又具有 inline 元素默认不换行的特性。当然不仅仅是这些特性，比如 inline-block 元素也可以设置 vertical-align 属性。简而言之：</p>
<p>inline-block 后的元素就是一个格式化为行内元素的块容器( Block container )</p>
<p>怎么样？听起来还不错吧！</p>
<h3 id="3-inline-block-缘从何起？"><a href="#3-inline-block-缘从何起？" class="headerlink" title="3. inline-block 缘从何起？"></a>3. inline-block 缘从何起？</h3><p>前面已经证明了 IE 5.5 开始就支持了 inline-block，那么 IE5.5 是什么时候发布的呢？话说当年网景与 IE 大战，IE5.5 那是何等的风骚……（好吧，此处略去十页）。从维基百科的资料来看，IE5.5 beta1 的发布时间是：1999年12月，最终版本是 2000年7月。那么 W3C 标准中是何时才出现 inline-block 这个值的呢？</p>
<p>在 CSS1 规范中，「display」的值仅包括： block | inline | list-item | none 。CSS2.1中才添加了 inline-block 属性值。一丝继续舔着手指，用那苦逼的英语水平终于翻到了这份草案：<a href="http://www.w3.org/TR/2002/WD-CSS21-20020802/visuren.html#display-prop，" target="_blank" rel="external">http://www.w3.org/TR/2002/WD-CSS21-20020802/visuren.html#display-prop，</a> 这份草案的日期是 2002年8月2日，纳尼！！！原来我们纠结了半天的 inline-block ， IE5.5 至少提前两年就提出来了啊！难道是微软给 W3C 提议后，CSS 2.1才加入的？（不过我看到 W3C 官网有一个关于是否增加 inline-block 的投票）好吧这个问题也许有一天 IE 某个开发者写《 IE回忆录》的时候我们才能了解到其中的内幕。如果找到更早关于 inline-block 的 CSS草案，也麻烦告知一丝一声。好吧，如果你还不相信，打微软官方电话问问吧 800-820-3800（不是 DHC 哦！）。</p>
<p>原来我们一直讨论的 inline-block 在 IE 6、7中和 CSS2.1 中的（现代浏览器所支持的） inline-block 上压根不是一个东东嘛，IE6、7 中的 inline-block 更像是 IE 的私有属性值，他们本身就不具有可比性。简单、绝对的认为 IE6、7 不支持 inline-block 好比一叶障目，看到前面，却看不到后面，太过于片面。诚然，IE6、7 的 hasLayout 给我们带来了很多麻烦，但是不得不承认微软的 IE 在网页多语言文本混排上的先进性，尤其是 CJK 文字和西文的混排，超越其他浏览器至少5年。</p>
<p>总结：</p>
<ul>
<li>IE5.5 后开始支持 inline-block， 但是它所支持的 inline-block 不能等同于 CSS2.1 中的 inline-block，因为 IE5.5 比 CSS2.1 更早提出 inline-block 的概念并作为所谓的「私有属性值」使用，所以二者表现出来的效果是不完全一致。</li>
<li>IE 5.5、6、7 、8（Q）中 block 元素对 inline-block 支持不完整，如果要达到类似的效果，需要先设置为 display:inline，然后使用 zoom:1 等触发 hasLayout。</li>
<li>IE 5.5、6、7 、8（Q）中 inline 元素欲达到 inline-block 的效果只需直接设置此属性值或使用 zoom:1 等均可。</li>
<li>各浏览器对 display 属性的支持情况请参阅：《各浏览器对 ‘display’ 特性值的支持程度不同》</li>
</ul>
<h2 id="二、inline-block-今生"><a href="#二、inline-block-今生" class="headerlink" title="二、inline-block 今生"></a>二、inline-block 今生</h2><h3 id="1-display-inline-block-后的元素为什么会产生水平空隙，这真的是-bug-吗？"><a href="#1-display-inline-block-后的元素为什么会产生水平空隙，这真的是-bug-吗？" class="headerlink" title="1. display:inline-block 后的元素为什么会产生水平空隙，这真的是 bug 吗？"></a>1. display:inline-block 后的元素为什么会产生水平空隙，这真的是 bug 吗？</h3><p>这么一个神奇的属性，为何大家一直避而远之呢？这恐怕还得从 inline-block 元素之间产生的水平空隙（间隙）说起吧。</p>
<p>参照 DEMO</p>
<p>现代浏览器中 inline 和 block 元素 display:inline-block 后均会产生水平空隙；</p>
<p>IE6、7，IE8（Q）模拟 display:inline-block 后分两种情况：</p>
<p>IE6、7，IE8（Q）中：inline 元素会产生空隙，block 元素不会产生空隙。<br>看看 inline 元素默认的表现情况如何？原来默认就有空隙存在！它们是谁？是空白符（white space）！</p>
<p>W3C 9.1 White space 中规定以下元素属于空白符（white space）：</p>
<ul>
<li>ASCII 空格</li>
<li>ASCII 制表符</li>
<li>ASCII 换页符</li>
<li>零宽度空格 「这个在闭合浮动中也有运用到」<br>9.3.2 Controlling line breaks 中进一步阐述：</li>
</ul>
<p>A line break is defined to be a carriage return (&#x000D;), a line feed (&#x000A;), or a carriage return/line feed pair. All line breaks constitute white space.</p>
<p>For more information about SGML’s specification of line breaks, please consult the notes on line breaks in the appendix.</p>
<p>折行被定义为一个回车符（&#x000D;），一个换行符 line feed (&#x000A;)，或者一个回车、换行的组合。所有的折行构成了空白符。</p>
<p>有关 SGML 规范中折行的更多信息，请参阅附录中关于折行的注释。</p>
<p>通常情况下，对于多个连续的空白符（空格，换行符，回车符等），浏览器会将他们合并为一个空白符。CSS 中由 white-space 这个属性来控制：</p>
<ul>
<li>white-space：normal | pre | nowrap | pre-wrap | pre-line</li>
<li>默认值：normal</li>
<li>normal：默认处理方式。</li>
<li>pre：用等宽字体显示预先格式化的文本，不合并文字间的空白距离，当文字超出边界时不换行。可查阅 pre 对象</li>
<li>nowrap：强制在同一行内显示所有文本，直到文本结束或者遭遇 br 对象。</li>
<li>pre-wrap：用等宽字体显示预先格式化的文本，不合并文字间的空白距离，当文字碰到边界时发生换行。</li>
<li>pre-line：保持文本的换行，不保留文字间的空白距离，当文字碰到边界时发生换行。</li>
</ul>
<p>注：IE7及更早浏览器不支持 CSS2.1 新增的 pre-wrap | pre-line。</p>
<p>所以这并不是 inline-block 后产生的 bug，而是因为 inline-block 具有 inline 元素固有的特性。那么为何 IE6、7 block 元素没有产生空隙呢？其实前面也提到了 IE 的 hasLayout，具有独立性，所以产生 hasLayout 的元素之间表现出来互不影响，这也再次表明 IE6、7 中的 inline-block 不能等同于 CSS2.1 中的 inline-block。如果非要说是有 bug， IE6、7 block 元素 inline-block 后不产生空隙才是 bug。</p>
<p>测试表明删除换行符后，inline 元素间的空隙就「消失」了：</p>
<h3 id="2-去掉-inline-block-产生的空隙"><a href="#2-去掉-inline-block-产生的空隙" class="headerlink" title="2.去掉 inline-block 产生的空隙"></a>2.去掉 inline-block 产生的空隙</h3><p>为了让各个浏览器表现一致，更好的还原视觉设计搞，很多时候我们需要去掉 inline-block 产生的空隙。</p>
<p>上一节中我们已经知道产生空隙的根本性原因是：</p>
<p>HTML 中的换行符、空格符、制表符等产生了空白符，而这些归根结底都是字符，那么它们的大小都是 受 font-size 来控制的，字体大小直接导致 inline 或者 inline-block 后元素之间空隙的大小，把 inline-block 元素间的空隙认为总是某个固定大小是错误的。</p>
<p>用 GIF 动画的形式来表明对应关系：</p>
<p>很清楚的看到，当 font-size:0 的时候元素间的空隙都为0了，或许到这里你会感到很欣喜了，原来掌握的根本性原因这么简单就搞定了啊！</p>
<p>然，理想是丰满的，现实是骨感的。</p>
<p>大部分浏览器是支持 font-size:0 的。很明显，我们要和 IE 6、7 这两个妖孽进行一番战斗。</p>
<p>font-size:0 的支持情况</p>
<p>1）Chrome</p>
<p>低版本的 chrome 浏览器为了不让文字过小不利于阅读，默认是不支持 font-size:0 的，还好我们有 -webkit-text-size-adjust 这个私有属性来控制，当设为 none 时就支持字体大小为 0 了。我已经记不清楚 chrome 从哪个版本开始支持 font-size:0 了，反正我用 chrome 19 是支持了（有知道的朋友，烦请告诉一丝一声，最好有官方更新说明）。但是，-webkit-text-size-adjust:none; 会直接导致页面文字无法缩放，这对于用户来说显然是不友好的。所以-webkit-text-size-adjust:none; 一定要慎用，确保使用的地方没有大面积的文字。</p>
<p>-webkit-text-size-adjust:none 的使用场景实例参阅：<a href="http://vip.etao.com/" target="_blank" rel="external">http://vip.etao.com/</a></p>
<p>2）Safari</p>
<p>Safari 5 依旧不支持 font-size:0 ，不过相信这些浏览器厂商都意识到了这个问题，在 Mac 平台最新的 Safari 6 已经很好的支持 font-size:0 了。</p>
<p>3）Firefox，Opera</p>
<p>经测试，Firefox12，Opera 10 ，这次表现不错，支持 font-size:0 。</p>
<p>4）IE</p>
<p>IE8 以上支持 font-size:0;<br>IE6、7 inline 元素 inline-block 后设置 font-size:0 始终有 1px 的空隙。<br>是不是一下子又开始头疼了？没关系，让我们请出 letter-spacing 和 word-spacing 二位大神。既然空白符也是字符，那么二位大神肯定是可以搞定它们的。</p>
<ul>
<li>letter-spacing : normal | length （检索或设置对象中的文字之间的间隔）</li>
<li>word-spacing : normal | length（检索或设置对象中的单词之间插入的空隔）</li>
<li>normal： 默认间隔</li>
<li>length： 用长度值指定间隔，允许为负值。</li>
</ul>
<p>还等什么，我们赶紧试试吧：</p>
<p>参照 DEMO</p>
<p>第一步：使用 font-size:0经测试发现，chrome、firefox、IE8+、opera，inline 或 block 元素都没有空隙了；<br>Safari 5.1.7 由于不支持 font-size:0 ，仍然存在空隙；</p>
<p>IE6、7、8（Q），inline 元素 inline-block 后始终存在 1px 左右的空隙。<br>第二步：处理 Safari 不支持 font-size:0 的问题上面已经指出 letter-spacing 是支持负值的，那么这个负值到底取多少合适呢？经过测试得出的结论是：inline-block 产生的空隙与父级元素继承或者设定的 font-family、font-size 有关，通常情况下，12px 大小的 tahoma 字体，inline-block 后元素间产生的空隙（间隙）大约是 5px；<br>各个字体详细情况请参阅《inline-block空隙–letter-spacing与字体大小/字体关系数据表》。</p>
<p>Firefox 中 letter-spacing 负值的绝对值大于空隙大小后，会导致元素整体位置向右偏移；</p>
<p>Safari 中 letter-spacing 负值的绝对值大于空隙大小后，内部会发生重叠。</p>
<p>第三步：修复 IE6、7 中始终存在的 1px 空隙<br>既然 letter-spacing 已经无能为力了，那就试试 word-spacing 吧，直接设置 word-spacing:-1px。这里需要注意的是，letter-spacing 和 word-spacing 同时使用可能导致冲突，所以我们需要在 IE6、7 中 hack 掉 letter-spacing。最终代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">font-size</span><span class="selector-pseudo">:0</span>;<span class="comment">/* 所有浏览器 */</span></div><div class="line"><span class="selector-tag">letter-spacing</span><span class="selector-pseudo">:-5px</span>;<span class="comment">/* Safari 等不支持字体大小为 0 的浏览器 */</span></div><div class="line">*<span class="selector-tag">letter-spacing</span><span class="selector-pseudo">:normal</span>;</div><div class="line"><span class="selector-tag">word-spacing</span><span class="selector-pseudo">:-1px</span>;<span class="comment">/* IE6、7 */</span></div></pre></td></tr></table></figure>
<p>第四步：子元素重置回正常值<br>上述所有操作都是在父元素设置的，那么子元素都会继承这些属性，字体大小为0了，子元素就什么都看不到了，这并不是我们想要的。 同时字符和单词间距我们也要把它重置为默认值。「font-size: 12px; letter-spacing: normal; word-spacing: normal;」<br>最后：inline-block 更好的复用<br>或许你会担心每次我都要去看字体和空隙之间大小的关系吗？其实不然，通常情况下，全局字体都已经在 body 中指定了，根据全局字体设置合适的 letter-spacing 负值即可。如此一来，我们便可以放心大胆的使用 inline-block 了，结合 OOCSS 的思想，可以抽离出两个复用的类，在需要设置 inline-block 元素的父级元素上定义一个「.dib-wrap」，该元素自身定义为「.dib」。这里还有一个问题需要注意的是：由于 inline-block 具有 inline 元素的特性，在垂直方向上很多时候我们并不希望元素以「vertical-align:baseline」方式来呈现，所以在「.dib-wrap」中统一重置为「vertical-align:top」即可。</p>
<h3 id="3-去除-inline-block-空隙终极解决方案（2012年8月17日更新）"><a href="#3-去除-inline-block-空隙终极解决方案（2012年8月17日更新）" class="headerlink" title="3. 去除 inline-block 空隙终极解决方案（2012年8月17日更新）"></a>3. 去除 inline-block 空隙终极解决方案（2012年8月17日更新）</h3><figure class="highlight"><table><tr><td class="code"><pre><div class="line">.dib-wrap &#123;</div><div class="line">    font-size:0;/* 所有浏览器 */</div><div class="line">    *word-spacing:-1px;/* IE6、7 */</div><div class="line">&#125;</div><div class="line">.dib-wrap .dib&#123;</div><div class="line">    font-size: 12px;</div><div class="line">    letter-spacing: normal;</div><div class="line">    word-spacing: normal;</div><div class="line">    vertical-align:top;</div><div class="line">&#125;</div><div class="line">@media screen and (-webkit-min-device-pixel-ratio:0)&#123;</div><div class="line">/* firefox 中 letter-spacing 会导致脱离普通流的元素水平位移 */</div><div class="line">.dib-wrap&#123;</div><div class="line">    letter-spacing:-5px;/* Safari 等不支持字体大小为 0 的浏览器, N 根据父级字体调节*/</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">.dib &#123;</div><div class="line">    display: inline-block;</div><div class="line">    *display:inline;</div><div class="line">    *zoom:1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实在 YUI 3 中也全面运用了 inline-block 作为基础布局，YUI 3 是这样解决的：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">.yui3-g &#123;</div><div class="line">    letter-spacing: -0.31em; /* webkit: collapse white-space between units */</div><div class="line">    *letter-spacing: normal; /* reset IE &lt; 8 */</div><div class="line">    word-spacing: -0.43em; /* IE &lt; 8 &amp;&amp; gecko: collapse white-space between units */</div><div class="line">&#125;</div><div class="line"></div><div class="line">.yui3-u &#123;</div><div class="line">    display: inline-block;</div><div class="line">    zoom: 1; *display: inline; /* IE &lt; 8: fake inline-block */</div><div class="line">    letter-spacing: normal;</div><div class="line">    word-spacing: normal;</div><div class="line">    vertical-align: top;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>显然，这里纯粹使用了 letter-spacing 和 word-spacing 来控制元素间的空隙，局限性极大，-0.31em 和 -0.43em 只是因为 YUI 3 全局 cssfonts.css 里设置是：「body { font:13px/1.231 arial,helvetica,clean,sans-serif; }」。</p>
<p>当然，如果你坚持使用把 html 写在一行的方式来达到去除 inline-block 空隙的目的，我只能说：一切以牺牲结构来兼容表现的行为都是耍流氓！所以探讨此种方式去除空隙也将是无意义的，不在本文和作者考虑范围之内。</p>
<h3 id="4-结局——本文产生的一些观点如下："><a href="#4-结局——本文产生的一些观点如下：" class="headerlink" title="4. 结局——本文产生的一些观点如下："></a>4. 结局——本文产生的一些观点如下：</h3><p>IE5.5 后开始支持 inline-block， 比 CSS2.1 更早提出 inline-block 的概念并作为所谓的「私有属性值」使用。但是它所支持的 inline-block 不能等同于 CSS2.1 中的 inline-block，IE 5.5、6、7 、8（Q）中 block 元素对 inline-block 支持不完整，因此二者表现出来的效果是不完全一致。<br>产生 inline-block 空隙的根本性原因是：HTML 中的换行符、空格符、制表符等合并为空白符，字体大小不为 0 的情况下，空白符自然占据一定的宽度，因此产生了元素间的空隙。<br>慎用 -webkit-text-size-adjust:none，它将会导致页面无法通过缩放来改变字体大小。</p>
<h2 id="三、inline-block-未来"><a href="#三、inline-block-未来" class="headerlink" title="三、inline-block 未来"></a>三、inline-block 未来</h2><p>如今，Mac 平台下的 Safari 6 已经支持 font-size:0 了，相信很快 Windows 平台的 Safari 如果发布 5.X 的更新，也会支持字体为 font-size:0 了。等到 IE6、7 灭亡之后，世界就真真儿的美妙了！最后说一点：inline-block 与 float 也是无法直接比较的，请不要再讨论 inline-block 和 float 哪个更好的话题了。inline-block 从 IE5.5 一路走来，存在即是合理，以后有时间在总结一下 inline-block 与 float 的使用场景的区别。</p>
<p>在不改变 CSS 定位机制的前提下，inline-block 应该是首选，而不是以「奇淫技巧」存在的。有感打油诗一首：</p>
<ul>
<li>网事如烟</li>
<li>CSS 红尘里</li>
<li>inline-block 知多少</li>
<li>你在这头</li>
<li>inline-block 在那头</li>
<li>用与不用</li>
<li>它就在那里</li>
<li>不悲不喜</li>
</ul>
<p>PS：</p>
<ul>
<li>为了更好的排版，本文使用繁体中文引号 「」代替简体中文小蝌蚪引号；</li>
<li>中英文混排的时候英文首尾各加一个空格；</li>
<li><p>以后文章有需要的时候也都将使用 gif 动画配合说明。</p>
<p>测试环境</p>
</li>
<li><p>操作系统版本:     Windows 7 企业版 6.1（内部版本 7600）</p>
</li>
<li>浏览器版本:    IE6</li>
<li>IE9</li>
<li>Firefox 14.0.1</li>
<li>Chrome 19.0.1084.46</li>
<li>Safari 5.1.7(7534.57.2)</li>
<li>Opera 12.50<br>最后更新时间:     2012-8-17</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是转自火枪手团队博客的一篇文章：inline-block 前世今生。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://www.forsigner.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>清除浮动的方法</title>
    <link href="http://www.forsigner.com/2013/03/25/css-clearfix/"/>
    <id>http://www.forsigner.com/2013/03/25/css-clearfix/</id>
    <published>2013-03-24T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>float是网页布局中最常用的css属性之一，但是使用float同样会带来各种各样的问题，例如它使元素脱离正常的文档流，使父元素的高度坍塌等，所以我们经常要清除浮动。</p>
<a id="more"></a>
<p>现在，越来越多人反对使用float来布局，最具代表性的就是google，因为float布局是会产生各种问题，有事问题还是莫名其妙的，而且使用display: inline-block能够完成大多数float能完成的布局。但某些方面，display: inline-block并不能代替float，例如float的方向性，float依然是常用的布局属性之一，所以清除浮动不可避免。</p>
<p>清除浮动的方法很多，不过从分类来说，清除浮动的方法可以分成两类：</p>
<p>1.利用 clear 属性。<br>2.触发浮动元素父元素的 BFC (Block Formatting Contexts, 块级格式化上下文)。</p>
<p>常用的清除浮动方法</p>
<p>1.添加额外标签</p>
<p>这是比较古老一种方法，通过在浮动元素末尾添加一个空的标签然后使用clear:both。</p>
<p>3)父元素设置 overflow</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.main</span>&#123;<span class="attribute">float</span>:left;&#125;</div><div class="line"><span class="selector-class">.side</span>&#123;<span class="attribute">float</span>:right;&#125;</div><div class="line"><span class="selector-class">.footer</span></div></pre></td></tr></table></figure>
<p>优点：通俗易懂，容易掌握。<br>缺点：可以想象通过此方法，会添加多少无意义的空标签，有违结构与表现的分离，在后期维护中将是噩梦。</p>
<p>2.overflow 方法</p>
<p>通过设置父元素overflow值设置为hidden触发浮动元素父元素的 BFC；在IE6中还需要触发 hasLayout ，例如 zoom：1,使用方法如下：</p>
<p>3)父元素设置 overflow</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.main</span>&#123;<span class="attribute">float</span>:left;&#125;</div><div class="line"><span class="selector-class">.side</span>&#123;<span class="attribute">float</span>:right;&#125;</div><div class="line"><span class="selector-class">.footer</span></div></pre></td></tr></table></figure>
<p>优点：不存在结构和语义化问题，代码量极少。<br>缺点：内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p>
<p>3.使用 :after 伪元素的方法</p>
<p>主流的用法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 清理浮动 */</span></div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">visibility</span>:hidden;</div><div class="line">    <span class="attribute">display</span>:block;</div><div class="line">    <span class="attribute">font-size</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">content</span>:<span class="string">" "</span>;</div><div class="line">    <span class="attribute">clear</span>:both;</div><div class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.clearfix</span> &#123;</div><div class="line">    <span class="attribute">zoom</span>:<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是现在主流的清理浮动方式。</p>
<p>“那些年我们一起清除过的浮动”提到两种更简洁的清除浮动方法：</p>
<p>方案一：</p>
<p>相对于空标签闭合浮动的方法代码似乎还是有些冗余，通过查询发现Unicode字符里有一个“零宽度空格”，也就是U+200B ，这个字符本身是不可见的，所以我们完全可以省略掉 visibility:hidden了。</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">.clearfix:after</div><div class="line">&#123;</div><div class="line">        content:"\200B";</div><div class="line">        display:block;</div><div class="line">        height:0;</div><div class="line">        clear:both;</div><div class="line">&#125;</div><div class="line">.clearfix &#123;</div><div class="line">        *zoom:1;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>方案二：</p>
<p>由Nicolas Gallagher 大湿提出来的,原文:A new micro clearfix hack，该方法也不存在firefox中空隙的问题。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* For modern browsers */</span></div><div class="line"><span class="selector-class">.cf</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.cf</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">        <span class="attribute">content</span>:<span class="string">""</span>;</div><div class="line">        <span class="attribute">display</span>:table;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.cf</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">        <span class="attribute">clear</span>:both; <span class="comment">/* For IE 6/7 (trigger hasLayout) */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.cf</span> &#123;</div><div class="line">        <span class="attribute">zoom</span>:<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的方法用到了  ：before伪元素，很多人对这个有些迷惑，到底我什么时候需要用before呢？为什么方案一没有呢？其实它是用来处理margin边距重叠的，由于内部元素 float 创建了BFC，导致内部元素的margin-top和 上一个盒子的margin-bottom 发生叠加。如果这不是你所希望的，那么就可以加上before，如果只是单纯的闭合浮动，after就够了！并不是如同大湿《Clear Float》一文所说的：但只使用clearfix:after时在跨浏览器兼容问题会存在一个垂直边距叠加的bug，这不是bug，是BFC应该有的特性。</p>
<p>推荐阅读</p>
<ul>
<li>那些年我们一起清除过的浮动</li>
<li>清理浮动的几种方法以及对应规范说明</li>
<li>更简洁的 CSS 清理浮动方式</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;float是网页布局中最常用的css属性之一，但是使用float同样会带来各种各样的问题，例如它使元素脱离正常的文档流，使父元素的高度坍塌等，所以我们经常要清除浮动。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://www.forsigner.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS BFC(Block Formatting Context)</title>
    <link href="http://www.forsigner.com/2013/03/20/css-bfc/"/>
    <id>http://www.forsigner.com/2013/03/20/css-bfc/</id>
    <published>2013-03-19T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BFC的定义"><a href="#BFC的定义" class="headerlink" title="BFC的定义"></a>BFC的定义</h2><p>BFC是 W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。BFC在创建了 Block Formatting Context 的元素中，其子元素会一个接一个地放置。垂直方向上他们的起点是一个包含块的顶部，两个相邻的元素之间的垂直距离取决于‘margin’ 特性。在 Block Formatting Context 中相邻的块级元素的垂直边距会折叠（collapse）。<br><a id="more"></a></p>
<p>在 Block Formatting Context 中，每一个元素左外边与包含块的左边相接触（对于从右到左的格式化，右外边接触右边）， 即使存在浮动也是如此（尽管一个元素的内容区域会由于浮动而压缩），除非这个元素也创建了一个新的Block Formatting Context 。</p>
<p>BFC到底是什么？</p>
<p>当涉及到可视化布局的时候，Block Formatting Context提供了一个环境，HTML元素在这个环境中按照一定规则进行布局。一个环境中的元素不会影响到其它环境中的布局。比如浮动元素会形成BFC，浮动元素内部子元素的主要受该浮动元素影响，两个浮动元素之间是互不影响的。这里有点类似一个BFC就是一个独立的行政单位的意思。</p>
<h2 id="怎样才能形成BFC"><a href="#怎样才能形成BFC" class="headerlink" title="怎样才能形成BFC"></a>怎样才能形成BFC</h2><ul>
<li>float的值不为none。</li>
<li>overflow的值不为visible。</li>
<li>display的值为table-cell, table-caption, inline-block中的任何一个。</li>
<li>position的值不为relative和static。</li>
</ul>
<h2 id="BFC的作用"><a href="#BFC的作用" class="headerlink" title="BFC的作用"></a>BFC的作用</h2><p>1.不和浮动元素重叠</p>
<p>如果一个浮动元素后面跟着一个非浮动的元素，那么就会产生一个覆盖的现象，很多自适应的两栏布局就是这么做的。比如下图的效果，参考例子</p>
<p>123<br>The quick brown fox jumped over the lazy dog’s back. The quick brown fox jumped over the lazy dog’s back. The quick brown fox jumped over the lazy dog’s back. The quick brown fox jumped over the lazy dog’s back. The quick brown fox jumped over the lazy dog’s back.</p>
<p>2.清除元素内部浮动</p>
<p>只要把父元素设为BFC就可以清理子元素的浮动了，最常见的用法就是在父元素上设置overflow: hidden样式，对于IE6加上zoom:1就可以了(IE Haslayout)。</p>
<p>3.嵌套元素Margin边距折叠问题的解决</p>
<p>按照BFC的定义，只有同属于一个BFC时，两个元素才有可能发生垂直Margin的重叠，这个包括相邻元素，嵌套元素，只要他们之间没有阻挡(例如边框，非空内容，padding等)就会发生margin重叠。</p>
<p>因此要解决margin重叠问题，只要让它们不在同一个BFC就行了，但是对于两个相邻元素来说，意义不大，没有必要给它们加个外壳，但是对于嵌套元素来说就很有必要了，只要把父元素设为BFC就可以了。这样子元素的margin就不会和父元素的margin发生重叠了。</p>
<p>摘自：<a href="http://www.w3cmm.com/other/css-bfcblock-formatting-context.html" target="_blank" rel="external">http://www.w3cmm.com/other/css-bfcblock-formatting-context.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BFC的定义&quot;&gt;&lt;a href=&quot;#BFC的定义&quot; class=&quot;headerlink&quot; title=&quot;BFC的定义&quot;&gt;&lt;/a&gt;BFC的定义&lt;/h2&gt;&lt;p&gt;BFC是 W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。BFC在创建了 Block Formatting Context 的元素中，其子元素会一个接一个地放置。垂直方向上他们的起点是一个包含块的顶部，两个相邻的元素之间的垂直距离取决于‘margin’ 特性。在 Block Formatting Context 中相邻的块级元素的垂直边距会折叠（collapse）。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://www.forsigner.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>IE Haslayout</title>
    <link href="http://www.forsigner.com/2013/03/18/iehaslayout/"/>
    <id>http://www.forsigner.com/2013/03/18/iehaslayout/</id>
    <published>2013-03-17T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们们那知道浏览器有bug，而且Windows上的lE的bug 似乎比太多数浏览器都多。IE/Win的衣现与其他浏览器不同的原因之一是，显示引擎使用一个称为布局(layout)的内部概念。因为布均是一个专门针对显示引擎内部工作方式的概念，所以一般悄况下不需要了解它。但是，布局问题是许多IE/Win显示bug的根源，所以理解这个概念以及它如何影响CSS是有捂助的。<br><a id="more"></a></p>
<p>什么是布局</p>
<p>Windows 上的IE 使用布局概念来控制元素的尺寸和定位。那些称为拥有布局(have layout)的元素负责本身及其子元素的尺寸和定位。如果一个元旦在没有拥有布局，那么它的尺寸和位置由最近的拥有布局的祖先元素控制。</p>
<p>IE 显示引擎利用布局概念减少它的处理开销。在理想悄况下，所有元素都控制自己的尺寸和定位。但是，这会在IE中导致很大的性能问题。因此，IE/Win开发团队决定只将布局应用于实际需要它的那些元素，这样就可以充分地减少性能开销。</p>
<p>在默认情况下拥有布局的元素包括:</p>
<ul>
<li>body</li>
<li>标准模式中的 html</li>
<li>table</li>
<li>tr, td</li>
<li>img</li>
<li>hr</li>
<li>input, select, textarea, button</li>
<li>iframe, embed, object, applet</li>
<li>marquee</li>
</ul>
<p>布局概念是Windows 上的I E 特有的，而且它不是CS S 属性.尽管某些CSS 属性会使元ffi拥有布局，但是在CSS 巾无法显式地设宣布局.可以使用JavaScript函数hasLayout 查看一个元亲是否拥有布局.如果元素拥有布局，这个函数就返回true ; 否则返回falseo hasLayout 是一个只读属性，所以无法使用JavaScript选行设置.</p>
<p>设宜以下CSS 属性会自动地使元亲拥有布局·</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span></div><div class="line"><span class="selector-tag">float</span>: <span class="selector-tag">left</span> <span class="selector-tag">or</span> <span class="selector-tag">right</span></div><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span></div><div class="line"><span class="selector-tag">width</span>: <span class="selector-tag">any</span> <span class="selector-tag">value</span></div><div class="line"><span class="selector-tag">height</span>: <span class="selector-tag">any</span> <span class="selector-tag">value</span></div><div class="line"><span class="selector-tag">zoom</span>: <span class="selector-tag">any</span> <span class="selector-tag">value</span> (<span class="selector-tag">Microsoft</span> <span class="selector-tag">property</span>—<span class="selector-tag">doesn</span>’<span class="selector-tag">t</span> <span class="selector-tag">validate</span>)</div><div class="line"><span class="selector-tag">writing-mode</span>: <span class="selector-tag">tb-rl</span> (<span class="selector-tag">Microsoft</span> <span class="selector-tag">property</span>—<span class="selector-tag">doesn</span>’<span class="selector-tag">t</span> <span class="selector-tag">validate</span>)</div></pre></td></tr></table></figure>
<p>布局有什么效果?</p>
<p>布局是许多IElWin 显示bug 的根源。例如， 如果一个文本段落靠谷一个浮动元索，那么期望文本围绕这个元索。但是，在Windows 上的1E<br>6 和更低版本巾，如果段落拥有布局(例如，由于设置了高度).那么它就被限制为矩形，因此阻止文本国绕浮动元素〈见图9-5).</p>
<p>Figure Above:</p>
<p>期望文本围绕相邻的浮动元素，但是，在IE/Win上，如果文本元素拥有布局，就不会这样显示。</p>
<p>这会导致浮动布间的各种问题更糟的是，许多人使用IE 作为主浏览器，他们会俯误地认为这才是正确的表现，在其他浏览器以不同方式处理泞-动元素时，他们反而会这必不解.</p>
<p>另-个问题涉及拥有布局的元素如何确定自己的尺，如果元亲的内容变得比元素本身大，那么期望元素流出到元素外.但是，在Windows 上的IE 6<br>和更低版本中，拥有布局的元素会销误地扩展以便适应内容的尺寸(见图9-6).</p>
<p>Figure Above:</p>
<p>拥有布局的错误的扩展以便适应内容</p>
<p>这意味IE/Win中的width 实际上更像min-width. 这种行为也是在IE/Win中许多浮动布局被破坏的原因。当浮动框的内容错误地迫使框的宽度增加时，框对于可用空间来说太大了，因此下降到其他浮动元素在下面.</p>
<p>其他问题包括:</p>
<ul>
<li>拥有布局的元素不进行收缩。</li>
<li>布局元亲对浮动进行自动消理。</li>
<li>相对定位的元素不获得布局。</li>
<li>在拥有布局的元素之间空白地不叠加。</li>
<li>在不拥有布局的块级链接上，单击区域只覆盖文本。</li>
<li>常见bug及其修复方法</li>
</ul>
<p>CSS 开发人员最重要的技能之一是发现常见浏览器bug的能力。通过了解导致这些bug 的各种元索，可以在它们造成问题之前发现并且修复它们。</p>
<p>双空白边浮动bug</p>
<p>最常见且最容易发现的bug 之一是IE6和更低版本中的双空白边浮动bug。顾名思义，这个Windows bug使任何浮动元素上的空白边加倍(见图9-7)。</p>
<p>Figure Above:</p>
<p>IE/Win 的双空白浮动bug示意阁</p>
<p>这个bug 很容易修复，将元素的display 属性设置为inline 就行了.因为元素是浮动的，将display 属性设置为inline，实际上不会影响显示方式。但是，这似乎会阻止Windows 上的IE6和更低版本将所有空白地加倍。这是一个非常容易发现和修复的bug : 每当对具有水平空白边的元素进行浮动时，都应该很自然地将display属性设置为inline。</p>
<p>3像素文本偏移bug</p>
<p>另一个非常常见的I E 5-61Win bug 是3像素文本偏移bug。当文本与二个浮动元示相邻时，这个bug 就会表现出来。例如，假设将-个元素向左浮动，并且不希望相邻段落中的文本围绕浮动元素。你可能会在段落上应用一个左空白边，其宽度等于浮动元素的宽度:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.myFloat</span> &#123; <span class="attribute">float</span>: left; <span class="attribute">width</span>: <span class="number">200px</span>; &#125;</div><div class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">margin-left</span>: <span class="number">200px</span>; &#125;</div></pre></td></tr></table></figure>
<p>如果这么做，在文本和浮动元素之间就会出现一个莫名其妙的3像素间隙。(见图9-8) 。</p>
<p>Figure Above:</p>
<p>IE 5-6/Win 的3像素文本偏移bug示意图</p>
<p>修复这个bug 需要双管齐下。首先，给包含文本的元素设置任意的高度。这会迫使元素拥有布局，这在表面上会消除文本偏移。因为Windows 上的IE6和更低版本将height作为min-height那样对待，所以设置一个小的高度并不会影响元素在这些浏览器巾的实际尺寸。但是，这会影响其他浏览器，所以要使用Holly招数对除了Windows上的IE6 和更低版本之外的所有其他浏览器隐藏这个规则，</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Hide from IE5-Mac. Only IE-Win sees this. \*/</span></div><div class="line">* <span class="selector-tag">html</span> <span class="selector-tag">p</span> &#123; <span class="attribute">height</span>: <span class="number">1%</span>; &#125;</div><div class="line"><span class="comment">/* End hide from IE5/Mac */</span></div></pre></td></tr></table></figure>
<p>不幸的是，这么做会导致另一个问题。正如在前面学到的，拥有布局的元素被限制为矩形的，并且出现在浮动元索的旁边而不是它们的下面。添加200像素的空白边实际上会在IE5-6/Win 中在浮动元素和段落之间产生200像素的间隙。为了边免这个问隙，需要将IE 5-6/Win 上的空白边重新设置为零:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Hide from IE5-Mac. Only IE-Win sees this. \*/</span></div><div class="line">* <span class="selector-tag">html</span> <span class="selector-tag">p</span> &#123; <span class="attribute">height</span>: <span class="number">1%</span>; <span class="attribute">margin-left</span>: <span class="number">0</span>; &#125;</div><div class="line"><span class="comment">/* End hide from IE5/Mac */</span></div></pre></td></tr></table></figure>
<p>文本偏移被修复了，但是现在另一个3像亲间隙出现了，这一次是在浮动元素上。为了去掉这个问隙，需要在浮动元素上设置一个负值的3像素右空白边：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Hide from IE5-Mac. Only IE-Win sees this. \*/</span></div><div class="line">* <span class="selector-tag">html</span> <span class="selector-tag">p</span> &#123; <span class="attribute">height</span>: <span class="number">1%</span>; <span class="attribute">margin-left</span>: <span class="number">0</span>; &#125;</div><div class="line">* <span class="selector-tag">html</span> <span class="selector-class">.myFloat</span> &#123; <span class="attribute">margin-right</span>: -<span class="number">3px</span>; &#125;</div><div class="line"><span class="comment">/* End hide from IE5/Mac */</span></div></pre></td></tr></table></figure>
<p>如果浮动元素是除了图像之外的任何其他东西，那么这个问题己经修复了。但是，如果浮动元旦在是图像，那么还有放后一个问题需要解决。 IE 5.x/Win在图像的左右都添加3像亲的间隙。而IE6不改变图像的空白边。因此，需要用另一个招术在IE5.x/Win 上去掉3 像素的问隙:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">/* Hide from IE5-Mac. Only IE-Win sees this. \*/</div><div class="line">* html p &#123; height: 1%; margin-left: 0; &#125;</div><div class="line">* html img.myFloat &#123; margin: 0 -3px; ma\rgin: 0; &#125;</div><div class="line">/* End hide from IE5/Mac */</div></pre></td></tr></table></figure>
<p>这会解决问题，但是采用的方式很难看而且太复杂。因此，如果可能的话，最好将这些规则分别放进单独的浏览器特定的样式表中。如果这样做，用于Windows上的lE 5.x的样式表如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">height</span>: <span class="number">1%</span>; <span class="attribute">margin-left</span>: <span class="number">0</span>; &#125;</div><div class="line"><span class="selector-tag">img</span><span class="selector-class">.myFloat</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">3px</span>; &#125;</div></pre></td></tr></table></figure>
<p>IE 6的样式表如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">height</span>: <span class="number">1%</span>; <span class="attribute">margin-left</span>: <span class="number">0</span>; &#125;</div><div class="line"><span class="selector-tag">img</span><span class="selector-class">.myFloat</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; &#125;</div></pre></td></tr></table></figure>
<p>IE 6躲躲猫bug</p>
<p>另一个奇怪而且很烦人的 bug 是IE6 的躲躲猫(peek-a-boo) bug，之所以起这个名称是因为在某些条件下文本看起来消失了，只有在前新装载页面时才再度出现。出现这个bug的条件是:一个浮动元素后面跟着一些非浮动元素，然后是一个清理元素，所有这些元素都包含在一个设置了背景颜色或阅像的父元束中。如果清理元素碰到了浮动元素，那么中间的作浮动元素看起来消失了，隐藏到了父元素的背景颜色或图像后面，只有在刷新页面时才重新出现(见图9-9)。</p>
<p>Figure Above:</p>
<p>IE 6的躲躲猫bug示意图</p>
<p>相对容器中的绝对定位</p>
<p>我要讨论的段后一个主要浏览器bug涉及相对定位容器中的绝对定位元素。在前面的章节中你学到将绝对定位的元素嵌套在相对容器中是多么有用。但是，IE6和更低版本在使用这种技术时有许多bug。</p>
<p>这些bug 的原因在于相对定位的元素没有获得IE/Win 的内部hasLayout 属性。因此，它们不创建新的定位上下文，所有绝对定位元素相对于窗口进行定位(见图9-10)。</p>
<p>Figure Above:</p>
<p>IE5.x对相对容器中的绝对定位元素的定位方式不正确</p>
<p>为了使Windows 上的IE 6和更低版本的表现正确。需要迫使相对应位的容器拥有布局。一种方法是在容器上显式地设置width 和height。但是，常常希望在不知道容器的width和height的况下，或者在需要这些属性保持灵活的情况下使用这种技术。</p>
<p>可以使用Holly 招数为容器提供一个的高度。这会让容器拥有布局。但是因为IE 6和更低版本中的元素会不正确地扩展以适应它们的内容，所以设置小的高度不会影响实际高度。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Hides from IE-Mac \*/</span></div><div class="line">* <span class="selector-tag">html</span> <span class="selector-class">.container</span> &#123; <span class="attribute">height</span>: <span class="number">1%</span>; &#125;</div><div class="line"><span class="comment">/* End hide from IE-Mac */</span></div></pre></td></tr></table></figure>
<p>停止对IE 的批评</p>
<p>IE 并不足惟一一种有bug 的浏览器，所以你可能会奇怪我为什么只关注IE bug。 不必担心，我找并不是专门和微软过不去，这么做是有理由的。</p>
<p>首先， IE 目前占有最大的浏览器市场份额。因为有许多人在使用IE，IE bug 往往很快被发现而且很好地记录下来。当在IE中发现一个重大的CSS<br>bug时，许多开发人员会尝试寻找修复方法或解决方案。由于IE的流行程度，被记录并修复的IE bug比其他任何浏览器都要多.</p>
<p>另一个主要问题是开发的节奏。Firefox、Safari和Opera等浏器不断地进行更新，新版本以非常高的频率出现。 bug 几乎一经发现就被修复了，并且发布浏览器的新版本.因此，现在讨论的任何Firefox或Safari bug 可能已经被下一个修订版修复了。</p>
<p>如此高的开发节奏确实很棒，但是也有自己的问题。开发人员要应付的浏览器版本不是两三个，而是20或30个。你无法确定用户是否使用最新的版本，这使测试变得极其困难。另一方面，IE差不多5年没有发布主要修订版了。因此，bug有更多的时间可以暴露出来，开发人员也有更强的寻找修复方法的动力。</p>
<p>幸运的是，IE 7承诺将成为更符合标准的浏览器。许多著名的IE bug 已经被解决，而且对高级CSS 2.1 选择器（比如子选择器和属性选择器）的支持也在增加。与所有浏览器一样，新的bug也会出现，IE7远不是完美的。但是，人们越快地升级到IE 7和Firefox 等现代浏览器，IE 5.0等老式浏览器就会越快地退役。</p>
<p>在这个过渡时期，可以考虑使用Dean Edwards 的IE 7 补丁。这是一系列JavaScript 文件，它们使IE 5-6/Win 能够接近IE7的水平.这包括改进的选择器实现和许多bug 修复。关与这个补丁的更多信息，请访问 <a href="http://dean.edwards.name/IE7/" target="_blank" rel="external">http://dean.edwards.name/IE7/</a></p>
<p>摘自：<a href="http://adamghost.com/2009/03/ie-has-layout-and-bugs-zh/" target="_blank" rel="external">http://adamghost.com/2009/03/ie-has-layout-and-bugs-zh/</a></p>
<p>下面是我收集到的关于IE Haslayout的文章,通过阅读这些文章，可以更加深入理解Haslayout：</p>
<ul>
<li>HasLayout Overview</li>
<li>IE Haslayout 详解</li>
<li>IE hasLayout的问题总结</li>
<li>On having layout</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们们那知道浏览器有bug，而且Windows上的lE的bug 似乎比太多数浏览器都多。IE/Win的衣现与其他浏览器不同的原因之一是，显示引擎使用一个称为布局(layout)的内部概念。因为布均是一个专门针对显示引擎内部工作方式的概念，所以一般悄况下不需要了解它。但是，布局问题是许多IE/Win显示bug的根源，所以理解这个概念以及它如何影响CSS是有捂助的。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://www.forsigner.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>《平凡的世界》：不平凡的人生</title>
    <link href="http://www.forsigner.com/2013/02/23/ordinary-world/"/>
    <id>http://www.forsigner.com/2013/02/23/ordinary-world/</id>
    <published>2013-02-22T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>在三天的多的时间里，没日没夜的把路遥的《平凡的世界》看完了。在看之前，真不知到这部小说如此之长，打开百度百科，才知道这部小说有1264页，100多万字。看电子书比较累，但现在庆幸自己看得是电子书，不然我早就被厚如砖头的书给吓住了，因为我一直抵触看很厚的书。现在看来，不想看厚书只是心理作用，其实我根本没那么怕看厚书。<br><a id="more"></a></p>
<p>在看《平凡的世界》之前，我一直再看krug的《don’t make me think》，不到150页的书，四天还没看完，在当时的状态实在看不下去了，所以就想那本小说看看，于是就开始看《平凡的世界》，刚看没多久就无法自拔了，没日没夜不到四天就把它看完了。</p>
<p>这是一部现实主义小说，故事发生在改革开放前后的十几年中，里面描绘了西北农村在这段时间的变迁，从公社化到土地责任承包制，里面有很多人物角色，孙少安、孙少平、田晓霞、田福军…里面交织带着亲情和爱情、追求和挫折、痛苦和欢笑、爱与恨、哭与笑…一切一切，这就是平凡的世界，但是平凡的世界中同样能活出不平凡的人生，如靠已经自己的努力摆脱平穷的孙少安，如正在追求理想不向生活屈服的孙少平。</p>
<p>我自己也是从农村长大的，家里世代都是农民，从小时候奶奶就给我讲过公社化，所以能很好的理解当时的时代背景。里面发生的很多事，不会感觉陌生无法理解，反而有些似曾相识，虽然我出生在90年代，原来我还是一个90后啊。</p>
<p>里面人物角色众多，个个性格鲜明：心系家人的孙少安，为梦想奋斗的孙少平，性格明朗的田晓霞，懂事的孙兰香，讲义气的金波…我发现自己的成长环境和成长经历个里面一个角色很像，她叫兰香，她也是在我看书过程中感动过我的人之一。我跟她一样，来自不富裕的农村家庭，从小能认识到家里的难处，很懂事，从小主动帮家里做能做的农活家务，每次看到她主动出去捡才柴禾的情节，就不由想起自己小时候上山捡柴草的画面。同样，我跟她一样，从小在所在的学校成绩名列前茅，最后顺利考试一间重点大学，当然，现在重点大学比不上当时的重点大学。每次想起兰香那句“妈，猪我一经喂过了…”,我就有一股想哭的冲动，我知道那是我被感动了。</p>
<p>我最新欢的人物角色，可能跟大多数人一样，是主人公孙少平。他是作者开头就描写的人物，同样也是结尾描写的人物，我想我废话了，正常情况开头结尾都是描写主角的。孙少平有很多优秀的特质，我最欣赏的一个是，他敢于追求自己的理想，追随自己的内心，虽然在其他人看来是不理性。从选择离开双水村，去大城市闯荡到拒绝兰香的好意，不留在原城而是回去大牙湾掏煤，孙少平一直都直面自己的内心，去追求自己想要的东西。孙少安在面对他和田润叶的爱情时，选择理性，其实也是一种逃避和向世俗低头。孙少平在面对他和田晓霞的爱情时，直面自己的内心，敢于去追求，虽然她和田晓霞的爱情以悲剧结束，但在晓霞死前他们是幸福的。</p>
<p>有人说，不明白为什么孙少平最后为什么不留在原城，而是选择回铜城，成为一个安于现状的煤矿工人。我想说的是，他不留在原城，是要去继续的为他的理想奋斗，他并没有成为一个安于现状的煤矿工人，根据小说的暗示，他的理想应该是改变中国当前落后的挖煤技术水平。我有不由想起自己，家里人都叫我去考公务员，但当公务员真的不是我想要的生活，所以我不会去考公务员。在去年回到家时，我们村有个当官的，住在离我家不远，是我们县的财政局局长，也是一个好官，到我家跟我父母和我说，愿不愿意回我们县，他可以提供一个不错的单位给我，因为他知道我在一间不错的大学读书，也快毕业了，最后我拒绝了，因为这不是我内心所追求的。我知道我如果接受这位局长的好意，我以后可能会在体制内混得不错，不会愁吃穿住，对我的家人也更好，但我不能背叛自己的内心，在这希望父母能原谅在这方面的自私，也对关心的局长衷心的说声谢谢。</p>
<p>最后，我知道少平的理想会实现的，他也最终会和秀走在一起，路遥，你说是不是？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在三天的多的时间里，没日没夜的把路遥的《平凡的世界》看完了。在看之前，真不知到这部小说如此之长，打开百度百科，才知道这部小说有1264页，100多万字。看电子书比较累，但现在庆幸自己看得是电子书，不然我早就被厚如砖头的书给吓住了，因为我一直抵触看很厚的书。现在看来，不想看厚书只是心理作用，其实我根本没那么怕看厚书。&lt;br&gt;
    
    </summary>
    
      <category term="读书" scheme="http://www.forsigner.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="http://www.forsigner.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t make me think(读书笔记)</title>
    <link href="http://www.forsigner.com/2013/02/16/dont-make-me-think/"/>
    <id>http://www.forsigner.com/2013/02/16/dont-make-me-think/</id>
    <published>2013-02-15T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>krug可用性定律：</p>
<p>第一定律：don’t make me think</p>
<p>第二定律：点击多少次都没关系，只要每次点击都无需思考、明确无误的选择。</p>
<p>第三定律：去掉每个页面上上一半的文字，然后把剩下的文字再去掉一半。（即省略不必要的文字）<br><a id="more"></a></p>
<p>也许一些习惯用法会发生变化，但有一件事情永远不会改变，那就是————人的本性。</p>
<p>为什么东西总是在你找的最后一个地方找到？因为你找到以后就不会再找。</p>
<p>我们认为的“精心准备的文字”（或者至少是“产品资料”）在用户看来更像“以每小时100公里的速度驶过的广告牌”。</p>
<p>第一个事实：我们不是阅读，而是扫描。</p>
<p>第二个事实：我们不做最佳选择，而是满意即可。</p>
<p>事实上，大多数时间里我们不会选择最佳选项，而是选择第一个合理的选项，这就是满意策略。一旦我们发现一个链接，看起来似乎能跳转到我们想要去的地方，那就是一个我们将要点击它的大好机会。</p>
<p>第三个事实，我们不是追根究底，而是勉强应付。</p>
<p>如果用户们都是疾驰而过，那么，你需要注意以下五个重要方面，来保证他们可能地看到了并了解你的网站。</p>
<p>在每个页面上建立清除的视觉层次。</p>
<p>尽量利用习惯用法。</p>
<p>把页面划分成明确定义的区域。</p>
<p>明显标识可以点击的地方。</p>
<p>最大限度降低干扰。</p>
<p>省略多余的文字，</p>
<p>有力的文字都很简练，句子里不应该有多余的文字，段落中不应该有多余的句子。同样，画上不应该有多余的线条，机器上不应该有多余的零件。</p>
<p>当我浏览网页的时候，发现大多数页面上的大部分文字都只不过是占地方，因为没人打算阅读它们，但因为它们确实在那儿，所以这些多余的文字都在暗示你可能真的需要阅读它们理解到底是怎么回事，这样常常使得页面看起来难度更高了。</p>
<p>如果在网站上找不到方向，人们不会使用你的网站。</p>
<p>为什么Web设计团队讨论可用性是浪费时间，如何避免这种情况。</p>
<p>我常常把这种无休止的讨论称为“信仰大战”，因为这种讨论跟大部分的宗教和政治讨论有很多相同之处：它们由大量无法验证的个人信仰组成————大体上是为了某些重要问题的最好做法上取得一致（不管是永久和平、政府效率，或者只是网页设计），而且，和大多数的信仰大战一样，它们很少能让人改变它们原来的看法。</p>
<p>除了浪费时间，这些争论也产生紧张气氛，破坏团队成员之间的关系，常常让团队无法做出关键决定。</p>
<p>遗憾的是，有一些因素存在大部分的Web团队中，让这些辩论几乎无法避免，在这一章，我将讲述这些因素，并解释我认为最好的解决方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;krug可用性定律：&lt;/p&gt;
&lt;p&gt;第一定律：don’t make me think&lt;/p&gt;
&lt;p&gt;第二定律：点击多少次都没关系，只要每次点击都无需思考、明确无误的选择。&lt;/p&gt;
&lt;p&gt;第三定律：去掉每个页面上上一半的文字，然后把剩下的文字再去掉一半。（即省略不必要的文字）&lt;br&gt;
    
    </summary>
    
      <category term="设计" scheme="http://www.forsigner.com/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计" scheme="http://www.forsigner.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Javascript闭包</title>
    <link href="http://www.forsigner.com/2013/02/13/learning-javascript-closure/"/>
    <id>http://www.forsigner.com/2013/02/13/learning-javascript-closure/</id>
    <published>2013-02-12T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>从开始学习JavaScript时，就听说闭包是个强大的东西，但也是一个很复杂很难懂的东西。一直以来也对闭包似懂非懂，</p>
<p>直到最近在读汤姆大叔的深入理解JavaScript系列 才基本弄懂什么是闭包，这里感学大叔无私的分享，这种无私的分享精神非常值得学习。下面关于我对闭包的描述大多数也是从大叔那看来。</p>
<a id="more"></a>
<p>闭包的定义</p>
<p>从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。</p>
<p>从实践角度：以下函数才算是闭包：<br>             1.即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）<br>             2.在代码中引用了自由变量<br>上面是汤姆大叔对闭包的定义，本来我想用自己的话来定义一下，但发现这是我见过对闭包最完美的定义，自己实在想不出有比这更准确、更通俗易懂的定义了，所以也不去写自己对闭包的定义了。</p>
<p>闭包的例子</p>
<p>下面是一些闭包使用的例子，当然这里的闭包是从实践的角度来讲的。</p>
<p>例子一（最简单的闭包）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">"hello"</span>; <span class="comment">//函数外部的自由变量a</span></div><div class="line"><span class="comment">//这个函数就是一个闭包</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">simplestClosure</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(a);</div><div class="line">&#125;</div><div class="line">simplestClosure(); <span class="comment">//将alert出hello</span></div></pre></td></tr></table></figure>
<p>函数simplestClosure在自己的scope寻找不到变量a，(我就把scope称作函数的作用域吧，虽然不太正确，但好理解)，它就会通过作用域链在它的父级函数的作用域或全局内寻找变量a，通过这种链式查找，函数可以访问到自由变量a，这就形成了最简单的闭包。</p>
<p>例子二（内部函数从父函数中返回）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerClosure</span>(<span class="params"></span>)  </span>&#123;</div><div class="line">    <span class="keyword">var</span> y = <span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">closure</span>(<span class="params">z</span>) </span>&#123;</div><div class="line">        alert(x+y+z);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//调用闭包函数closure，将alert出6</span></div></pre></td></tr></table></figure>
<p>例子三（使用匿名函数隐藏全局作用域变量）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 创建一个匿名函数作为包装</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//变量原本应该是全局的</span></div><div class="line">    <span class="keyword">var</span> msg = <span class="string">"hello"</span>;</div><div class="line">    <span class="comment">//将一个新函数绑定到全局对象</span></div><div class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span>&#123;</div><div class="line">    <span class="comment">// 这个函数使用“隐藏”变量msg</span></div><div class="line">       alert(msg);</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>例子四（创建封装的作用域来隐藏辅助对象）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = &#123;&#125;;</div><div class="line"><span class="comment">// 初始化</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">object</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line">    object.getX = <span class="function"><span class="keyword">function</span> <span class="title">_getX</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;;</div><div class="line">&#125;)(foo);</div><div class="line">alert(foo.getX()); <span class="comment">// 获得闭包 "x" – 10</span></div></pre></td></tr></table></figure>
<p>例子五（延时调用）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(a); <span class="comment">// 10, after one second</span></div><div class="line">&#125;,  <span class="number">1000</span>);</div></pre></td></tr></table></figure>
<p>例子六(回调函数)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"><span class="comment">// only for example</span></div><div class="line">xmlHttpRequestObject.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 当数据就绪的时候，才会调用;</span></div><div class="line">    <span class="comment">// 这里，不论是在哪个上下文中创建</span></div><div class="line">    <span class="comment">// 此时变量“x”的值已经存在了</span></div><div class="line">    alert(x); <span class="comment">// 10</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里没深入讨论闭包的理论，有兴趣的同学建议去看看大叔的博客和他的的深入理解JavaScript系列。</p>
<p>done。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从开始学习JavaScript时，就听说闭包是个强大的东西，但也是一个很复杂很难懂的东西。一直以来也对闭包似懂非懂，&lt;/p&gt;
&lt;p&gt;直到最近在读汤姆大叔的深入理解JavaScript系列 才基本弄懂什么是闭包，这里感学大叔无私的分享，这种无私的分享精神非常值得学习。下面关于我对闭包的描述大多数也是从大叔那看来。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.forsigner.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript回调函数的实现</title>
    <link href="http://www.forsigner.com/2013/02/12/javascript-callback/"/>
    <id>http://www.forsigner.com/2013/02/12/javascript-callback/</id>
    <published>2013-02-11T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>在JavaScript中，回调函数的使用非常频繁。特别是在各种Javascript库中，经常在一个函数中使用回调函数，例如jQuery中的each()方法。一年以来，在使用各种有回调函数的函数时，都没有去深究其内部的实现原理真，惭愧。在有米实习时，在读js师兄的代码时，偶然看到他写的一个函数是他自己实现回调函数的，当时感觉很神奇，原来这就是回调函数啊，之后google了很多关于Javascript回调函数的资料，终于大概弄明白回调函数是什么了。以下是自己对回调函数的一些理解。<br><a id="more"></a></p>
<p>回调函数定义：… 理论一直是我的弱项，定义暂时没法定，以后弄懂再补上，我暂时只懂它的用法orz。</p>
<p>回调函数的基本实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 声明一个函数，它的参数是一个函数fn</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params">fn</span>)  </span>&#123;</div><div class="line">    <span class="comment">// 回调前，可以do something</span></div><div class="line">    alert(<span class="string">'我是回调前执行的代码'</span>);</div><div class="line">    <span class="comment">// 存在fn则直接用，不存fn在则用函数表达式的方式声明一个</span></div><div class="line">    fn = fn || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    fn(); <span class="comment">//  调用传进来的fn</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 调用传进来的fn</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'I am callback!'</span>)</div><div class="line">&#125;</div><div class="line">example(callback); <span class="comment">// 调用函数a</span></div></pre></td></tr></table></figure>
<p>这个例子展示回调函数基本实现方法，实现回调的关键是把一个函数当成另一个参数。当然实践中很少用上面方式去使用回调函数，一般把一个匿名函数传入当成回调函数，这种方法在Javascript中使用非常广泛，下面是一个基本的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 声明一个函数，它的参数是一个函数fn</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line"><span class="comment">// 回调前，可以do something</span></div><div class="line">    alert(<span class="string">'我是回调前执行的代码'</span>);</div><div class="line">    <span class="comment">// 存在fn则直接用，不存fn在则用函数表达式的方式声明一个</span></div><div class="line">    fn = fn || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    fn(); <span class="comment">// 调用传进来的fn</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 把匿名函数当做参数</span></div><div class="line">example(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span>&#123;</div><div class="line">    alert(<span class="string">'I am callback!'</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用匿名函数作为参数，不仅可以极少代码，也让代码更好管理，更加灵活。</p>
<p>任何函数都是可以传入参数的，回调函数一样:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 声明一个函数，它的参数是一个函数fn</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params">a, fn</span>)  </span>&#123;</div><div class="line">    <span class="comment">// 回调前，可以do something</span></div><div class="line">    alert(a);</div><div class="line">    <span class="comment">// 存在fn则直接用，不存fn在则用函数表达式的方式声明一个</span></div><div class="line">    fn = fn || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    fn(m); <span class="comment">// 调用传进来的fn</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 把匿名函数当做参数</span></div><div class="line"><span class="keyword">var</span> m = <span class="string">'I am callback!'</span>;</div><div class="line">example(<span class="string">'我是回调前执行的代码'</span>,  <span class="function"><span class="keyword">function</span>(<span class="params">m</span>)  </span>&#123;</div><div class="line">    alert(m)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>以上就是Javascript回调函数的实现方法和简单用法，关于回调函数的作用，我的理解是：其实，每个函数的定义都是为了实现某些功能，在一个拥有回调函数的函数中，一般把实现一个功能的通用代码写在回调函数前，其实后也可以，而开发者在回调函数中自定义自己需要的功能。文艺一点，就是回调函数让世界更加多姿多彩。</p>
<p>done。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在JavaScript中，回调函数的使用非常频繁。特别是在各种Javascript库中，经常在一个函数中使用回调函数，例如jQuery中的each()方法。一年以来，在使用各种有回调函数的函数时，都没有去深究其内部的实现原理真，惭愧。在有米实习时，在读js师兄的代码时，偶然看到他写的一个函数是他自己实现回调函数的，当时感觉很神奇，原来这就是回调函数啊，之后google了很多关于Javascript回调函数的资料，终于大概弄明白回调函数是什么了。以下是自己对回调函数的一些理解。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.forsigner.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.forsigner.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>重读JavaScript经典书籍计划</title>
    <link href="http://www.forsigner.com/2013/02/02/javascript-reading/"/>
    <id>http://www.forsigner.com/2013/02/02/javascript-reading/</id>
    <published>2013-02-01T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>一年前，我下决心开始学习Javascript，那时门都还没入。为了入门，在豆瓣看了很多书评，之后确定了自己应该看那几本。确定书目后，图书馆有的就去图书馆借，没的话就在新浪爱问下载电子书。我依稀记得看的是这几本书：<br><a id="more"></a></p>
<ul>
<li><a href="http://book.douban.com/subject/2228378/" target="_blank" rel="external">Javascript权威指南</a></li>
<li><a href="http://book.douban.com/subject/1921890/" target="_blank" rel="external">Javascript DOM编程艺术</a></li>
<li><a href="http://book.douban.com/subject/1869705/" target="_blank" rel="external">JavaScript高级程序设计</a></li>
<li><a href="http://book.douban.com/subject/3022779/" target="_blank" rel="external">ppk谈JavaScript</a></li>
<li><a href="http://book.douban.com/subject/3007076/" target="_blank" rel="external">精通JavaScript</a></li>
</ul>
<p>那时恰好课程不多，整天都在看这几本书，一天里有超过8个钟在看这几本书，没课时在电脑前看，有课时在课堂上看。我的专业是工业设计，却整天在看编程书，别人都以为我疯了。那时候好傻，那几本书根本看不懂，但我我还是逼自己读下去，因为心里想看完那几本书肯定会收获很大。过了一多月，我确实把这本书看完了，其实看完后几乎没记下什么，还是有收获的，我基本上是入门的，知道JavaScript是怎么一回事了。</p>
<p>这段时间闲来无事，想整理一下自己脑子里的JavaScript知识，已形成自己的知识体系。所以决定从今天起，重新去读那几本经典的JavaScript书，大概翻了这几本书的目录，决定从阅读的顺序如下：</p>
<ul>
<li><a href="http://book.douban.com/subject/1869705/" target="_blank" rel="external">JavaScript高级程序设计</a></li>
<li><a href="http://book.douban.com/subject/3590768/" target="_blank" rel="external">JavaScript语言精粹</a></li>
<li><a href="http://book.douban.com/subject/3007076/" target="_blank" rel="external">精通JavaScript</a></li>
<li><a href="http://book.douban.com/subject/5362856/" target="_blank" rel="external">高性能JavaScript</a></li>
<li><a href="http://book.douban.com/subject/2228378/" target="_blank" rel="external">Javascript权威指南</a></li>
<li><a href="http://book.douban.com/subject/1921890/" target="_blank" rel="external">Javascript DOM编程艺术</a></li>
<li><a href="http://book.douban.com/subject/3022779/" target="_blank" rel="external">ppk谈JavaScript</a></li>
</ul>
<p>在知乎看个人牛人的建议，觉得JavaScript语言精粹和高性能JavaScript也有必要一读。</p>
<p>done。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一年前，我下决心开始学习Javascript，那时门都还没入。为了入门，在豆瓣看了很多书评，之后确定了自己应该看那几本。确定书目后，图书馆有的就去图书馆借，没的话就在新浪爱问下载电子书。我依稀记得看的是这几本书：&lt;br&gt;
    
    </summary>
    
      <category term="读书" scheme="http://www.forsigner.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="http://www.forsigner.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>vim插件project的用法</title>
    <link href="http://www.forsigner.com/2012/12/29/use-vim-project/"/>
    <id>http://www.forsigner.com/2012/12/29/use-vim-project/</id>
    <published>2012-12-28T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>用任何编辑器写代码，文件管理的方便与否对编码效率影响很大。一般的IDE都有文件管理功能，并且用来的不错。在vim中，要实现较好的文件管理功能一般都靠插件。在有米实习的第一个月，自己一直用NERDTree来管理文件。开始用起来很爽，因为我的vim终于可以和IDE一样管理我的文件了，但是NERDtree有个明显的缺点，当一个项目的文件系统很复杂时，NERDtree展现出的是节点多到让你蛋疼，这时要打开一个文件相当麻烦，效率低下。碰巧js师兄看到我的vim那么悲催，就介绍了一个项目管理插件，叫project。对于vim来说，这是一个几乎完美的项目管理+文件管理插件，优点就不多写了，谁用谁知道。<br><a id="more"></a></p>
<p>project使用法很简单，下面记录下自己常用的几个功能：</p>
<p>首先，用:Project 打开project，不过我喜欢在 .vimrc 中绑定快捷键 nmaprToggleProject ，这个快捷键的功能是按 pr 切换project的打开和关闭状态。</p>
<p>下面用project打开一个项目，打开project后输入下面类似的命令：</p>
<figure class="highlight golo"><table><tr><td class="code"><pre><div class="line">myproject=<span class="keyword">var</span>/www/myproject CD=. <span class="keyword">filter</span>=<span class="string">"*.js  *.html *.md"</span> &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设myproject文件中有四个文件：jqurey.js index.html readme.md info.php 和一个子文件夹 child，文件夹child两个文件：test.html和sea.js。把光标停在上两行代码中并按下\r刷新，project中应该出现以代码：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">myproject=var/www/myproject CD=. <span class="attribute">filter</span>=<span class="string">"*.js  *.html *.md"</span> &#123;</div><div class="line">    jquery<span class="selector-class">.js</span></div><div class="line">    index<span class="selector-class">.html</span></div><div class="line">    readme<span class="selector-class">.md</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在project在添加一行，添加后代码如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">myproject=var/www/myproject CD=. <span class="attribute">filter</span>=<span class="string">"*.js  *.html *.md"</span> &#123;</div><div class="line">    jquery<span class="selector-class">.js</span></div><div class="line">    index<span class="selector-class">.html</span></div><div class="line">    readme<span class="selector-class">.md</span></div><div class="line">    child=child <span class="attribute">filter</span>=<span class="string">".js"</span> &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再使用/r刷新刚添加的那行，project代码应该如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">myproject=var/www/myproject  CD=.  <span class="attribute">filter</span>=<span class="string">"*.js  *.html *.md"</span>  &#123;</div><div class="line">    jquery<span class="selector-class">.js</span></div><div class="line">    index<span class="selector-class">.html</span></div><div class="line">    readme<span class="selector-class">.md</span></div><div class="line">    child=child <span class="attribute">filter</span>=<span class="string">".js"</span>  &#123;</div><div class="line">        sea<span class="selector-class">.js</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面是使用project打开一个项目的简单完整过程，下面是一些自己常用的命令：</p>
<ul>
<li>\r—reflash光标所在的文件夹</li>
<li>\R—reflash光标所在的文件夹及其子文件夹</li>
<li>\c—create一个项目文件夹</li>
<li>\C—create一个项目文件夹，并会导入期所有子文件夹，项目较大时慎用</li>
<li>\s—如果光标在文件前，用水平分割窗口的方式打开文件，如果光标在文件前，open or close it.</li>
<li>\S—用水平分割窗口的方式打开该文件件的所有文件</li>
<li>\o—打开一个文件，光标会跳到新打开的文件窗口中</li>
<li>\v—代开一个文件，光标不会跳</li>
<li>vim中默认的maplocalleader是 \ ,我喜欢在.vimrc设置let maplocalleader=”;”,执行以上命令式使用 ; 代替 \ 。</li>
</ul>
<p>done 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用任何编辑器写代码，文件管理的方便与否对编码效率影响很大。一般的IDE都有文件管理功能，并且用来的不错。在vim中，要实现较好的文件管理功能一般都靠插件。在有米实习的第一个月，自己一直用NERDTree来管理文件。开始用起来很爽，因为我的vim终于可以和IDE一样管理我的文件了，但是NERDtree有个明显的缺点，当一个项目的文件系统很复杂时，NERDtree展现出的是节点多到让你蛋疼，这时要打开一个文件相当麻烦，效率低下。碰巧js师兄看到我的vim那么悲催，就介绍了一个项目管理插件，叫project。对于vim来说，这是一个几乎完美的项目管理+文件管理插件，优点就不多写了，谁用谁知道。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.forsigner.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="前端工具" scheme="http://www.forsigner.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Github Pages绑定域名</title>
    <link href="http://www.forsigner.com/2012/11/12/github-pages-custom-doman/"/>
    <id>http://www.forsigner.com/2012/11/12/github-pages-custom-doman/</id>
    <published>2012-11-11T16:00:00.000Z</published>
    <updated>2016-05-17T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Github Pages的默认域名是github的二级域名username.github.com或者username.github.io，需要绑定自己的独立域名的话也非常简单，只要以下两步：</p>
<a id="more"></a>
<h2 id="一、增加CNAME"><a href="#一、增加CNAME" class="headerlink" title="一、增加CNAME"></a>一、增加CNAME</h2><p>在你的git仓库创建一个CNAME文件，内容写你的域名。比如我的域名是forsigner.com，在CNAME文件写入“forsigner.com”就好了。</p>
<h2 id="二、域名解析"><a href="#二、域名解析" class="headerlink" title="二、域名解析"></a>二、域名解析</h2><p>首先获取你Github Pages域名的ip，比如你的Github pages域名为forsigner.github.io，执行一下命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ ping forsigner.github.io</div></pre></td></tr></table></figure>
<p>你应该可以得到一个IP，比如IP是207.97.227.245。</p>
<p>最后去你的域名注册商后台，增加一条A记录到该IP就好了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Github Pages的默认域名是github的二级域名username.github.com或者username.github.io，需要绑定自己的独立域名的话也非常简单，只要以下两步：&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.forsigner.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://www.forsigner.com/tags/git/"/>
    
  </entry>
  
</feed>
