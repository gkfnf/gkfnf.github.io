<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web 安全 on Fkbug</title>
    <link>https://gkfnf.github.io/categories/web-%E5%AE%89%E5%85%A8/</link>
    <description>Recent content in Web 安全 on Fkbug</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Oct 2018 22:04:55 +0800</lastBuildDate>
    
	<atom:link href="https://gkfnf.github.io/categories/web-%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1. XSS </title>
      <link>https://gkfnf.github.io/2018/xss/</link>
      <pubDate>Sat, 13 Oct 2018 22:04:55 +0800</pubDate>
      
      <guid>https://gkfnf.github.io/2018/xss/</guid>
      <description>漏洞本质 个人理解，安全漏洞主要是下边两个原因导致的：
一 是未能正确区分数据和代码
二 是安全策略不周
怎么理解？
在二进制范畴里：  栈溢出 是因为数据把栈覆盖了被当成了代码被执行了 堆喷 是因为数据把堆覆盖了被当成了代码被执行了  诸如 格式化字符串， UAF（释放后重用）, DDOS(拒绝服务) 等基本可以说都是上边两种的子集。
这两种类型江湖人称 &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- 溢出
皆是因 未能正确区分数据和代码 而掀起的腥风血雨
至于下边这几种：
 加密缺陷 凭据管理不当 信息泄露 。。。  则基本都可以说是 安全策略考虑不周 造成的
而在Web范畴里： 可以将 Web 分为八层来看待问题： 将特殊数据作为 Web 系统的输入, 根据是否对 数据和代码进行了正确区分，在 Web 的各层便构成了不同种类的安全问题：
 在操作系统层， 如果没有对输入数据处理好， 将数据当成了代码执行，便构成了 OS 命令执行的问题。 通常导致 OS 命令执行的是一些 RCE 漏洞, 这时构造的恶意数据便是我们二进制里说的 Shellcode, 也就是汇编字节码。 但是有时候因为命令行的一些漏洞， 导致直接输入一些 Bash 或 Powershell 脚本得到了执行， 这时特殊数据便可能是一些命令行脚本， 如:  rm -rm/   在数据的存储层， 如果没有处理好输入的数据， 数据库的 SQL 解析引擎把这个特殊数据当成代码执行了， 就导致了 sql 注入的问题, 可能的特殊数据便是 精心构造的 sql 语句, 如：  &#39;union select user, pwd, 1, 2, 3, 4, from users--   而如果在 Web 容器层如 Nginx 中没有处理好输入的数据， 由于 Nginx 或 Apache 自身的漏洞，将特殊数据当成代码执行了, 便可能产生 远程溢出、 DDos 等安全问题; 可能的特殊数据是：  %c0.</description>
    </item>
    
  </channel>
</rss>